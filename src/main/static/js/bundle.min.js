!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=46)}([function(e,t,n){"use strict";e.exports=n(21)},function(e,t,n){"use strict";var r=n(11),o=n(30),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function u(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:l,isStream:function(e){return u(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){e.exports=n(25)()},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(22)},function(e,t,n){e.exports=n(29)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(27)},function(e,t,n){"use strict";var r=n(7),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";(function(e,r){var o,i=n(19);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(6),n(28)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var s=0;s<a.length;s++)i.call(n,a[s])&&(u[a[s]]=n[a[s]])}}return u}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(1);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(1),o=n(36),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?u=n(15):"undefined"!=typeof XMLHttpRequest&&(u=n(15)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){l.headers[e]={}}),r.forEach(["post","put","patch"],function(e){l.headers[e]=r.merge(i)}),e.exports=l}).call(this,n(35))},function(e,t,n){"use strict";var r=n(1),o=n(37),i=n(12),a=n(39),u=n(40),l=n(16);e.exports=function(e){return new Promise(function(t,c){var s=e.data,f=e.headers;r.isFormData(s)&&delete f["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",h=e.auth.password||"";f.Authorization="Basic "+btoa(p+":"+h)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:e,request:d};o(t,c,r),d=null}},d.onabort=function(){d&&(c(l("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){c(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var m=n(41),v=(e.withCredentials||u(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;v&&(f[e.xsrfHeaderName]=v)}if("setRequestHeader"in d&&r.forEach(f,function(e,t){void 0===s&&"content-type"===t.toLowerCase()?delete f[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),c(e),d=null)}),void 0===s&&(s=null),d.send(s)})}},function(e,t,n){"use strict";var r=n(38);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){t=t||{};var n={};return r.forEach(["url","method","params","data"],function(e){void 0!==t[e]&&(n[e]=t[e])}),r.forEach(["headers","auth","proxy"],function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])}),r.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){(function(e){!function(t){"use strict";function n(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function o(e,t,n){o.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function i(e,t){i.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function a(e,t){a.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function u(e,t,n){u.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function l(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function c(e){var t=void 0===e?"undefined":S(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function s(e,t,n,r,f,d,p){p=p||[];var h=(f=f||[]).slice(0);if(void 0!==d){if(r){if("function"==typeof r&&r(h,d))return;if("object"===(void 0===r?"undefined":S(r))){if(r.prefilter&&r.prefilter(h,d))return;if(r.normalize){var m=r.normalize(h,d,e,t);m&&(e=m[0],t=m[1])}}}h.push(d)}"regexp"===c(e)&&"regexp"===c(t)&&(e=e.toString(),t=t.toString());var v=void 0===e?"undefined":S(e),y=void 0===t?"undefined":S(t),g="undefined"!==v||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),b="undefined"!==y||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!g&&b)n(new i(h,t));else if(!b&&g)n(new a(h,e));else if(c(e)!==c(t))n(new o(h,e,t));else if("date"===c(e)&&e-t!=0)n(new o(h,e,t));else if("object"===v&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&n(new o(h,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var w;for(e.length,w=0;w<e.length;w++)w>=t.length?n(new u(h,w,new a(void 0,e[w]))):s(e[w],t[w],n,r,h,w,p);for(;w<t.length;)n(new u(h,w,new i(void 0,t[w++])))}else{var x=Object.keys(e),k=Object.keys(t);x.forEach(function(o,i){var a=k.indexOf(o);a>=0?(s(e[o],t[o],n,r,h,o,p),k=l(k,a)):s(e[o],void 0,n,r,h,o,p)}),k.forEach(function(e){s(void 0,t[e],n,r,h,e,p)})}p.length=p.length-1}else e!==t&&("number"===v&&isNaN(e)&&isNaN(t)||n(new o(h,e,t)))}function f(e,t,n,r){return r=r||[],s(e,t,function(e){e&&r.push(e)},n),r.length?r:void 0}function d(e,t,n){if(e&&t&&n&&n.kind){for(var r=e,o=-1,i=n.path?n.path.length-1:0;++o<i;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,i=t[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":e(i[r.path[o]],r.index,r.item);break;case"D":delete i[r.path[o]];break;case"E":case"N":i[r.path[o]]=r.rhs}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":t=l(t,n);break;case"E":case"N":t[n]=r.rhs}return t}(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function p(e){return"color: "+C[e].color+"; font-weight: bold"}function h(e,t,n,r){var o=f(e,t);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(e){n.log("diff")}o?o.forEach(function(e){var t=e.kind,r=function(e){var t=e.kind,n=e.path,r=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+i+"]",a];default:return[]}}(e);n.log.apply(n,["%c "+C[t].text,p(t)].concat(T(r)))}):n.log("—— no diff ——");try{n.groupEnd()}catch(e){n.log("—— diff end —— ")}}function m(e,t,n,r){switch(void 0===e?"undefined":S(e)){case"object":return"function"==typeof e[r]?e[r].apply(e,T(n)):e[r];case"function":return e(t);default:return e}}function v(e,t){var n=t.logger,r=t.actionTransformer,o=t.titleFormatter,i=void 0===o?function(e){var t=e.timestamp,n=e.duration;return function(e,r,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+r),n&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}(t):o,a=t.collapsed,u=t.colors,l=t.level,c=t.diff,s=void 0===t.titleFormatter;e.forEach(function(o,f){var d=o.started,p=o.startedTime,v=o.action,y=o.prevState,g=o.error,b=o.took,w=o.nextState,k=e[f+1];k&&(w=k.prevState,b=k.started-d);var S=r(v),T="function"==typeof a?a(function(){return w},v,o):a,E=x(p),C=u.title?"color: "+u.title(S)+";":"",_=["color: gray; font-weight: lighter;"];_.push(C),t.timestamp&&_.push("color: gray; font-weight: lighter;"),t.duration&&_.push("color: gray; font-weight: lighter;");var P=i(S,E,b);try{T?u.title&&s?n.groupCollapsed.apply(n,["%c "+P].concat(_)):n.groupCollapsed(P):u.title&&s?n.group.apply(n,["%c "+P].concat(_)):n.group(P)}catch(e){n.log(P)}var O=m(l,S,[y],"prevState"),N=m(l,S,[S],"action"),R=m(l,S,[g,y],"error"),j=m(l,S,[w],"nextState");if(O)if(u.prevState){var A="color: "+u.prevState(y)+"; font-weight: bold";n[O]("%c prev state",A,y)}else n[O]("prev state",y);if(N)if(u.action){var M="color: "+u.action(S)+"; font-weight: bold";n[N]("%c action    ",M,S)}else n[N]("action    ",S);if(g&&R)if(u.error){var D="color: "+u.error(g,y)+"; font-weight: bold;";n[R]("%c error     ",D,g)}else n[R]("error     ",g);if(j)if(u.nextState){var I="color: "+u.nextState(w)+"; font-weight: bold";n[j]("%c next state",I,w)}else n[j]("next state",w);c&&h(y,w,n,T);try{n.groupEnd()}catch(e){n.log("—— log end ——")}})}function y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},_,e),n=t.logger,r=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,u=t.diffPredicate;if(void 0===n)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var l=[];return function(e){var n=e.getState;return function(e){return function(c){if("function"==typeof i&&!i(n,c))return e(c);var s={};l.push(s),s.started=k.now(),s.startedTime=new Date,s.prevState=r(n()),s.action=c;var f=void 0;if(a)try{f=e(c)}catch(e){s.error=o(e)}else f=e(c);s.took=k.now()-s.started,s.nextState=r(n());var d=t.diff&&"function"==typeof u?u(n,c):t.diff;if(v(l,Object.assign({},t,{diff:d})),l.length=0,s.error)throw s.error;return f}}}}var g,b,w=function(e,t){return function(e,t){return new Array(t+1).join(e)}("0",t-e.toString().length)+e},x=function(e){return w(e.getHours(),2)+":"+w(e.getMinutes(),2)+":"+w(e.getSeconds(),2)+"."+w(e.getMilliseconds(),3)},k="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},E=[];g="object"===(void 0===e?"undefined":S(e))&&e?e:"undefined"!=typeof window?window:{},(b=g.DeepDiff)&&E.push(function(){void 0!==b&&g.DeepDiff===f&&(g.DeepDiff=b,b=void 0)}),n(o,r),n(i,r),n(a,r),n(u,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:s,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&s(e,t,function(r){n&&!n(e,t,r)||d(e,t,r)})},enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,o,i=e;for(o=n.path.length-1,r=0;r<o;r++)void 0===i[n.path[r]]&&(i[n.path[r]]={}),i=i[n.path[r]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,i=t[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":e(i[r.path[o]],r.index,r.item);break;case"D":case"E":i[r.path[o]]=r.lhs;break;case"N":delete i[r.path[o]]}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":case"E":t[n]=r.lhs;break;case"N":t=l(t,n)}return t}(i[n.path[r]],n.index,n.item);break;case"D":case"E":i[n.path[r]]=n.lhs;break;case"N":delete i[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==b},enumerable:!0},noConflict:{value:function(){return E&&(E.forEach(function(e){e()}),E=null),f},enumerable:!0}});var C={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},_={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},P=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,n=e.getState;return"function"==typeof t||"function"==typeof n?y()({dispatch:t,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};t.defaults=_,t.createLogger=y,t.logger=P,t.default=P,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(6))},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(10),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.concurrent_mode"):60111,p=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function k(){}function S(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=x.prototype;var T=S.prototype=new k;T.constructor=S,r(T,x.prototype),T.isPureReactComponent=!0;var E={current:null},C={current:null},_=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!P.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:C.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var R=/\/+/g,j=[];function A(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function D(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+I(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+I(u=t[c],c);l+=e(u,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=y&&t[y]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+I(u,c++),r,o);else"object"===u&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(R,"$&/")+"/"),D(e,U,t=A(t,i,r,o)),M(t)}function z(){var e=E.current;return null===e&&g("321"),e}var B={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;D(e,L,t=A(null,null,t,n)),M(t)},count:function(e){return D(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return N(e)||g("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:S,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:u,StrictMode:l,Suspense:h,createElement:O,cloneElement:function(e,t,n){null==e&&g("267",e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=C.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)_.call(t,o)&&!P.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.8.6",unstable_ConcurrentMode:d,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:E,ReactCurrentOwner:C,assign:r}},W={default:B},q=W&&B||W;e.exports=q.default||q},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(10),i=n(23);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,l=null,c=!1,s=null,f={onError:function(e){u=!0,l=e}};function d(e,t,n,r,o,i,a,c,s){u=!1,l=null,function(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function m(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||a("96",e),!y[n])for(var r in t.extractEvents||a("97",e),y[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;g.hasOwnProperty(l)&&a("99",l),g[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&v(c[o],u,l);o=!0}else i.registrationName?(v(i.registrationName,u,l),o=!0):o=!1;o||a("98",r,e)}}}function v(e,t,n){b[e]&&a("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var y=[],g={},b={},w={},x=null,k=null,S=null;function T(e,t,n){var r=e.type||"unknown-event";e.currentTarget=S(n),function(e,t,n,r,o,i,f,p,h){if(d.apply(this,arguments),u){if(u){var m=l;u=!1,l=null}else a("198"),m=void 0;c||(c=!0,s=m)}}(r,t,void 0,e),e.currentTarget=null}function E(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function C(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var _=null;function P(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)T(e,t[r],n[r]);else t&&T(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var O={injectEventPluginOrder:function(e){p&&a("101"),p=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function R(e){if(null!==e&&(_=E(_,e)),e=_,_=null,e&&(C(e,P),_&&a("95"),c))throw e=s,c=!1,s=null,e}var j=Math.random().toString(36).slice(2),A="__reactInternalInstance$"+j,M="__reactEventHandlers$"+j;function D(e){if(e[A])return e[A];for(;!e[A];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[A]).tag||6===e.tag?e:null}function I(e){return!(e=e[A])||5!==e.tag&&6!==e.tag?null:e}function L(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function U(e){return e[M]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function z(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=E(n._dispatchListeners,t),n._dispatchInstances=E(n._dispatchInstances,e))}function B(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)z(n[t],"captured",e);for(t=0;t<n.length;t++)z(n[t],"bubbled",e)}}function W(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=E(n._dispatchListeners,t),n._dispatchInstances=E(n._dispatchInstances,e))}function q(e){e&&e.dispatchConfig.registrationName&&W(e._targetInst,null,e)}function $(e){C(e,B)}var V=!("undefined"==typeof window||!window.document||!window.document.createElement);function H(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var K={animationend:H("Animation","AnimationEnd"),animationiteration:H("Animation","AnimationIteration"),animationstart:H("Animation","AnimationStart"),transitionend:H("Transition","TransitionEnd")},Q={},Y={};function X(e){if(Q[e])return Q[e];if(!K[e])return e;var t,n=K[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return Q[e]=n[t];return e}V&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete K.animationend.animation,delete K.animationiteration.animation,delete K.animationstart.animation),"TransitionEvent"in window||delete K.transitionend.transition);var J=X("animationend"),G=X("animationiteration"),Z=X("animationstart"),ee=X("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function ue(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:ue,this.isPropagationStopped=ue,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function se(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var de=le.extend({data:null}),pe=le.extend({data:null}),he=[9,13,27,32],me=V&&"CompositionEvent"in window,ve=null;V&&"documentMode"in document&&(ve=document.documentMode);var ye=V&&"TextEvent"in window&&!ve,ge=V&&(!me||ve&&8<ve&&11>=ve),be=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},xe=!1;function ke(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Se(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Te=!1;var Ee={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(me)e:{switch(e){case"compositionstart":o=we.compositionStart;break e;case"compositionend":o=we.compositionEnd;break e;case"compositionupdate":o=we.compositionUpdate;break e}o=void 0}else Te?ke(e,n)&&(o=we.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(ge&&"ko"!==n.locale&&(Te||o!==we.compositionStart?o===we.compositionEnd&&Te&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Te=!0)),o=de.getPooled(o,t,n,r),i?o.data=i:null!==(i=Se(n))&&(o.data=i),$(o),i=o):i=null,(e=ye?function(e,t){switch(e){case"compositionend":return Se(t);case"keypress":return 32!==t.which?null:(xe=!0,be);case"textInput":return(e=t.data)===be&&xe?null:e;default:return null}}(e,n):function(e,t){if(Te)return"compositionend"===e||!me&&ke(e,t)?(e=ie(),oe=re=ne=null,Te=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(we.beforeInput,t,n,r)).data=e,$(t)):t=null,null===i?t:null===t?i:[i,t]}},Ce=null,_e=null,Pe=null;function Oe(e){if(e=k(e)){"function"!=typeof Ce&&a("280");var t=x(e.stateNode);Ce(e.stateNode,e.type,t)}}function Ne(e){_e?Pe?Pe.push(e):Pe=[e]:_e=e}function Re(){if(_e){var e=_e,t=Pe;if(Pe=_e=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function je(e,t){return e(t)}function Ae(e,t,n){return e(t,n)}function Me(){}var De=!1;function Ie(e,t){if(De)return e(t);De=!0;try{return je(e,t)}finally{De=!1,(null!==_e||null!==Pe)&&(Me(),Re())}}var Le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ue(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Le[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ze(e){if(!V)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function We(e){e._valueTracker||(e._valueTracker=function(e){var t=Be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function qe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var $e=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;$e.hasOwnProperty("ReactCurrentDispatcher")||($e.ReactCurrentDispatcher={current:null});var Ve=/^(.*)[\\\/]/,He="function"==typeof Symbol&&Symbol.for,Ke=He?Symbol.for("react.element"):60103,Qe=He?Symbol.for("react.portal"):60106,Ye=He?Symbol.for("react.fragment"):60107,Xe=He?Symbol.for("react.strict_mode"):60108,Je=He?Symbol.for("react.profiler"):60114,Ge=He?Symbol.for("react.provider"):60109,Ze=He?Symbol.for("react.context"):60110,et=He?Symbol.for("react.concurrent_mode"):60111,tt=He?Symbol.for("react.forward_ref"):60112,nt=He?Symbol.for("react.suspense"):60113,rt=He?Symbol.for("react.memo"):60115,ot=He?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ye:return"Fragment";case Qe:return"Portal";case Je:return"Profiler";case Xe:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Ge:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return ut(e.type);case ot:if(e=1===e._status?e._result:null)return ut(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ut(e.type);n=null,r&&(n=ut(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Ve,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,st=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function yt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!st.call(dt,e)||!st.call(ft,e)&&(ct.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&yt(e,"checked",t,!1)}function kt(e,t){xt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Tt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Tt(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function St(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Tt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,vt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new pt(e,1,!1,e.toLowerCase(),null)});var Et={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ct(e,t,n){return(e=le.getPooled(Et.change,e,t,n)).type="change",Ne(n),$(e),e}var _t=null,Pt=null;function Ot(e){R(e)}function Nt(e){if(qe(L(e)))return e}function Rt(e,t){if("change"===e)return t}var jt=!1;function At(){_t&&(_t.detachEvent("onpropertychange",Mt),Pt=_t=null)}function Mt(e){"value"===e.propertyName&&Nt(Pt)&&Ie(Ot,e=Ct(Pt,e,Fe(e)))}function Dt(e,t,n){"focus"===e?(At(),Pt=n,(_t=t).attachEvent("onpropertychange",Mt)):"blur"===e&&At()}function It(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nt(Pt)}function Lt(e,t){if("click"===e)return Nt(t)}function Ut(e,t){if("input"===e||"change"===e)return Nt(t)}V&&(jt=ze("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:Et,_isInputEventSupported:jt,extractEvents:function(e,t,n,r){var o=t?L(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Rt:Ue(o)?jt?i=Ut:(i=It,a=Dt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Lt),i&&(i=i(e,t)))return Ct(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Tt(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Bt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Wt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Bt[e])&&!!t[e]}function qt(){return Wt}var $t=0,Vt=0,Ht=!1,Kt=!1,Qt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:qt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=$t;return $t=e.screenX,Ht?"mousemove"===e.type?e.screenX-t:0:(Ht=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Vt;return Vt=e.screenY,Kt?"mousemove"===e.type?e.screenY-t:0:(Kt=!0,0)}}),Yt=Qt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jt={eventTypes:Xt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?D(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Qt,u=Xt.mouseLeave,l=Xt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Yt,u=Xt.pointerLeave,l=Xt.pointerEnter,c="pointer");var s=null==i?o:L(i);if(o=null==t?o:L(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=F(a))c++;for(a=0,l=o;l;l=F(l))a++;for(;0<c-a;)t=F(t),c--;for(;0<a-c;)o=F(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=F(t),o=F(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=F(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=F(r);for(r=0;r<t.length;r++)W(t[r],"bubbled",e);for(r=i.length;0<r--;)W(i[r],"captured",n);return[e,n]}};function Gt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Gt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Gt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var u=o.child;u;){if(u===n)return nn(o),e;if(u===r)return nn(o),t;u=u.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{u=!1;for(var l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=zt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=zt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?sn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:qt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Qt.extend({dataTransfer:null}),pn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:qt}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Qt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),vn=[["abort","abort"],[J,"animationEnd"],[G,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],yn={},gn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},yn[e]=t,gn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),vn.forEach(function(e){bn(e,!1)});var wn={eventTypes:yn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=gn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=gn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Qt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case J:case G:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=zt;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Yt;break;default:e=le}return $(t=e.getPooled(o,t,n,r)),t}},xn=wn.isInteractiveTopLevelEventType,kn=[];function Sn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=D(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Fe(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<y.length;u++){var l=y[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=E(a,l))}R(a)}}var Tn=!0;function En(e,t){if(!t)return null;var n=(xn(e)?_n:Pn).bind(null,e);t.addEventListener(e,n,!1)}function Cn(e,t){if(!t)return null;var n=(xn(e)?_n:Pn).bind(null,e);t.addEventListener(e,n,!0)}function _n(e,t){Ae(Pn,e,t)}function Pn(e,t){if(Tn){var n=Fe(t);if(null===(n=D(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),kn.length){var r=kn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ie(Sn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>kn.length&&kn.push(e)}}}var On={},Nn=0,Rn="_reactListenersID"+(""+Math.random()).slice(2);function jn(e){return Object.prototype.hasOwnProperty.call(e,Rn)||(e[Rn]=Nn++,On[e[Rn]]={}),On[e[Rn]]}function An(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Mn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Dn(e,t){var n,r=Mn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Mn(r)}}function In(){for(var e=window,t=An();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=An((e=t.contentWindow).document)}return t}function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Un(e){var t=In(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Ln(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=Dn(n,i);var a=Dn(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Fn=V&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Bn=null,Wn=null,qn=null,$n=!1;function Vn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return $n||null==Bn||Bn!==An(n)?null:("selectionStart"in(n=Bn)&&Ln(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},qn&&en(qn,n)?null:(qn=n,(e=le.getPooled(zn.select,Wn,e,t)).type="select",e.target=Bn,$(e),e))}var Hn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=jn(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?L(t):window,e){case"focus":(Ue(i)||"true"===i.contentEditable)&&(Bn=i,Wn=t,qn=null);break;case"blur":qn=Wn=Bn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":case"dragend":return $n=!1,Vn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return Vn(n,r)}return null}};function Kn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Qn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Yn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Xn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:gt(n)}}function Jn(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Gn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=U,k=I,S=L,O.injectEventPluginsByName({SimpleEventPlugin:wn,EnterLeaveEventPlugin:Jt,ChangeEventPlugin:Ft,SelectEventPlugin:Hn,BeforeInputEventPlugin:Ee});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,or=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function ir(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ur=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ar.hasOwnProperty(e)&&ar[e]?(""+t).trim():t+"px"}function cr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ar).forEach(function(e){ur.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ar[t]=ar[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function dr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=jn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Cn("scroll",e);break;case"focus":case"blur":Cn("focus",e),Cn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":ze(o)&&Cn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&En(o,e)}n[o]=!0}}}function hr(){}var mr=null,vr=null;function yr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var br="function"==typeof setTimeout?setTimeout:void 0,wr="function"==typeof clearTimeout?clearTimeout:void 0,xr=i.unstable_scheduleCallback,kr=i.unstable_cancelCallback;function Sr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Tr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Er=[],Cr=-1;function _r(e){0>Cr||(e.current=Er[Cr],Er[Cr]=null,Cr--)}function Pr(e,t){Er[++Cr]=e.current,e.current=t}var Or={},Nr={current:Or},Rr={current:!1},jr=Or;function Ar(e,t){var n=e.type.contextTypes;if(!n)return Or;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Mr(e){return null!=(e=e.childContextTypes)}function Dr(e){_r(Rr),_r(Nr)}function Ir(e){_r(Rr),_r(Nr)}function Lr(e,t,n){Nr.current!==Or&&a("168"),Pr(Nr,t),Pr(Rr,n)}function Ur(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",ut(t)||"Unknown",i);return o({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Or,jr=Nr.current,Pr(Nr,t),Pr(Rr,Rr.current),!0}function zr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Ur(e,t,jr),r.__reactInternalMemoizedMergedChildContext=t,_r(Rr),_r(Nr),Pr(Nr,t)):_r(Rr),Pr(Rr,n)}var Br=null,Wr=null;function qr(e){return function(t){try{return e(t)}catch(e){}}}function $r(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Vr(e,t,n,r){return new $r(e,t,n,r)}function Hr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Kr(e,t){var n=e.alternate;return null===n?((n=Vr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Qr(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Hr(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ye:return Yr(n.children,o,i,t);case et:return Xr(n,3|o,i,t);case Xe:return Xr(n,2|o,i,t);case Je:return(e=Vr(12,n,t,4|o)).elementType=Je,e.type=Je,e.expirationTime=i,e;case nt:return(e=Vr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Ge:u=10;break e;case Ze:u=9;break e;case tt:u=11;break e;case rt:u=14;break e;case ot:u=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=Vr(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Yr(e,t,n,r){return(e=Vr(7,e,r,t)).expirationTime=n,e}function Xr(e,t,n,r){return e=Vr(8,e,r,t),t=0==(1&t)?Xe:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Jr(e,t,n){return(e=Vr(6,e,null,t)).expirationTime=n,e}function Gr(e,t,n){return(t=Vr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),no(t,e)}function eo(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),no(t,e)}function to(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function no(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function ro(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var oo=(new r.Component).refs;function io(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ao={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ku(),o=Xi(r=Ya(r,e));o.payload=t,null!=n&&(o.callback=n),qa(),Gi(e,o),Ga(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ku(),o=Xi(r=Ya(r,e));o.tag=$i,o.payload=t,null!=n&&(o.callback=n),qa(),Gi(e,o),Ga(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ku(),r=Xi(n=Ya(n,e));r.tag=Vi,null!=t&&(r.callback=t),qa(),Gi(e,r),Ga(e,n)}};function uo(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function lo(e,t,n){var r=!1,o=Or,i=t.contextType;return"object"==typeof i&&null!==i?i=Wi(i):(o=Mr(t)?jr:Nr.current,i=(r=null!=(r=t.contextTypes))?Ar(e,o):Or),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ao,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function co(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ao.enqueueReplaceState(t,t.state,null)}function so(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=oo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Wi(i):(i=Mr(t)?jr:Nr.current,o.context=Ar(e,i)),null!==(i=e.updateQueue)&&(na(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(io(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ao.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(na(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var fo=Array.isArray;function po(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===oo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function ho(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function mo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Kr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Jr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=po(e,t,n),r.return=e,r):((r=Qr(n.type,n.key,n.props,null,e.mode,r)).ref=po(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Yr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Jr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ke:return(n=Qr(t.type,t.key,t.props,null,e.mode,n)).ref=po(e,null,t),n.return=e,n;case Qe:return(t=Gr(t,e.mode,n)).return=e,t}if(fo(t)||at(t))return(t=Yr(t,e.mode,n,null)).return=e,t;ho(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ke:return n.key===o?n.type===Ye?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Qe:return n.key===o?s(e,t,n,r):null}if(fo(n)||at(n))return null!==o?null:f(e,t,n,r,null);ho(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ke:return e=e.get(null===r.key?n:r.key)||null,r.type===Ye?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Qe:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fo(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);ho(t,r)}return null}function m(o,a,u,l){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)(f=d(o,u[m],l))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach(function(e){return t(o,e)}),c}function v(o,u,l,c){var s=at(l);"function"!=typeof s&&a("150"),null==(l=s.call(l))&&a("151");for(var f=s=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,c);if(null===b){m||(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(o,g.value,c))&&(u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Ye&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Ke:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===Ye:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Ye?i.props.children:i.props)).ref=po(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Ye?((r=Yr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Qr(i.type,i.key,i.props,null,e.mode,l)).ref=po(e,r,i),l.return=e,e=l)}return u(e);case Qe:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gr(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Jr(i,e.mode,l)).return=e,e=r),u(e);if(fo(i))return m(e,r,i,l);if(at(i))return v(e,r,i,l);if(s&&ho(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var vo=mo(!0),yo=mo(!1),go={},bo={current:go},wo={current:go},xo={current:go};function ko(e){return e===go&&a("174"),e}function So(e,t){Pr(xo,t),Pr(wo,e),Pr(bo,go);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}_r(bo),Pr(bo,t)}function To(e){_r(bo),_r(wo),_r(xo)}function Eo(e){ko(xo.current);var t=ko(bo.current),n=tr(t,e.type);t!==n&&(Pr(wo,e),Pr(bo,n))}function Co(e){wo.current===e&&(_r(bo),_r(wo))}var _o=0,Po=2,Oo=4,No=8,Ro=16,jo=32,Ao=64,Mo=128,Do=$e.ReactCurrentDispatcher,Io=0,Lo=null,Uo=null,Fo=null,zo=null,Bo=null,Wo=null,qo=0,$o=null,Vo=0,Ho=!1,Ko=null,Qo=0;function Yo(){a("321")}function Xo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Gt(e[n],t[n]))return!1;return!0}function Jo(e,t,n,r,o,i){if(Io=i,Lo=t,Fo=null!==e?e.memoizedState:null,Do.current=null===Fo?si:fi,t=n(r,o),Ho){do{Ho=!1,Qo+=1,Fo=null!==e?e.memoizedState:null,Wo=zo,$o=Bo=Uo=null,Do.current=fi,t=n(r,o)}while(Ho);Ko=null,Qo=0}return Do.current=ci,(e=Lo).memoizedState=zo,e.expirationTime=qo,e.updateQueue=$o,e.effectTag|=Vo,e=null!==Uo&&null!==Uo.next,Io=0,Wo=Bo=zo=Fo=Uo=Lo=null,qo=0,$o=null,Vo=0,e&&a("300"),t}function Go(){Do.current=ci,Io=0,Wo=Bo=zo=Fo=Uo=Lo=null,qo=0,$o=null,Vo=0,Ho=!1,Ko=null,Qo=0}function Zo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Bo?zo=Bo=e:Bo=Bo.next=e,Bo}function ei(){if(null!==Wo)Wo=(Bo=Wo).next,Fo=null!==(Uo=Fo)?Uo.next:null;else{null===Fo&&a("310");var e={memoizedState:(Uo=Fo).memoizedState,baseState:Uo.baseState,queue:Uo.queue,baseUpdate:Uo.baseUpdate,next:null};Bo=null===Bo?zo=e:Bo.next=e,Fo=Uo.next}return Bo}function ti(e,t){return"function"==typeof t?t(e):t}function ni(e){var t=ei(),n=t.queue;if(null===n&&a("311"),n.lastRenderedReducer=e,0<Qo){var r=n.dispatch;if(null!==Ko){var o=Ko.get(n);if(void 0!==o){Ko.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Gt(i,t.memoizedState)||(ki=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(i=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Io?(s||(s=!0,l=u,o=i),f>qo&&(qo=f)):i=c.eagerReducer===e?c.eagerState:e(i,c.action),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,o=i),Gt(i,t.memoizedState)||(ki=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function ri(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===$o?($o={lastEffect:null}).lastEffect=e.next=e:null===(t=$o.lastEffect)?$o.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,$o.lastEffect=e),e}function oi(e,t,n,r){var o=Zo();Vo|=e,o.memoizedState=ri(t,n,void 0,void 0===r?null:r)}function ii(e,t,n,r){var o=ei();r=void 0===r?null:r;var i=void 0;if(null!==Uo){var a=Uo.memoizedState;if(i=a.destroy,null!==r&&Xo(r,a.deps))return void ri(_o,n,i,r)}Vo|=e,o.memoizedState=ri(t,n,i,r)}function ai(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ui(){}function li(e,t,n){25>Qo||a("301");var r=e.alternate;if(e===Lo||null!==r&&r===Lo)if(Ho=!0,e={expirationTime:Io,action:n,eagerReducer:null,eagerState:null,next:null},null===Ko&&(Ko=new Map),void 0===(n=Ko.get(t)))Ko.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{qa();var o=ku(),i={expirationTime:o=Ya(o,e),action:n,eagerReducer:null,eagerState:null,next:null},u=t.last;if(null===u)i.next=i;else{var l=u.next;null!==l&&(i.next=l),u.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,Gt(s,c))return}catch(e){}Ga(e,o)}}var ci={readContext:Wi,useCallback:Yo,useContext:Yo,useEffect:Yo,useImperativeHandle:Yo,useLayoutEffect:Yo,useMemo:Yo,useReducer:Yo,useRef:Yo,useState:Yo,useDebugValue:Yo},si={readContext:Wi,useCallback:function(e,t){return Zo().memoizedState=[e,void 0===t?null:t],e},useContext:Wi,useEffect:function(e,t){return oi(516,Mo|Ao,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,Oo|jo,ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,Oo|jo,e,t)},useMemo:function(e,t){var n=Zo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Zo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=li.bind(null,Lo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Zo().memoizedState=e},useState:function(e){var t=Zo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ti,lastRenderedState:e}).dispatch=li.bind(null,Lo,e),[t.memoizedState,e]},useDebugValue:ui},fi={readContext:Wi,useCallback:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Wi,useEffect:function(e,t){return ii(516,Mo|Ao,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ii(4,Oo|jo,ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ii(4,Oo|jo,e,t)},useMemo:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ni,useRef:function(){return ei().memoizedState},useState:function(e){return ni(ti)},useDebugValue:ui},di=null,pi=null,hi=!1;function mi(e,t){var n=Vr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function vi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function yi(e){if(hi){var t=pi;if(t){var n=t;if(!vi(e,t)){if(!(t=Sr(n))||!vi(e,t))return e.effectTag|=2,hi=!1,void(di=e);mi(di,n)}di=e,pi=Tr(t)}else e.effectTag|=2,hi=!1,di=e}}function gi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;di=e}function bi(e){if(e!==di)return!1;if(!hi)return gi(e),hi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gr(t,e.memoizedProps))for(t=pi;t;)mi(e,t),t=Sr(t);return gi(e),pi=di?Sr(e.stateNode):null,!0}function wi(){pi=di=null,hi=!1}var xi=$e.ReactCurrentOwner,ki=!1;function Si(e,t,n,r){t.child=null===e?yo(t,null,n,r):vo(t,e.child,n,r)}function Ti(e,t,n,r,o){n=n.render;var i=t.ref;return Bi(t,o),r=Jo(e,t,n,r,i,o),null===e||ki?(t.effectTag|=1,Si(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ai(e,t,o))}function Ei(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Hr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Qr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ci(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Ai(e,t,i):(t.effectTag|=1,(e=Kr(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ci(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(ki=!1,o<i)?Ai(e,t,i):Pi(e,t,n,r,i)}function _i(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Pi(e,t,n,r,o){var i=Mr(n)?jr:Nr.current;return i=Ar(t,i),Bi(t,o),n=Jo(e,t,n,r,i,o),null===e||ki?(t.effectTag|=1,Si(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ai(e,t,o))}function Oi(e,t,n,r,o){if(Mr(n)){var i=!0;Fr(t)}else i=!1;if(Bi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),lo(t,n,r),so(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Wi(c):c=Ar(t,c=Mr(n)?jr:Nr.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&co(t,a,r,c),Ki=!1;var d=t.memoizedState;l=a.state=d;var p=t.updateQueue;null!==p&&(na(t,p,r,a,o),l=t.memoizedState),u!==r||d!==l||Rr.current||Ki?("function"==typeof s&&(io(t,n,s,r),l=t.memoizedState),(u=Ki||uo(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:ro(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Wi(c):c=Ar(t,c=Mr(n)?jr:Nr.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&co(t,a,r,c),Ki=!1,l=t.memoizedState,d=a.state=l,null!==(p=t.updateQueue)&&(na(t,p,r,a,o),d=t.memoizedState),u!==r||l!==d||Rr.current||Ki?("function"==typeof s&&(io(t,n,s,r),d=t.memoizedState),(s=Ki||uo(t,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ni(e,t,n,r,i,o)}function Ni(e,t,n,r,o,i){_i(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&zr(t,n,!1),Ai(e,t,i);r=t.stateNode,xi.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=vo(t,e.child,null,i),t.child=vo(t,null,u,i)):Si(e,t,u,i),t.memoizedState=r.state,o&&zr(t,n,!0),t.child}function Ri(e){var t=e.stateNode;t.pendingContext?Lr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Lr(0,t.context,!1),So(e,t.containerInfo)}function ji(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var u=o.fallback;e=Yr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Yr(u,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=yo(t,null,o.children,n);else null!==e.memoizedState?(u=(r=e.child).sibling,a?(n=o.fallback,o=Kr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Kr(u,n,u.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=vo(t,r.child,o.children,n)):(u=e.child,a?(a=o.fallback,(o=Yr(null,r,0,null)).child=u,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Yr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=vo(t,u,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function Ai(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Kr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Kr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Mi(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Rr.current)ki=!0;else if(r<n){switch(ki=!1,t.tag){case 3:Ri(t),wi();break;case 5:Eo(t);break;case 1:Mr(t.type)&&Fr(t);break;case 4:So(t,t.stateNode.containerInfo);break;case 10:Fi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?ji(e,t,n):null!==(t=Ai(e,t,n))?t.sibling:null}return Ai(e,t,n)}}else ki=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Ar(t,Nr.current);if(Bi(t,n),o=Jo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Go(),Mr(r)){var i=!0;Fr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&io(t,r,u,e),o.updater=ao,t.stateNode=o,o._reactInternalFiber=t,so(t,r,e,n),t=Ni(null,t,r,!0,i,n)}else t.tag=0,Si(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Hr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=ro(e,i),u=void 0,o){case 0:u=Pi(null,t,e,i,n);break;case 1:u=Oi(null,t,e,i,n);break;case 11:u=Ti(null,t,e,i,n);break;case 14:u=Ei(null,t,e,ro(e.type,i),r,n);break;default:a("306",e,"")}return u;case 0:return r=t.type,o=t.pendingProps,Pi(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 1:return r=t.type,o=t.pendingProps,Oi(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 3:return Ri(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,na(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(wi(),t=Ai(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(pi=Tr(t.stateNode.containerInfo),di=t,o=hi=!0),o?(t.effectTag|=2,t.child=yo(t,null,r,n)):(Si(e,t,r,n),wi()),t=t.child),t;case 5:return Eo(t),null===e&&yi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,gr(r,o)?u=null:null!==i&&gr(r,i)&&(t.effectTag|=16),_i(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Si(e,t,u,n),t=t.child),t;case 6:return null===e&&yi(t),null;case 13:return ji(e,t,n);case 4:return So(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=vo(t,null,r,n):Si(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ti(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 7:return Si(e,t,t.pendingProps,n),t.child;case 8:case 12:return Si(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,Fi(t,i=o.value),null!==u){var l=u.value;if(0===(i=Gt(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!Rr.current){t=Ai(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){u=l.child;for(var s=c.first;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=Xi(n)).tag=Vi,Gi(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),s=n;for(var f=l.return;null!==f;){var d=f.alternate;if(f.childExpirationTime<s)f.childExpirationTime=s,null!==d&&d.childExpirationTime<s&&(d.childExpirationTime=s);else{if(!(null!==d&&d.childExpirationTime<s))break;d.childExpirationTime=s}f=f.return}c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}Si(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,Bi(t,n),r=r(o=Wi(o,i.unstable_observedBits)),t.effectTag|=1,Si(e,t,r,n),t.child;case 14:return i=ro(o=t.type,t.pendingProps),Ei(e,t,o,i=ro(o.type,i),r,n);case 15:return Ci(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ro(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Mr(r)?(e=!0,Fr(t)):e=!1,Bi(t,n),lo(t,r,o),so(t,r,o,n),Ni(null,t,r,!0,e,n)}a("156")}var Di={current:null},Ii=null,Li=null,Ui=null;function Fi(e,t){var n=e.type._context;Pr(Di,n._currentValue),n._currentValue=t}function zi(e){var t=Di.current;_r(Di),e.type._context._currentValue=t}function Bi(e,t){Ii=e,Ui=Li=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(ki=!0),e.contextDependencies=null}function Wi(e,t){return Ui!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Ui=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Li?(null===Ii&&a("308"),Li=t,Ii.contextDependencies={first:t,expirationTime:0}):Li=Li.next=t),e._currentValue}var qi=0,$i=1,Vi=2,Hi=3,Ki=!1;function Qi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Xi(e){return{expirationTime:e,tag:qi,payload:null,callback:null,next:null,nextEffect:null}}function Ji(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Gi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Qi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Qi(e.memoizedState),o=n.updateQueue=Qi(n.memoizedState)):r=e.updateQueue=Yi(o):null===o&&(o=n.updateQueue=Yi(r));null===o||r===o?Ji(r,t):null===r.lastUpdate||null===o.lastUpdate?(Ji(r,t),Ji(o,t)):(Ji(r,t),o.lastUpdate=t)}function Zi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Qi(e.memoizedState):ea(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ea(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Yi(t)),t}function ta(e,t,n,r,i,a){switch(n.tag){case $i:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case Hi:e.effectTag=-2049&e.effectTag|64;case qi:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case Vi:Ki=!0}return r}function na(e,t,n,r,o){Ki=!1;for(var i=(t=ea(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===a&&(a=l,i=c),u<s&&(u=s)):(c=ta(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===a&&(i=c)),u<f&&(u=f)):(c=ta(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function ra(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),oa(t.firstEffect,n),t.firstEffect=t.lastEffect=null,oa(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function oa(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function ia(e,t){return{value:e,source:t,stack:lt(t)}}function aa(e){e.effectTag|=4}var ua=void 0,la=void 0,ca=void 0,sa=void 0;ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},la=function(){},ca=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(ko(bo.current),e=null,n){case"input":a=bt(u,a),r=bt(u,r),e=[];break;case"option":a=Kn(u,a),r=Kn(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Yn(u,a),r=Yn(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=hr)}fr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=s&&pr(i,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&aa(t)}},sa=function(e,t,n,r){n!==r&&aa(t)};var fa="function"==typeof WeakSet?WeakSet:Set;function da(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&ut(n.type),t=t.value,null!==e&&1===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Qa(e,t)}else t.current=null}function ha(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==_o){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==_o&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function ma(e){switch("function"==typeof Wr&&Wr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Qa(o,e)}}n=n.next}while(n!==t)}break;case 1:if(pa(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Qa(e,t)}break;case 5:pa(e);break;case 4:ga(e)}}function va(e){return 5===e.tag||3===e.tag||4===e.tag}function ya(e){e:{for(var t=e.return;null!==t;){if(va(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(ir(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||va(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,u=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(u,l):i.insertBefore(u,l)}else t.insertBefore(o.stateNode,n);else r?(u=t,l=o.stateNode,8===u.nodeType?(i=u.parentNode).insertBefore(l,u):(i=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==i.onclick||(i.onclick=hr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function ga(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,u=i;;)if(ma(u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===i)break;for(;null===u.sibling;){if(null===u.return||u.return===i)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(i=r,u=t.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(ma(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ba(e,t){switch(t.tag){case 0:case 11:case 14:case 15:ha(Oo,No,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[M]=o,"input"===n&&"radio"===o.type&&null!=o.name&&xt(e,o),dr(n,r),r=dr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?cr(e,u):"dangerouslySetInnerHTML"===a?or(e,u):"children"===a?ir(e,u):yt(e,a,u,r)}switch(n){case"input":kt(e,o);break;case"textarea":Jn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Qn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Qn(e,!!o.multiple,o.defaultValue,!0):Qn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=ku())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=lr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var u=t.stateNode;null===u&&(u=t.stateNode=new fa),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Ya(t=ku(),e),null!==(e=Ja(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&Su(e,t))}.bind(null,t,e);u.has(e)||(u.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var wa="function"==typeof WeakMap?WeakMap:Map;function xa(e,t,n){(n=Xi(n)).tag=Hi,n.payload={element:null};var r=t.value;return n.callback=function(){ju(r),da(e,t)},n}function ka(e,t,n){(n=Xi(n)).tag=Hi;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ua?Ua=new Set([this]):Ua.add(this));var n=t.value,o=t.stack;da(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Sa(e){switch(e.tag){case 1:Mr(e.type)&&Dr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return To(),Ir(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Co(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return To(),null;case 10:return zi(e),null;default:return null}}var Ta=$e.ReactCurrentDispatcher,Ea=$e.ReactCurrentOwner,Ca=1073741822,_a=!1,Pa=null,Oa=null,Na=0,Ra=-1,ja=!1,Aa=null,Ma=!1,Da=null,Ia=null,La=null,Ua=null;function Fa(){if(null!==Pa)for(var e=Pa.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Dr();break;case 3:To(),Ir();break;case 5:Co(t);break;case 4:To();break;case 10:zi(t)}e=e.return}Oa=null,Na=0,Ra=-1,ja=!1,Pa=null}function za(){for(;null!==Aa;){var e=Aa.effectTag;if(16&e&&ir(Aa.stateNode,""),128&e){var t=Aa.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:ya(Aa),Aa.effectTag&=-3;break;case 6:ya(Aa),Aa.effectTag&=-3,ba(Aa.alternate,Aa);break;case 4:ba(Aa.alternate,Aa);break;case 8:ga(e=Aa),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Aa=Aa.nextEffect}}function Ba(){for(;null!==Aa;){if(256&Aa.effectTag)e:{var e=Aa.alternate,t=Aa;switch(t.tag){case 0:case 11:case 15:ha(Po,_o,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ro(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Aa=Aa.nextEffect}}function Wa(e,t){for(;null!==Aa;){var n=Aa.effectTag;if(36&n){var r=Aa.alternate,o=Aa,i=t;switch(o.tag){case 0:case 11:case 15:ha(Ro,jo,o);break;case 1:var u=o.stateNode;if(4&o.effectTag)if(null===r)u.componentDidMount();else{var l=o.elementType===o.type?r.memoizedProps:ro(o.type,r.memoizedProps);u.componentDidUpdate(l,r.memoizedState,u.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&ra(0,r,u);break;case 3:if(null!==(r=o.updateQueue)){if(u=null,null!==o.child)switch(o.child.tag){case 5:u=o.child.stateNode;break;case 1:u=o.child.stateNode}ra(0,r,u)}break;case 5:i=o.stateNode,null===r&&4&o.effectTag&&yr(o.type,o.memoizedProps)&&i.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}128&n&&(null!==(o=Aa.ref)&&(i=Aa.stateNode,"function"==typeof o?o(i):o.current=i)),512&n&&(Da=e),Aa=Aa.nextEffect}}function qa(){null!==Ia&&kr(Ia),null!==La&&La()}function $a(e,t){Ma=_a=!0,e.current===t&&a("177");var n=e.pendingCommitExpirationTime;0===n&&a("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}no(0,e)}(e,o>r?o:r),Ea.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,mr=Tn,vr=function(){var e=In();if(Ln(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var d;s!==t||0!==r&&3!==s.nodeType||(a=i+r),s!==o||0!==n&&3!==s.nodeType||(u=i+n),3===s.nodeType&&(i+=s.nodeValue.length),null!==(d=s.firstChild);)f=s,s=d;for(;;){if(s===e)break t;if(f===t&&++l===r&&(a=i),f===o&&++c===n&&(u=i),null!==(d=s.nextSibling))break;f=(s=f).parentNode}s=d}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),Tn=!1,Aa=r;null!==Aa;){o=!1;var u=void 0;try{Ba()}catch(e){o=!0,u=e}o&&(null===Aa&&a("178"),Qa(Aa,u),null!==Aa&&(Aa=Aa.nextEffect))}for(Aa=r;null!==Aa;){o=!1,u=void 0;try{za()}catch(e){o=!0,u=e}o&&(null===Aa&&a("178"),Qa(Aa,u),null!==Aa&&(Aa=Aa.nextEffect))}for(Un(vr),vr=null,Tn=!!mr,mr=null,e.current=t,Aa=r;null!==Aa;){o=!1,u=void 0;try{Wa(e,n)}catch(e){o=!0,u=e}o&&(null===Aa&&a("178"),Qa(Aa,u),null!==Aa&&(Aa=Aa.nextEffect))}if(null!==r&&null!==Da){var l=function(e,t){La=Ia=Da=null;var n=ou;ou=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;ha(Mo,_o,i),ha(_o,Ao,i)}catch(e){r=!0,o=e}r&&Qa(t,o)}t=t.nextEffect}while(null!==t);ou=n,0!==(n=e.expirationTime)&&Su(e,n),su||ou||Pu(1073741823,!1)}.bind(null,e,r);Ia=i.unstable_runWithPriority(i.unstable_NormalPriority,function(){return xr(l)}),La=l}_a=Ma=!1,"function"==typeof Br&&Br(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Ua=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function Va(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Pa=e;e:{var i=t,u=Na,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Mr(t.type)&&Dr();break;case 3:To(),Ir(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(bi(t),t.effectTag&=-3),la(t);break;case 5:Co(t);var c=ko(xo.current);if(u=t.type,null!==i&&null!=t.stateNode)ca(i,t,u,l,c),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var s=ko(bo.current);if(bi(t)){i=(l=t).stateNode;var f=l.type,d=l.memoizedProps,p=c;switch(i[A]=l,i[M]=d,u=void 0,c=f){case"iframe":case"object":En("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)En(te[f],i);break;case"source":En("error",i);break;case"img":case"image":case"link":En("error",i),En("load",i);break;case"form":En("reset",i),En("submit",i);break;case"details":En("toggle",i);break;case"input":wt(i,d),En("invalid",i),pr(p,"onChange");break;case"select":i._wrapperState={wasMultiple:!!d.multiple},En("invalid",i),pr(p,"onChange");break;case"textarea":Xn(i,d),En("invalid",i),pr(p,"onChange")}for(u in fr(c,d),f=null,d)d.hasOwnProperty(u)&&(s=d[u],"children"===u?"string"==typeof s?i.textContent!==s&&(f=["children",s]):"number"==typeof s&&i.textContent!==""+s&&(f=["children",""+s]):b.hasOwnProperty(u)&&null!=s&&pr(p,u));switch(c){case"input":We(i),St(i,d,!0);break;case"textarea":We(i),Gn(i);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(i.onclick=hr)}u=f,l.updateQueue=u,(l=null!==u)&&aa(t)}else{d=t,p=u,i=l,f=9===c.nodeType?c:c.ownerDocument,s===Zn.html&&(s=er(p)),s===Zn.html?"script"===p?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof i.is?f=f.createElement(p,{is:i.is}):(f=f.createElement(p),"select"===p&&(p=f,i.multiple?p.multiple=!0:i.size&&(p.size=i.size))):f=f.createElementNS(s,p),(i=f)[A]=d,i[M]=l,ua(i,t,!1,!1),p=i;var h=c,m=dr(f=u,d=l);switch(f){case"iframe":case"object":En("load",p),c=d;break;case"video":case"audio":for(c=0;c<te.length;c++)En(te[c],p);c=d;break;case"source":En("error",p),c=d;break;case"img":case"image":case"link":En("error",p),En("load",p),c=d;break;case"form":En("reset",p),En("submit",p),c=d;break;case"details":En("toggle",p),c=d;break;case"input":wt(p,d),c=bt(p,d),En("invalid",p),pr(h,"onChange");break;case"option":c=Kn(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},c=o({},d,{value:void 0}),En("invalid",p),pr(h,"onChange");break;case"textarea":Xn(p,d),c=Yn(p,d),En("invalid",p),pr(h,"onChange");break;default:c=d}fr(f,c),s=void 0;var v=f,y=p,g=c;for(s in g)if(g.hasOwnProperty(s)){var w=g[s];"style"===s?cr(y,w):"dangerouslySetInnerHTML"===s?null!=(w=w?w.__html:void 0)&&or(y,w):"children"===s?"string"==typeof w?("textarea"!==v||""!==w)&&ir(y,w):"number"==typeof w&&ir(y,""+w):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(b.hasOwnProperty(s)?null!=w&&pr(h,s):null!=w&&yt(y,s,w,m))}switch(f){case"input":We(p),St(p,d,!1);break;case"textarea":We(p),Gn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+gt(d.value));break;case"select":(c=p).multiple=!!d.multiple,null!=(p=d.value)?Qn(c,!!d.multiple,p,!1):null!=d.defaultValue&&Qn(c,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof c.onClick&&(p.onclick=hr)}(l=yr(u,l))&&aa(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?sa(i,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&a("166")),i=ko(xo.current),ko(bo.current),bi(t)?(u=(l=t).stateNode,i=l.memoizedProps,u[A]=l,(l=u.nodeValue!==i)&&aa(t)):(u=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[A]=t,u.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=u,Pa=t;break e}l=null!==l,u=null!==i&&null!==i.memoizedState,null!==i&&!l&&u&&(null!==(i=i.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l||u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:To(),la(t);break;case 10:zi(t);break;case 9:case 14:break;case 17:Mr(t.type)&&Dr();break;case 18:break;default:a("156")}Pa=null}if(t=e,1===Na||1!==t.childExpirationTime){for(l=0,u=t.child;null!==u;)(i=u.expirationTime)>l&&(l=i),(c=u.childExpirationTime)>l&&(l=c),u=u.sibling;t.childExpirationTime=l}if(null!==Pa)return Pa;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Sa(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ha(e){var t=Mi(e.alternate,e,Na);return e.memoizedProps=e.pendingProps,null===t&&(t=Va(e)),Ea.current=null,t}function Ka(e,t){_a&&a("243"),qa(),_a=!0;var n=Ta.current;Ta.current=ci;var r=e.nextExpirationTimeToWorkOn;r===Na&&e===Oa&&null!==Pa||(Fa(),Na=r,Pa=Kr((Oa=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Pa&&!Cu();)Pa=Ha(Pa);else for(;null!==Pa;)Pa=Ha(Pa)}catch(t){if(Ui=Li=Ii=null,Go(),null===Pa)o=!0,ju(t);else{null===Pa&&a("271");var i=Pa,u=i.return;if(null!==u){e:{var l=e,c=u,s=i,f=t;if(u=Na,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var d=f;f=c;var p=-1,h=-1;do{if(13===f.tag){var m=f.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=f.pendingProps.maxDuration)&&(0>=m?p=0:(-1===p||m<p)&&(p=m))}f=f.return}while(null!==f);f=c;do{if((m=13===f.tag)&&(m=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),m){if(null===(c=f.updateQueue)?((c=new Set).add(d),f.updateQueue=c):c.add(d),0==(1&f.mode)){f.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((u=Xi(1073741823)).tag=Vi,Gi(s,u))),s.expirationTime=1073741823;break e}c=u;var v=(s=l).pingCache;null===v?(v=s.pingCache=new wa,m=new Set,v.set(d,m)):void 0===(m=v.get(d))&&(m=new Set,v.set(d,m)),m.has(c)||(m.add(c),s=Xa.bind(null,s,d,c),d.then(s,s)),-1===p?l=1073741823:(-1===h&&(h=10*(1073741822-to(l,u))-5e3),l=h+p),0<=l&&Ra<l&&(Ra=l),f.effectTag|=2048,f.expirationTime=u;break e}f=f.return}while(null!==f);f=Error((ut(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}ja=!0,f=ia(f,s),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=u,Zi(l,u=xa(l,f,u));break e;case 1:if(p=f,h=l.type,s=l.stateNode,0==(64&l.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==s&&"function"==typeof s.componentDidCatch&&(null===Ua||!Ua.has(s)))){l.effectTag|=2048,l.expirationTime=u,Zi(l,u=ka(l,p,u));break e}}l=l.return}while(null!==l)}Pa=Va(i);continue}o=!0,ju(t)}}break}if(_a=!1,Ta.current=n,Ui=Li=Ii=null,Go(),o)Oa=null,e.finishedWork=null;else if(null!==Pa)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),Oa=null,ja){if(o=e.latestPendingTime,i=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==u&&u<r)return eo(e,r),void xu(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void xu(e,n,r,t,-1)}t&&-1!==Ra?(eo(e,r),(t=10*(1073741822-to(e,r)))<Ra&&(Ra=t),t=10*(1073741822-ku()),t=Ra-t,xu(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Qa(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ua||!Ua.has(r)))return Gi(n,e=ka(n,e=ia(t,e),1073741823)),void Ga(n,1073741823);break;case 3:return Gi(n,e=xa(n,e=ia(t,e),1073741823)),void Ga(n,1073741823)}n=n.return}3===e.tag&&(Gi(e,n=xa(e,n=ia(t,e),1073741823)),Ga(e,1073741823))}function Ya(e,t){var n=i.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(_a&&!Ma)r=Na;else{switch(n){case i.unstable_ImmediatePriority:r=1073741823;break;case i.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case i.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case i.unstable_LowPriority:case i.unstable_IdlePriority:r=1;break;default:a("313")}null!==Oa&&r===Na&&--r}return n===i.unstable_UserBlockingPriority&&(0===uu||r<uu)&&(uu=r),r}function Xa(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Oa&&Na===n?Oa=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),no(n,e),0!==(n=e.expirationTime)&&Su(e,n)))}function Ja(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ga(e,t){null!==(e=Ja(e,t))&&(!_a&&0!==Na&&t>Na&&Fa(),Zr(e,t),_a&&!Ma&&Oa===e||Su(e,e.expirationTime),yu>vu&&(yu=0,a("185")))}function Za(e,t,n,r,o){return i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var eu=null,tu=null,nu=0,ru=void 0,ou=!1,iu=null,au=0,uu=0,lu=!1,cu=null,su=!1,fu=!1,du=null,pu=i.unstable_now(),hu=1073741822-(pu/10|0),mu=hu,vu=50,yu=0,gu=null;function bu(){hu=1073741822-((i.unstable_now()-pu)/10|0)}function wu(e,t){if(0!==nu){if(t<nu)return;null!==ru&&i.unstable_cancelCallback(ru)}nu=t,e=i.unstable_now()-pu,ru=i.unstable_scheduleCallback(_u,{timeout:10*(1073741822-t)-e})}function xu(e,t,n,r,o){e.expirationTime=r,0!==o||Cu()?0<o&&(e.timeoutHandle=br(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,bu(),mu=hu,Ou(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function ku(){return ou?mu:(Tu(),0!==au&&1!==au||(bu(),mu=hu),mu)}function Su(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===tu?(eu=tu=e,e.nextScheduledRoot=e):(tu=tu.nextScheduledRoot=e).nextScheduledRoot=eu):t>e.expirationTime&&(e.expirationTime=t),ou||(su?fu&&(iu=e,au=1073741823,Nu(e,1073741823,!1)):1073741823===t?Pu(1073741823,!1):wu(e,t))}function Tu(){var e=0,t=null;if(null!==tu)for(var n=tu,r=eu;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===tu)&&a("244"),r===r.nextScheduledRoot){eu=tu=r.nextScheduledRoot=null;break}if(r===eu)eu=o=r.nextScheduledRoot,tu.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===tu){(tu=n).nextScheduledRoot=eu,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===tu)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}iu=t,au=e}var Eu=!1;function Cu(){return!!Eu||!!i.unstable_shouldYield()&&(Eu=!0)}function _u(){try{if(!Cu()&&null!==eu){bu();var e=eu;do{var t=e.expirationTime;0!==t&&hu<=t&&(e.nextExpirationTimeToWorkOn=hu),e=e.nextScheduledRoot}while(e!==eu)}Pu(0,!0)}finally{Eu=!1}}function Pu(e,t){if(Tu(),t)for(bu(),mu=hu;null!==iu&&0!==au&&e<=au&&!(Eu&&hu>au);)Nu(iu,au,hu>au),Tu(),bu(),mu=hu;else for(;null!==iu&&0!==au&&e<=au;)Nu(iu,au,!1),Tu();if(t&&(nu=0,ru=null),0!==au&&wu(iu,au),yu=0,gu=null,null!==du)for(e=du,du=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){lu||(lu=!0,cu=e)}}if(lu)throw e=cu,cu=null,lu=!1,e}function Ou(e,t){ou&&a("253"),iu=e,au=t,Nu(e,t,!1),Pu(1073741823,!1)}function Nu(e,t,n){if(ou&&a("245"),ou=!0,n){var r=e.finishedWork;null!==r?Ru(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,wr(r)),Ka(e,n),null!==(r=e.finishedWork)&&(Cu()?e.finishedWork=r:Ru(e,r,t)))}else null!==(r=e.finishedWork)?Ru(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,wr(r)),Ka(e,n),null!==(r=e.finishedWork)&&Ru(e,r,t));ou=!1}function Ru(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===du?du=[r]:du.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===gu?yu++:(gu=e,yu=0),i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){$a(e,t)})}function ju(e){null===iu&&a("246"),iu.expirationTime=0,lu||(lu=!0,cu=e)}function Au(e,t){var n=su;su=!0;try{return e(t)}finally{(su=n)||ou||Pu(1073741823,!1)}}function Mu(e,t){if(su&&!fu){fu=!0;try{return e(t)}finally{fu=!1}}return e(t)}function Du(e,t,n){su||ou||0===uu||(Pu(uu,!1),uu=0);var r=su;su=!0;try{return i.unstable_runWithPriority(i.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(su=r)||ou||Pu(1073741823,!1)}}function Iu(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Mr(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);a("171"),u=void 0}if(1===n.tag){var l=n.type;if(Mr(l)){n=Ur(n,l,u);break e}}n=u}else n=Or;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Xi(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),qa(),Gi(i,o),Ga(i,r),r}function Lu(e,t,n,r){var o=t.current;return Iu(e,t,n,o=Ya(ku(),o),r)}function Uu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fu(e){var t=1073741822-25*(1+((1073741822-ku()+500)/25|0));t>=Ca&&(t=Ca-1),this._expirationTime=Ca=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function zu(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Bu(e,t,n){e={current:t=Vr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Wu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function qu(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Uu(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Bu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Uu(i._internalRoot);u.call(e)}}Mu(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Uu(i._internalRoot)}function $u(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Wu(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Qe,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ce=function(e,t,n){switch(t){case"input":if(kt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=U(r);o||a("90"),qe(r),kt(r,o)}}}break;case"textarea":Jn(e,n);break;case"select":null!=(t=n.value)&&Qn(e,!!n.multiple,t,!1)}},Fu.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new zu;return Iu(e,t,null,n,r._onCommit),r},Fu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Ou(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Fu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},zu.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},zu.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Bu.prototype.render=function(e,t){var n=this._internalRoot,r=new zu;return null!==(t=void 0===t?null:t)&&r.then(t),Lu(e,n,null,r._onCommit),r},Bu.prototype.unmount=function(e){var t=this._internalRoot,n=new zu;return null!==(e=void 0===e?null:e)&&n.then(e),Lu(null,t,null,n._onCommit),n},Bu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new zu;return null!==(n=void 0===n?null:n)&&o.then(n),Lu(t,r,e,o._onCommit),o},Bu.prototype.createBatch=function(){var e=new Fu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},je=Au,Ae=Du,Me=function(){ou||0===uu||(Pu(uu,!1),uu=0)};var Vu={createPortal:$u,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Wu(t)||a("200"),qu(null,e,t,!0,n)},render:function(e,t,n){return Wu(t)||a("200"),qu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Wu(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),qu(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Wu(e)||a("40"),!!e._reactRootContainer&&(Mu(function(){qu(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return $u.apply(void 0,arguments)},unstable_batchedUpdates:Au,unstable_interactiveUpdates:Du,flushSync:function(e,t){ou&&a("187");var n=su;su=!0;try{return Za(e,t)}finally{su=n,Pu(1073741823,!1)}},unstable_createRoot:function(e,t){return Wu(e)||a("299","unstable_createRoot"),new Bu(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=su;su=!0;try{Za(e)}finally{(su=t)||ou||Pu(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[I,L,U,O.injectEventPluginsByName,g,$,function(e){C(e,q)},Ne,Re,Pn,R]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Br=qr(function(e){return t.onCommitFiberRoot(n,e)}),Wr=qr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,currentDispatcherRef:$e.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:D,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"});var Hu={default:Vu},Ku=Hu&&Vu||Hu;e.exports=Ku.default||Ku},function(e,t,n){"use strict";e.exports=n(24)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,u=!1,l=!1;function c(){if(!u){var e=n.expirationTime;l?S():l=!0,k(d,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,u=a;o=e,a=t;try{var l=r()}finally{o=i,a=u}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){u=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{u=!1,null!==n?c():l=!1}}}function d(e){u=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!T())}finally{u=!1,r=o,null!==n?c():l=!1,f()}}var p,h,m=Date,v="function"==typeof setTimeout?setTimeout:void 0,y="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){p=g(function(t){y(h),e(t)}),h=v(function(){b(p),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;t.unstable_now=function(){return x.now()}}else t.unstable_now=function(){return m.now()};var k,S,T,E=null;if("undefined"!=typeof window?E=window:void 0!==e&&(E=e),E&&E._schedMock){var C=E._schedMock;k=C[0],S=C[1],T=C[2],t.unstable_now=C[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var _=null,P=function(e){if(null!==_)try{_(e)}finally{_=null}};k=function(e){null!==_?setTimeout(k,0,e):(_=e,setTimeout(P,0,!1))},S=function(){_=null},T=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var O=null,N=!1,R=-1,j=!1,A=!1,M=0,D=33,I=33;T=function(){return M<=t.unstable_now()};var L=new MessageChannel,U=L.port2;L.port1.onmessage=function(){N=!1;var e=O,n=R;O=null,R=-1;var r=t.unstable_now(),o=!1;if(0>=M-r){if(!(-1!==n&&n<=r))return j||(j=!0,w(F)),O=e,void(R=n);o=!0}if(null!==e){A=!0;try{e(o)}finally{A=!1}}};var F=function(e){if(null!==O){w(F);var t=e-M+I;t<I&&D<I?(8>t&&(t=8),I=t<D?D:t):D=t,M=e+I,N||(N=!0,U.postMessage(void 0))}else j=!1};k=function(e,t){O=e,R=t,A||0>t?U.postMessage(void 0):j||(j=!0,w(F))},S=function(){O=null,N=!1,R=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,a=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{a=null;var u=n;do{if(u.expirationTime>r){a=u;break}u=u.next}while(u!==n);null===a?a=n:a===n&&(n=e,c()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||T())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(6))},function(e,t,n){"use strict";var r=n(26);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function y(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case c:return e;default:return t}}case v:case m:case i:return t}}}function g(e){return y(e)===d}t.typeOf=y,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p)},t.isAsyncMode=function(e){return g(e)||y(e)===f},t.isConcurrentMode=g,t.isContextConsumer=function(e){return y(e)===s},t.isContextProvider=function(e){return y(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return y(e)===p},t.isFragment=function(e){return y(e)===a},t.isLazy=function(e){return y(e)===v},t.isMemo=function(e){return y(e)===m},t.isPortal=function(e){return y(e)===i},t.isProfiler=function(e){return y(e)===l},t.isStrictMode=function(e){return y(e)===u},t.isSuspense=function(e){return y(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(1),o=n(11),i=n(31),a=n(17);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=u(n(14));l.Axios=i,l.create=function(e){return u(a(l.defaults,e))},l.Cancel=n(18),l.CancelToken=n(44),l.isCancel=n(13),l.all=function(e){return Promise.all(e)},l.spread=n(45),e.exports=l,e.exports.default=l},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(1),o=n(12),i=n(32),a=n(33),u=n(17);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],function(e){l.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}}),r.forEach(["post","put","patch"],function(e){l.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}}),e.exports=l},function(e,t,n){"use strict";var r=n(1);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(1),o=n(34),i=n(13),a=n(14),u=n(42),l=n(43);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!u(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],s=!1,f=-1;function d(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=u(d);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||s||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(16);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(1),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(18);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(4),a=n.n(i);const u="Load Cucumber Jobs",l="Save Cucumber Jobs",c="Load Cucumber Builds",s="Save Cucumber Builds",f="Load Cucumber Report",d="Save Cucumber Report";var p=n(3),h=n.n(p),m=o.a.createContext(null);var v=function(e){e()},y=function(){return v},g=null,b={notify:function(){}};var w=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=b,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=y(),t=[],n=[],{clear:function(){n=g,t=g},notify:function(){var r=t=n;e(function(){for(var e=0;e<r.length;e++)r[e]()})},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==g&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=b)},e}(),x=function(e){var t,n;function r(t){var n;n=e.call(this,t)||this;var r=t.store;n.notifySubscribers=n.notifySubscribers.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n));var o=new w(r);return o.onStateChange=n.notifySubscribers,n.state={store:r,subscription:o},n.previousState=r.getState(),n}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.componentDidMount=function(){this._isMounted=!0,this.state.subscription.trySubscribe(),this.previousState!==this.props.store.getState()&&this.state.subscription.notifyNestedSubs()},i.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this.state.subscription.tryUnsubscribe(),this._isMounted=!1},i.componentDidUpdate=function(e){if(this.props.store!==e.store){this.state.subscription.tryUnsubscribe();var t=new w(this.props.store);t.onStateChange=this.notifySubscribers,this.setState({store:this.props.store,subscription:t})}},i.notifySubscribers=function(){this.state.subscription.notifyNestedSubs()},i.render=function(){var e=this.props.context||m;return o.a.createElement(e.Provider,{value:this.state},this.props.children)},r}(r.Component);x.propTypes={store:h.a.shape({subscribe:h.a.func.isRequired,dispatch:h.a.func.isRequired,getState:h.a.func.isRequired}),context:h.a.object,children:h.a.any};var k=x;function S(){return(S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function T(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var E=n(8),C=n.n(E),_=n(2),P=n.n(_),O=n(7),N=[],R=[null,null];function j(e,t){var n=e[1];return[t.payload,n+1]}var A=function(){return[null,0]},M="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function D(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,a=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,u=n.methodName,l=void 0===u?"connectAdvanced":u,c=n.renderCountProp,s=void 0===c?void 0:c,f=n.shouldHandleStateChanges,d=void 0===f||f,p=n.storeKey,h=void 0===p?"store":p,v=n.withRef,y=void 0!==v&&v,g=n.forwardRef,b=void 0!==g&&g,x=n.context,k=void 0===x?m:x,E=T(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);P()(void 0===s,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),P()(!y,"withRef is removed. To access the wrapped instance, use a ref on the connected component");P()("store"===h,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var _=k;return function(t){var n=t.displayName||t.name||"Component",i=a(n),u=S({},E,{getDisplayName:a,methodName:l,renderCountProp:s,shouldHandleStateChanges:d,storeKey:h,displayName:i,wrappedComponentName:n,WrappedComponent:t}),c=E.pure;var f=c?r.useMemo:function(e){return e()};function p(n){var a=Object(r.useMemo)(function(){var e=n.forwardedRef,t=T(n,["forwardedRef"]);return[n.context,e,t]},[n]),l=a[0],c=a[1],s=a[2],p=Object(r.useMemo)(function(){return l&&l.Consumer&&Object(O.isContextConsumer)(o.a.createElement(l.Consumer,null))?l:_},[l,_]),h=Object(r.useContext)(p),m=Boolean(n.store),v=Boolean(h)&&Boolean(h.store);P()(m||v,'Could not find "store" in the context of "'+i+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+i+" in connect options.");var y=n.store||h.store,g=Object(r.useMemo)(function(){return function(t){return e(t.dispatch,u)}(y)},[y]),b=Object(r.useMemo)(function(){if(!d)return R;var e=new w(y,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]},[y,m,h]),x=b[0],k=b[1],E=Object(r.useMemo)(function(){return m?h:S({},h,{subscription:x})},[m,h,x]),C=Object(r.useReducer)(j,N,A),D=C[0][0],I=C[1];if(D&&D.error)throw D.error;var L=Object(r.useRef)(),U=Object(r.useRef)(s),F=Object(r.useRef)(),z=Object(r.useRef)(!1),B=f(function(){return F.current&&s===U.current?F.current:g(y.getState(),s)},[y,D,s]);M(function(){U.current=s,L.current=B,z.current=!1,F.current&&(F.current=null,k())}),M(function(){if(d){var e=!1,t=null,n=function(){if(!e){var n,r,o=y.getState();try{n=g(o,U.current)}catch(e){r=e,t=e}r||(t=null),n===L.current?z.current||k():(L.current=n,F.current=n,z.current=!0,I({type:"STORE_UPDATED",payload:{latestStoreState:o,error:r}}))}};x.onStateChange=n,x.trySubscribe(),n();return function(){if(e=!0,x.tryUnsubscribe(),t)throw t}}},[y,x,g]);var W=Object(r.useMemo)(function(){return o.a.createElement(t,S({},B,{ref:c}))},[c,t,B]);return Object(r.useMemo)(function(){return d?o.a.createElement(p.Provider,{value:E},W):W},[p,W,E])}var m=c?o.a.memo(p):p;if(m.WrappedComponent=t,m.displayName=i,b){var v=o.a.forwardRef(function(e,t){return o.a.createElement(m,S({},e,{forwardedRef:t}))});return v.displayName=i,v.WrappedComponent=t,C()(v,t)}return C()(m,t)}}var I=Object.prototype.hasOwnProperty;function L(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function U(e,t){if(L(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!I.call(t,n[o])||!L(e[n[o]],t[n[o]]))return!1;return!0}var F=n(9),z=function(){return Math.random().toString(36).substring(7).split("").join(".")},B={INIT:"@@redux/INIT"+z(),REPLACE:"@@redux/REPLACE"+z(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+z()}};function W(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function q(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(q)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],u=a,l=!1;function c(){u===a&&(u=a.slice())}function s(){if(l)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(l)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return c(),u.push(e),function(){if(t){if(l)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,c();var n=u.indexOf(e);u.splice(n,1)}}}function d(e){if(!W(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(l)throw new Error("Reducers may not dispatch actions.");try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++){(0,t[n])()}return e}return d({type:B.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:B.REPLACE})}})[F.a]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[F.a]=function(){return this},e},r}function $(e,t){return function(){return t(e.apply(this,arguments))}}function V(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function H(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function K(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){V(e,t,n[t])})}return e}({},n,{dispatch:r=H.apply(void 0,i)(n.dispatch)})}}}function Q(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function Y(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function X(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=Y(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=Y(o),o=r(t,n)),o},r}}var J=[function(e){return"function"==typeof e?X(e):void 0},function(e){return e?void 0:Q(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?Q(function(t){return function(e,t){if("function"==typeof e)return $(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],a=e[i];"function"==typeof a&&(r[i]=$(a,t))}return r}(e,t)}):void 0}];var G=[function(e){return"function"==typeof e?X(e):void 0},function(e){return e?void 0:Q(function(){return{}})}];function Z(e,t,n){return S({},n,e,t)}var ee=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return Z}}];function te(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function ne(e,t,n,r,o){var i,a,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,v=!f(p,a),y=!s(o,i);return i=o,a=p,v&&y?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):y?(h=e(i,a),m=!d(h,u),u=h,m&&(c=n(u,l,a)),c):c}return function(o,s){return p?h(o,s):(u=e(i=o,a=s),l=t(r,a),c=n(u,l,a),p=!0,c)}}function re(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=T(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?ne:te)(a,u,l,e,i)}function oe(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function ie(e,t){return e===t}var ae,ue,le,ce,se,fe,de,pe,he,me,ve,ye,ge=(le=(ue=void 0===ae?{}:ae).connectHOC,ce=void 0===le?D:le,se=ue.mapStateToPropsFactories,fe=void 0===se?G:se,de=ue.mapDispatchToPropsFactories,pe=void 0===de?J:de,he=ue.mergePropsFactories,me=void 0===he?ee:he,ve=ue.selectorFactory,ye=void 0===ve?re:ve,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,u=o.areStatesEqual,l=void 0===u?ie:u,c=o.areOwnPropsEqual,s=void 0===c?U:c,f=o.areStatePropsEqual,d=void 0===f?U:f,p=o.areMergedPropsEqual,h=void 0===p?U:p,m=T(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),v=oe(e,fe,"mapStateToProps"),y=oe(t,pe,"mapDispatchToProps"),g=oe(n,me,"mergeProps");return ce(ye,S({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:v,initMapDispatchToProps:y,initMergeProps:g,pure:a,areStatesEqual:l,areOwnPropsEqual:s,areStatePropsEqual:d,areMergedPropsEqual:h},m))});var be;"undefined"!=typeof window?r.useLayoutEffect:r.useEffect;be=i.unstable_batchedUpdates,v=be;var we=ge()(class extends r.Component{constructor(e){super(e)}onClick(){console.log("onClick"),this.props.dispatch({type:u})}render(){return r.createElement("div",null,r.createElement("button",{type:"button",onClick:()=>this.onClick()},"getCucumberJobs"),r.createElement("label",{htmlFor:"jobInput"},"Choose a job from the list:"),r.createElement("input",{list:"jobList",id:"jobInput",name:"jobInput"}),r.createElement("datalist",{id:"jobList"},r.createElement("option",{value:"job1"}),r.createElement("option",{value:"job2"}),r.createElement("option",{value:"job3"})))}}),xe=function(e){return"@@redux-saga/"+e},ke=xe("CANCEL_PROMISE"),Se=xe("CHANNEL_END"),Te=xe("IO"),Ee=xe("MATCH"),Ce=xe("MULTICAST"),_e=xe("SAGA_ACTION"),Pe=xe("SELF_CANCELLATION"),Oe=xe("TASK"),Ne=xe("TASK_CANCEL"),Re=xe("TERMINATE"),je=xe("LOCATION"),Ae=function(e){return null==e},Me=function(e){return null!=e},De=function(e){return"function"==typeof e},Ie=function(e){return"string"==typeof e},Le=Array.isArray,Ue=function(e){return e&&De(e.then)},Fe=function(e){return e&&De(e.next)&&De(e.throw)},ze=function e(t){return t&&(Ie(t)||qe(t)||De(t)||Le(t)&&t.every(e))},Be=function(e){return e&&De(e.take)&&De(e.close)},We=function(e){return De(e)&&e.hasOwnProperty("toString")},qe=function(e){return Boolean(e)&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype},$e=function(e){return Be(e)&&e[Ce]};var Ve=function(e){return function(){return e}}(!0),He=function(){},Ke=function(e){return e};"function"==typeof Symbol&&Symbol.asyncIterator&&Symbol.asyncIterator;var Qe=function(e,t){S(e,t),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(function(n){e[n]=t[n]})},Ye=function(e,t){var n;return(n=[]).concat.apply(n,t.map(e))};function Xe(e,t){var n=e.indexOf(t);n>=0&&e.splice(n,1)}function Je(e){var t=!1;return function(){t||(t=!0,e())}}var Ge=function(e){throw e},Ze=function(e){return{value:e,done:!0}};function et(e,t,n){void 0===t&&(t=Ge),void 0===n&&(n="iterator");var r={meta:{name:n},next:e,throw:t,return:Ze,isSagaIterator:!0};return"undefined"!=typeof Symbol&&(r[Symbol.iterator]=function(){return r}),r}function tt(e,t){var n=t.sagaStack;console.error(e),console.error(n)}var nt=function(e){return Array.apply(null,new Array(e))},rt=function(e){return function(t){return e(Object.defineProperty(t,_e,{value:!0}))}},ot=function(e){return e===Re},it=function(e){return e===Ne},at=function(e){return ot(e)||it(e)};function ut(e,t){var n=Object.keys(e),r=n.length;var o,i=0,a=Le(e)?nt(r):{},u={};return n.forEach(function(e){var n=function(n,u){o||(u||at(n)?(t.cancel(),t(n,u)):(a[e]=n,++i===r&&(o=!0,t(a))))};n.cancel=He,u[e]=n}),t.cancel=function(){o||(o=!0,n.forEach(function(e){return u[e].cancel()}))},u}function lt(e){return{name:e.name||"anonymous",location:ct(e)}}function ct(e){return e[je]}var st="Channel's Buffer overflow!",ft=1,dt=3,pt=4;function ht(e,t){void 0===e&&(e=10);var n=new Array(e),r=0,o=0,i=0,a=function(t){n[o]=t,o=(o+1)%e,r++},u=function(){if(0!=r){var t=n[i];return n[i]=null,r--,i=(i+1)%e,t}},l=function(){for(var e=[];r;)e.push(u());return e};return{isEmpty:function(){return 0==r},put:function(u){var c;if(r<e)a(u);else switch(t){case ft:throw new Error(st);case dt:n[o]=u,i=o=(o+1)%e;break;case pt:c=2*e,n=l(),r=n.length,o=n.length,i=0,n.length=c,e=c,a(u)}},take:u,flush:l}}var mt=function(e){return ht(e,pt)},vt="TAKE",yt="PUT",gt="ALL",bt="RACE",wt="CALL",xt="CPS",kt="FORK",St="JOIN",Tt="CANCEL",Et="SELECT",Ct="ACTION_CHANNEL",_t="CANCELLED",Pt="FLUSH",Ot="GET_CONTEXT",Nt="SET_CONTEXT",Rt=function(e,t){var n;return(n={})[Te]=!0,n.combinator=!1,n.type=e,n.payload=t,n};function jt(e,t){return void 0===e&&(e="*"),ze(e)?Rt(vt,{pattern:e}):$e(e)&&Me(t)&&ze(t)?Rt(vt,{channel:e,pattern:t}):Be(e)?Rt(vt,{channel:e}):void 0}function At(e,t){return Ae(t)&&(t=e,e=void 0),Rt(yt,{channel:e,action:t})}function Mt(e,t){var n,r=null;return De(e)?n=e:(Le(e)?(r=e[0],n=e[1]):(r=e.context,n=e.fn),r&&Ie(n)&&De(r[n])&&(n=r[n])),{context:r,fn:n,args:t}}function Dt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Rt(kt,Mt(e,n))}function It(){var e={};return e.promise=new Promise(function(t,n){e.resolve=t,e.reject=n}),e}var Lt=It,Ut=[],Ft=0;function zt(e){try{qt(),e()}finally{$t()}}function Bt(e){Ut.push(e),Ft||(qt(),Vt())}function Wt(e){try{return qt(),e()}finally{Vt()}}function qt(){Ft++}function $t(){Ft--}function Vt(){var e;for($t();!Ft&&void 0!==(e=Ut.shift());)zt(e)}var Ht=function(e){return function(t){return e.some(function(e){return Jt(e)(t)})}},Kt=function(e){return function(t){return e(t)}},Qt=function(e){return function(t){return t.type===String(e)}},Yt=function(e){return function(t){return t.type===e}},Xt=function(){return Ve};function Jt(e){var t="*"===e?Xt:Ie(e)?Qt:Le(e)?Ht:We(e)?Qt:De(e)?Kt:qe(e)?Yt:null;if(null===t)throw new Error("invalid pattern: "+e);return t(e)}var Gt={type:Se},Zt=function(e){return e&&e.type===Se};function en(e){void 0===e&&(e=mt());var t=!1,n=[];return{take:function(r){t&&e.isEmpty()?r(Gt):e.isEmpty()?(n.push(r),r.cancel=function(){Xe(n,r)}):r(e.take())},put:function(r){if(!t){if(0===n.length)return e.put(r);n.shift()(r)}},flush:function(n){t&&e.isEmpty()?n(Gt):n(e.flush())},close:function(){if(!t){t=!0;var e=n;n=[];for(var r=0,o=e.length;r<o;r++)(0,e[r])(Gt)}}}}function tn(){var e,t,n,r,o,i,a=(t=!1,r=n=[],o=function(){r===n&&(r=n.slice())},i=function(){t=!0;var e=n=r;r=[],e.forEach(function(e){e(Gt)})},(e={})[Ce]=!0,e.put=function(e){if(!t)if(Zt(e))i();else for(var o=n=r,a=0,u=o.length;a<u;a++){var l=o[a];l[Ee](e)&&(l.cancel(),l(e))}},e.take=function(e,n){void 0===n&&(n=Xt),t?e(Gt):(e[Ee]=n,o(),r.push(e),e.cancel=Je(function(){o(),Xe(r,e)}))},e.close=i,e),u=a.put;return a.put=function(e){e[_e]?u(e):Bt(function(){u(e)})},a}var nn=0,rn=1,on=2,an=3;function un(e,t){var n=e[ke];De(n)&&(t.cancel=n),e.then(t,function(e){t(e,!0)})}var ln,cn=0,sn=function(){return++cn};function fn(e){e.isRunning()&&e.cancel()}var dn=((ln={})[vt]=function(e,t,n){var r=t.channel,o=void 0===r?e.channel:r,i=t.pattern,a=t.maybe,u=function(e){e instanceof Error?n(e,!0):!Zt(e)||a?n(e):n(Re)};try{o.take(u,Me(i)?Jt(i):null)}catch(e){return void n(e,!0)}n.cancel=u.cancel},ln[yt]=function(e,t,n){var r=t.channel,o=t.action,i=t.resolve;Bt(function(){var t;try{t=(r?r.put:e.dispatch)(o)}catch(e){return void n(e,!0)}i&&Ue(t)?un(t,n):n(t)})},ln[gt]=function(e,t,n,r){var o=r.digestEffect,i=cn,a=Object.keys(t);if(0!==a.length){var u=ut(t,n);a.forEach(function(e){o(t[e],i,u[e],e)})}else n(Le(t)?[]:{})},ln[bt]=function(e,t,n,r){var o=r.digestEffect,i=cn,a=Object.keys(t),u=Le(t)?nt(a.length):{},l={},c=!1;a.forEach(function(e){var t=function(t,r){c||(r||at(t)?(n.cancel(),n(t,r)):(n.cancel(),c=!0,u[e]=t,n(u)))};t.cancel=He,l[e]=t}),n.cancel=function(){c||(c=!0,a.forEach(function(e){return l[e].cancel()}))},a.forEach(function(e){c||o(t[e],i,l[e],e)})},ln[wt]=function(e,t,n,r){var o=t.context,i=t.fn,a=t.args,u=r.task;try{var l=i.apply(o,a);if(Ue(l))return void un(l,n);if(Fe(l))return void kn(e,l,u.context,cn,lt(i),!1,n);n(l)}catch(e){n(e,!0)}},ln[xt]=function(e,t,n){var r=t.context,o=t.fn,i=t.args;try{var a=function(e,t){Ae(e)?n(t):n(e,!0)};o.apply(r,i.concat(a)),a.cancel&&(n.cancel=a.cancel)}catch(e){n(e,!0)}},ln[kt]=function(e,t,n,r){var o=t.context,i=t.fn,a=t.args,u=t.detached,l=r.task,c=function(e){var t=e.context,n=e.fn,r=e.args;try{var o=n.apply(t,r);if(Fe(o))return o;var i=!1;return et(function(e){return i?{value:e,done:!0}:(i=!0,{value:o,done:!Ue(o)})})}catch(e){return et(function(){throw e})}}({context:o,fn:i,args:a}),s=function(e,t){return e.isSagaIterator?{name:e.meta.name}:lt(t)}(c,i);Wt(function(){var t=kn(e,c,l.context,cn,s,u,He);u?n(t):t.isRunning()?(l.queue.addTask(t),n(t)):t.isAborted()?l.queue.abort(t.error()):n(t)})},ln[St]=function(e,t,n,r){var o=r.task,i=function(e,t){if(e.isRunning()){var n={task:o,cb:t};t.cancel=function(){e.isRunning()&&Xe(e.joiners,n)},e.joiners.push(n)}else e.isAborted()?t(e.error(),!0):t(e.result())};if(Le(t)){if(0===t.length)return void n([]);var a=ut(t,n);t.forEach(function(e,t){i(e,a[t])})}else i(t,n)},ln[Tt]=function(e,t,n,r){var o=r.task;t===Pe?fn(o):Le(t)?t.forEach(fn):fn(t),n()},ln[Et]=function(e,t,n){var r=t.selector,o=t.args;try{n(r.apply(void 0,[e.getState()].concat(o)))}catch(e){n(e,!0)}},ln[Ct]=function(e,t,n){var r=t.pattern,o=en(t.buffer),i=Jt(r),a=function t(n){Zt(n)||e.channel.take(t,i),o.put(n)},u=o.close;o.close=function(){a.cancel(),u()},e.channel.take(a,i),n(o)},ln[_t]=function(e,t,n,r){n(r.task.isCancelled())},ln[Pt]=function(e,t,n){t.flush(n)},ln[Ot]=function(e,t,n,r){n(r.task.context[t])},ln[Nt]=function(e,t,n,r){var o=r.task;Qe(o.context,t),n()},ln);function pn(e,t){return e+"?"+t}function hn(e){var t=e.name,n=e.location;return n?t+"  "+pn(n.fileName,n.lineNumber):t}var mn=null,vn=[],yn=function(e){e.crashedEffect=mn,vn.push(e)},gn=function(){mn=null,vn.length=0},bn=function(e){mn=e},wn=function(){var e,t,n,r,o=vn[0],i=vn.slice(1),a=o.crashedEffect?(e=o.crashedEffect,(t=ct(e))?t.code+"  "+pn(t.fileName,t.lineNumber):""):null;return["The above error occurred in task "+hn(o.meta)+(a?" \n when executing effect "+a:"")].concat(i.map(function(e){return"    created by "+hn(e.meta)}),[(n=vn,r=Ye(function(e){return e.cancelledTasks},n),r.length?["Tasks cancelled due to error:"].concat(r).join("\n"):"")]).join("\n")};function xn(e,t,n,r,o,i,a){var u,l,c,s=nn,f=null,d=[],p=Object.create(n),h=function(e,t,n){var r,o=[],i=!1;function a(e){t(),l(),n(e,!0)}function u(t){o.push(t),t.cont=function(u,l){i||(Xe(o,t),t.cont=He,l?a(u):(t===e&&(r=u),o.length||(i=!0,n(r))))}}function l(){i||(i=!0,o.forEach(function(e){e.cont=He,e.cancel()}),o=[])}return u(e),{addTask:u,cancelAll:l,abort:a,getTasks:function(){return o}}}(t,function(){d.push.apply(d,h.getTasks().map(function(e){return e.meta.name}))},m);function m(t,n){if(n){if(s=on,yn({meta:o,cancelledTasks:d}),v.isRoot){var r=wn();gn(),e.onError(t,{sagaStack:r})}c=t,f&&f.reject(t)}else t===Ne?s=rn:s!==rn&&(s=an),l=t,f&&f.resolve(t);v.cont(t,n),v.joiners.forEach(function(e){e.cb(t,n)}),v.joiners=null}var v=((u={})[Oe]=!0,u.id=r,u.meta=o,u.isRoot=i,u.context=p,u.joiners=[],u.queue=h,u.cancel=function(){s===nn&&(s=rn,h.cancelAll(),m(Ne,!1))},u.cont=a,u.end=m,u.setContext=function(e){Qe(p,e)},u.toPromise=function(){return f?f.promise:(f=Lt(),s===on?f.reject(c):s!==nn&&f.resolve(l),f.promise)},u.isRunning=function(){return s===nn},u.isCancelled=function(){return s===rn||s===nn&&t.status===rn},u.isAborted=function(){return s===on},u.result=function(){return l},u.error=function(){return c},u);return v}function kn(e,t,n,r,o,i,a){var u=e.finalizeRunEffect(function(t,n,r){if(Ue(t))un(t,r);else if(Fe(t))kn(e,t,c.context,n,o,!1,r);else if(t&&t[Te]){var i=dn[t.type];i(e,t.payload,r,s)}else r(t)});f.cancel=He;var l={meta:o,cancel:function(){l.status===nn&&(l.status=rn,f(Ne))},status:nn},c=xn(e,l,n,r,o,i,a),s={task:c,digestEffect:d};return a.cancel=c.cancel,f(),c;function f(e,n){try{var o;n?(o=t.throw(e),gn()):it(e)?(l.status=rn,f.cancel(),o=De(t.return)?t.return(Ne):{done:!0,value:Ne}):o=ot(e)?De(t.return)?t.return():{done:!0}:t.next(e),o.done?(l.status!==rn&&(l.status=an),l.cont(o.value)):d(o.value,r,f)}catch(e){if(l.status===rn)throw e;l.status=on,l.cont(e,!0)}}function d(t,n,r,o){void 0===o&&(o="");var i,a=sn();function l(n,o){i||(i=!0,r.cancel=He,e.sagaMonitor&&(o?e.sagaMonitor.effectRejected(a,n):e.sagaMonitor.effectResolved(a,n)),o&&bn(t),r(n,o))}e.sagaMonitor&&e.sagaMonitor.effectTriggered({effectId:a,parentEffectId:n,label:o,effect:t}),l.cancel=He,r.cancel=function(){i||(i=!0,l.cancel(),l.cancel=He,e.sagaMonitor&&e.sagaMonitor.effectCancelled(a))},u(t,a,l)}}var Sn=function(e){void 0===e&&(e={});var t,n=e,r=n.context,o=void 0===r?{}:r,i=n.channel,a=void 0===i?tn():i,u=n.sagaMonitor,l=T(n,["context","channel","sagaMonitor"]);function c(e){var n=e.getState,r=e.dispatch;return t=function(e,t){for(var n=e.channel,r=void 0===n?tn():n,o=e.dispatch,i=e.getState,a=e.context,u=void 0===a?{}:a,l=e.sagaMonitor,c=e.effectMiddlewares,s=e.onError,f=void 0===s?tt:s,d=arguments.length,p=new Array(d>2?d-2:0),h=2;h<d;h++)p[h-2]=arguments[h];var m,v=t.apply(void 0,p),y=sn();if(l&&(l.rootSagaStarted=l.rootSagaStarted||He,l.effectTriggered=l.effectTriggered||He,l.effectResolved=l.effectResolved||He,l.effectRejected=l.effectRejected||He,l.effectCancelled=l.effectCancelled||He,l.actionDispatched=l.actionDispatched||He,l.rootSagaStarted({effectId:y,saga:t,args:p})),c){var g=H.apply(void 0,c);m=function(e){return function(t,n,r){return g(function(t){return e(t,n,r)})(t)}}}else m=Ke;var b={channel:r,dispatch:rt(o),getState:i,sagaMonitor:l,onError:f,finalizeRunEffect:m};return Wt(function(){var e=kn(b,v,u,y,lt(t),!0,He);return l&&l.effectResolved(y,e),e})}.bind(null,S({},l,{context:o,channel:a,dispatch:r,getState:n,sagaMonitor:u})),function(e){return function(t){u&&u.actionDispatched&&u.actionDispatched(t);var n=e(t);return a.put(t),n}}}return c.run=function(){return t.apply(void 0,arguments)},c.setContext=function(e){Qe(o,e)},c};function Tn(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var En=Tn();En.withExtraArgument=Tn;var Cn=En,_n=n(20);const Pn={manualJobs:[],autoTriggerJobs:[]};function On(e=Pn,t){switch(t.type){case l:return console.log("AppReducer: action: %s, data: %o",l,t.jobs),e;case s:return t.builds,e;case d:return t.report,e}return e}var Nn=function(e){return{done:!0,value:e}},Rn={};function jn(e){return Be(e)?"channel":We(e)?String(e):De(e)?e.name:String(e)}function An(e,t,n){var r,o,i,a=t;function u(t,n){if(a===Rn)return Nn(t);if(n&&!o)throw a=Rn,n;r&&r(t);var u=n?e[o](n):e[a]();return a=u.nextState,i=u.effect,r=u.stateUpdater,o=u.errorState,a===Rn?Nn(t):i}return et(u,function(e){return u(null,e)},n)}function Mn(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var i,a,u={done:!1,value:jt(e)},l=function(e){return{done:!1,value:Dt.apply(void 0,[t].concat(r,[e]))}},c=function(e){return{done:!1,value:(t=e,void 0===t&&(t=Pe),Rt(Tt,t))};var t},s=function(e){return i=e},f=function(e){return a=e};return An({q1:function(){return{nextState:"q2",effect:u,stateUpdater:f}},q2:function(){return i?{nextState:"q3",effect:c(i)}:{nextState:"q1",effect:l(a),stateUpdater:s}},q3:function(){return{nextState:"q1",effect:l(a),stateUpdater:s}}},"q1","takeLatest("+jn(e)+", "+t.name+")")}function Dn(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];return Dt.apply(void 0,[Mn,e,t].concat(r))}var In=n(5),Ln=n.n(In);const Un=new class{getCucumberJobs(){return Ln.a.get("http://localhost:9001/api/cucumberJobs")}getCucumberBuilds(e){return Ln.a.get(`http://localhost:9001/api/job/${e}/cucumberBuilds`)}getCucumberReport(e,t){return Ln.a.get(`http://localhost:9001/api/cucumberReport/job/${e}/buildId/${t}`)}};function*Fn(){yield Dn(u,zn),yield Dn(c,Bn),yield Dn(f,Wn)}function*zn(){console.log("Saga: loadCucumberJobs");const e=yield Un.getCucumberJobs();yield At({type:l,jobs:e.data})}function Bn(){}function Wn(){}const qn=Object(_n.createLogger)(),$n=Sn();const Vn=function(){const e=q(On,K($n,qn,Cn));return $n.run(Fn),e}();a.a.render(o.a.createElement(class extends o.a.Component{render(){return o.a.createElement(k,{store:Vn},o.a.createElement(we,null))}},null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1sb2dnZXIvZGlzdC9yZWR1eC1sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9hY3Rpb24vYXBwLmFjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvSm9iU2VhcmNoRm9ybS50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZWR1eC1zYWdhL3N5bWJvbHMvZGlzdC9yZWR1eC1zYWdhLXN5bWJvbHMuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVkdXgtc2FnYS9pcy9kaXN0L3JlZHV4LXNhZ2EtaXMuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVkdXgtc2FnYS9kZWxheS1wL2Rpc3QvcmVkdXgtc2FnYS1kZWxheS1wLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJlZHV4LXNhZ2EvY29yZS9kaXN0L2NodW5rLWU5MjJjOTUwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVkdXgtc2FnYS9kZWZlcnJlZC9kaXN0L3JlZHV4LXNhZ2EtZGVmZXJyZWQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVkdXgtc2FnYS9jb3JlL2Rpc3QvcmVkdXgtc2FnYS1jb3JlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9kaXN0L3JlZHV4LXNhZ2EtY29yZS1ucG0tcHJveHkuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvcmVkdWNlci9hcHAucmVkdWNlci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJlZHV4LXNhZ2EvY29yZS9kaXN0L3JlZHV4LXNhZ2EtZWZmZWN0cy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3NhZ2EvYXBwLnNhZ2EudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2UvY3VjdW1iZXJSZXBvcnRTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9zdG9yZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L0FwcC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImlzQnVmZmVyIiwidG9TdHJpbmciLCJpc0FycmF5IiwidmFsIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiZm9yRWFjaCIsIm9iaiIsImZuIiwibGVuZ3RoIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIndpbmRvdyIsImRvY3VtZW50IiwibWVyZ2UiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsImFyZ3VtZW50cyIsImRlZXBNZXJnZSIsImV4dGVuZCIsImEiLCJiIiwidGhpc0FyZyIsInRyaW0iLCJzdHIiLCJyZXBsYWNlIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiZSIsImYiLCJlcnJvciIsInVuZGVmaW5lZCIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiUmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiJCR0eXBlb2YiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImtleXMiLCJjb25jYXQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJnbG9iYWwiLCJyb290IiwiX3BvbnlmaWxsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJzZWxmIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJUeXBlRXJyb3IiLCJ0b09iamVjdCIsIkFycmF5IiwiYXBwbHkiLCJ1dGlscyIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInVybCIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJ2IiwidG9JU09TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsImhhc2htYXJrSW5kZXgiLCJpbmRleE9mIiwic2xpY2UiLCJfX0NBTkNFTF9fIiwicHJvY2VzcyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInRyYW5zZm9ybVJlcXVlc3QiLCJkYXRhIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwiQWNjZXB0IiwibWV0aG9kIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwib3BlbiIsInRvVXBwZXJDYXNlIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiY29uZmlnMSIsImNvbmZpZzIiLCJwcm9wIiwiQ2FuY2VsIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwib2JzZXJ2YWJsZSIsInN1cGVyXyIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJ1IiwiTiIsIk1hdGgiLCJ0ZXN0IiwicHJlZmlsdGVyIiwibm9ybWFsaXplIiwiaCIsInkiLCJsaHMiLCJyaHMiLCJmaWx0ZXIiLCJ3IiwieCIsIlMiLCJpc05hTiIsImtpbmQiLCJwYXRoIiwiaW5kZXgiLCJpdGVtIiwiRiIsImNvbG9yIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cCIsImxvZyIsInRleHQiLCJQIiwiZ3JvdXBFbmQiLCJsb2dnZXIiLCJhY3Rpb25UcmFuc2Zvcm1lciIsInRpdGxlRm9ybWF0dGVyIiwidGltZXN0YW1wIiwiZHVyYXRpb24iLCJ0b0ZpeGVkIiwiY29sbGFwc2VkIiwiY29sb3JzIiwibGV2ZWwiLCJkaWZmIiwic3RhcnRlZCIsInN0YXJ0ZWRUaW1lIiwiYWN0aW9uIiwicHJldlN0YXRlIiwidG9vayIsIm5leHRTdGF0ZSIsImsiLCJqIiwiRCIsIkUiLCJ0aXRsZSIsIkEiLCJPIiwiQyIsIkwiLCJUIiwiTSIsIl8iLCJzdGF0ZVRyYW5zZm9ybWVyIiwiZXJyb3JUcmFuc2Zvcm1lciIsInByZWRpY2F0ZSIsImxvZ0Vycm9ycyIsImRpZmZQcmVkaWNhdGUiLCJnZXRTdGF0ZSIsImRpc3BhdGNoIiwibm93IiwiRGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJwZXJmb3JtYW5jZSIsIml0ZXJhdG9yIiwiRGVlcERpZmYiLCJkZWZpbmVQcm9wZXJ0aWVzIiwib2JzZXJ2YWJsZURpZmYiLCJhcHBseURpZmYiLCJhcHBseUNoYW5nZSIsInJldmVydENoYW5nZSIsImlzQ29uZmxpY3QiLCJub0NvbmZsaWN0IiwidHJhbnNmb3JtZXIiLCJjcmVhdGVMb2dnZXIiLCJkZWZhdWx0IiwiZm9yIiwicSIsInoiLCJhYSIsImJhIiwiQiIsImNhIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInByb3BzIiwiY29udGV4dCIsInJlZnMiLCJ1cGRhdGVyIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsImN1cnJlbnQiLCJKIiwiSyIsInJlZiIsIl9fc2VsZiIsIl9fc291cmNlIiwiY2hpbGRyZW4iLCJfb3duZXIiLCJRIiwicG9wIiwia2V5UHJlZml4IiwiZnVuYyIsImNvdW50IiwiUiIsIlUiLCJuZXh0IiwiZG9uZSIsIj0iLCI6IiwiZXNjYXBlIiwiZWEiLCJmYSIsIlYiLCJkYSIsIlciLCJYIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsImNyZWF0ZVJlZiIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY3JlYXRlRWxlbWVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInZlcnNpb24iLCJ1bnN0YWJsZV9Db25jdXJyZW50TW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZIiwiWiIsImhhIiwiaWEiLCJvbkVycm9yIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInFhIiwicmVnaXN0cmF0aW9uTmFtZSIsInJhIiwic2EiLCJkZXBlbmRlbmNpZXMiLCJ0YSIsInVhIiwidmEiLCJ3YSIsImN1cnJlbnRUYXJnZXQiLCJrYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiQ2EiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIkRhIiwiRWEiLCJyYW5kb20iLCJGYSIsIkdhIiwiSGEiLCJwYXJlbnROb2RlIiwidGFnIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJyZXR1cm4iLCJNYSIsImRpc3BhdGNoQ29uZmlnIiwiTmEiLCJfdGFyZ2V0SW5zdCIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlVhIiwiVmEiLCJXYSIsInN0eWxlIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhhIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsInRleHRDb250ZW50IiwiZmIiLCJnYiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaWIiLCJldmVudFBvb2wiLCJqYiIsImRlc3RydWN0b3IiLCJoYiIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJkb2N1bWVudE1vZGUiLCJwYiIsInFiIiwicmIiLCJzYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ0YiIsInViIiwia2V5Q29kZSIsInZiIiwiZGV0YWlsIiwid2IiLCJ6YiIsImxvY2FsZSIsIndoaWNoIiwieGIiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ5YiIsIkFiIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGltZSIsIndlZWsiLCJNYiIsIm5vZGVOYW1lIiwiTmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIk9iIiwic2V0QXR0cmlidXRlIiwiUGIiLCJSYiIsIl92YWx1ZVRyYWNrZXIiLCJzZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiUWIiLCJTYiIsImNoZWNrZWQiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImtjIiwibGMiLCJtYyIsIm5jIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInJjIiwic2MiLCJ0YyIsInBjIiwicWMiLCJvYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwidWMiLCJ2YyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkJjIiwiY2hhbmdlIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsImRldGFjaEV2ZW50IiwiS2MiLCJMYyIsImF0dGFjaEV2ZW50IiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiUWMiLCJ2aWV3IiwiUmMiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiU2MiLCJnZXRNb2RpZmllclN0YXRlIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJYYyIsIlljIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJaYyIsInBvaW50ZXJJZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIiRjIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJhZCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiYWx0ZXJuYXRlIiwiYmQiLCJjZCIsImRkIiwiZWQiLCJlZmZlY3RUYWciLCJmZCIsImhkIiwiY2hpbGQiLCJzaWJsaW5nIiwiZ2QiLCJpZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJqZCIsImNsaXBib2FyZERhdGEiLCJrZCIsImxkIiwiY2hhckNvZGUiLCJtZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJuZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJvZCIsImxvY2F0aW9uIiwicmVwZWF0IiwicGQiLCJkYXRhVHJhbnNmZXIiLCJxZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJyZCIsInNkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsImlzSW50ZXJhY3RpdmUiLCJ4ZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsInlkIiwiemQiLCJBZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiYm9keSIsIktkIiwiZmlyc3RDaGlsZCIsIkxkIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTmQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2QiLCJjb250ZW50RWRpdGFibGUiLCJRZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJNZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImVsZW1lbnQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiUmQiLCJTZCIsInNlbGVjdCIsIlRkIiwiVWQiLCJWZCIsIldkIiwiWGQiLCJZZCIsIm9uU2VsZWN0IiwiJGQiLCJaZCIsImFlIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiYmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNlIiwiZGUiLCJlZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJmZSIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJnZSIsImhlIiwiaWUiLCJqZSIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwia2UiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJsZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwibWUiLCJuZSIsIm9lIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJwZSIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInFlIiwicmUiLCJpcyIsInNlIiwiYmx1ciIsInRlIiwidWUiLCJ2ZSIsIndlIiwiYXV0b0ZvY3VzIiwieGUiLCJfX2h0bWwiLCJ5ZSIsInNldFRpbWVvdXQiLCJ6ZSIsImNsZWFyVGltZW91dCIsIkFlIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIkJlIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJEZSIsIkVlIiwiU2V0IiwiRmUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIktlIiwiTGUiLCJNZSIsIk5lIiwiZ2V0Q2hpbGRDb250ZXh0IiwiT2UiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVWUiLCJlbGVtZW50VHlwZSIsInBlbmRpbmdQcm9wcyIsImNvbnRleHREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlZlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJjZiIsImRpZEVycm9yIiwiZWFybGllc3RQZW5kaW5nVGltZSIsImxhdGVzdFBlbmRpbmdUaW1lIiwiZGYiLCJmZiIsImxhdGVzdFBpbmdlZFRpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwiZ2YiLCJuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiIsImpmIiwia2YiLCJiYXNlU3RhdGUiLCJ0ZiIsIl9yZWFjdEludGVybmFsRmliZXIiLCJsZiIsIm5mIiwibWYiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidWYiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJ2ZiIsInN0YXRlIiwid2YiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJ4ZiIsInlmIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJ6ZiIsIkFmIiwiX3N0cmluZ1JlZiIsIkJmIiwiQ2YiLCJNYXAiLCJkZWxldGUiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsInRhZ05hbWUiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJxdWV1ZSIsImJhc2VVcGRhdGUiLCJuZyIsIm9nIiwicGciLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwicWciLCJsYXN0IiwibGFzdFJlbmRlcmVkU3RhdGUiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwicmciLCJkZXN0cm95IiwiZGVwcyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJyZWFkQ29udGV4dCIsInhnIiwieWciLCJ6ZyIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiUWciLCJSZyIsInBlbmRpbmdDb250ZXh0IiwiU2ciLCJ0aW1lZE91dEF0IiwiZmFsbGJhY2siLCJUZyIsIlVnIiwiaGYiLCJXZSIsImh5ZHJhdGUiLCJoaWRkZW4iLCJmaXJzdCIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJzdGFjayIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJvbkNsaWNrIiwib25jbGljayIsInBoIiwiV2Vha1NldCIsInFoIiwicmgiLCJzaCIsInRoIiwidmgiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIndoIiwieGgiLCJ5aCIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJ6aCIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZSIsImRpc3BsYXkiLCJ1aCIsImhpIiwiWGgiLCJoYXMiLCJhZGQiLCJCaCIsIldlYWtNYXAiLCJDaCIsIkRoIiwiRWgiLCJjb21wb25lbnREaWRDYXRjaCIsIkZoIiwiY29tcG9uZW50U3RhY2siLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZoIiwiWmgiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJlZiIsIlBkIiwiWWgiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImZpbmlzaGVkV29yayIsIiRoIiwiYWkiLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJiaSIsImNpIiwiZGkiLCJtYXhEdXJhdGlvbiIsInBpbmdDYWNoZSIsImVpIiwiZmkiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImdpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidW5zdGFibGVfbm93IiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwidGltZW91dEhhbmRsZSIsIkJpIiwiQ2kiLCJuZXh0U2NoZWR1bGVkUm9vdCIsIkRpIiwiRWkiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIl9vbkNvbXBsZXRlIiwiRmkiLCJmaXJzdEJhdGNoIiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiTmkiLCJfcm9vdCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsIk9pIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsIlBpIiwiX2ludGVybmFsUm9vdCIsIlFpIiwiU2kiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJSaSIsIlRpIiwiTWkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsImNvbW1pdCIsInVubW91bnQiLCJjcmVhdGVCYXRjaCIsIlZpIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIlRlIiwib3ZlcnJpZGVQcm9wcyIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIldpIiwiWGkiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIl9zY2hlZE1vY2siLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYm9vbCIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsInR5cGVPZiIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJjaGFpbiIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic2hpZnQiLCJnZXRVcmkiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYmFzZVVSTCIsInJlYXNvbiIsImZucyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJjb2x1bW5OdW1iZXIiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsImxpbmUiLCJzdWJzdHIiLCJvcmlnaW5VUkwiLCJtc2llIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwicHJvdG9jb2wiLCJob3N0IiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJyZWxhdGl2ZVVSTCIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJ0b2tlbiIsImFyciIsIkxPQURfQ1VDVU1CRVJfSk9CUyIsIlNBVkVfQ1VDVU1CRVJfSk9CUyIsIkxPQURfQ1VDVU1CRVJfQlVJTERTIiwiU0FWRV9DVUNVTUJFUl9CVUlMRFMiLCJMT0FEX0NVQ1VNQkVSX1JFUE9SVCIsIlNBVkVfQ1VDVU1CRVJfUkVQT1JUIiwiUmVhY3RSZWR1eENvbnRleHQiLCJyZWFjdF9kZWZhdWx0IiwiYmF0Y2hfYmF0Y2giLCJnZXRCYXRjaCIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwic3RvcmUiLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJfcHJvdG8iLCJhZGROZXN0ZWRTdWIiLCJsaXN0ZW5lciIsInRyeVN1YnNjcmliZSIsInN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJvblN0YXRlQ2hhbmdlIiwiaXNTdWJzY3JpYmVkIiwiQm9vbGVhbiIsImJhdGNoIiwiY2xlYXIiLCJzcGxpY2UiLCJ0cnlVbnN1YnNjcmliZSIsIlByb3ZpZGVyX1Byb3ZpZGVyIiwiX0NvbXBvbmVudCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl90aGlzIiwibm90aWZ5U3Vic2NyaWJlcnMiLCJSZWZlcmVuY2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwiX19wcm90b19fIiwiX2lzTW91bnRlZCIsInByZXZQcm9wcyIsIkNvbnRleHQiLCJyZWFjdCIsInByb3BfdHlwZXNfZGVmYXVsdCIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJfZXh0ZW5kcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsImluaXRTdGF0ZVVwZGF0ZXMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZiIsIl9yZWYyIiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJHdpdGhSZWYiLCJ3aXRoUmVmIiwiX3JlZjIkZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsImJyb3dzZXJfZGVmYXVsdCIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJmb3J3YXJkZWRSZWYiLCJ3cmFwcGVyUHJvcHMiLCJwcm9wc0NvbnRleHQiLCJDb250ZXh0VG9Vc2UiLCJyZWFjdF9pcyIsImNvbnRleHRWYWx1ZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImRpZFN0b3JlQ29tZUZyb21Db250ZXh0IiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwibGFzdENoaWxkUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInJlbmRlcklzU2NoZWR1bGVkIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJoYXNPd24iLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsImVzIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsIl9kZWZpbmVQcm9wZXJ0eSIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJfa2V5IiwiYXJnIiwicmVkdWNlIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwibWlkZGxld2FyZSIsIm93bktleXMiLCJzeW0iLCJfb2JqZWN0U3ByZWFkIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50IiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwiY29ubmVjdF9tYXBEaXNwYXRjaFRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJfdGVtcCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJjb25uZWN0X2Nvbm5lY3QiLCJfcmVmMyIsIl9yZWYzJHB1cmUiLCJfcmVmMyRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYzJGFyZU93blByb3BzRXF1YSIsIl9yZWYzJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYzJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsIm5ld0JhdGNoIiwicmVhY3RfZG9tIiwiY29tcG9uZW50X0pvYlNlYXJjaEZvcm0iLCJbb2JqZWN0IE9iamVjdF0iLCJzdXBlciIsImh0bWxGb3IiLCJsaXN0IiwiY3JlYXRlU3ltYm9sIiwiQ0FOQ0VMIiwiQ0hBTk5FTF9FTkRfVFlQRSIsIklPIiwiTUFUQ0giLCJNVUxUSUNBU1QiLCJTQUdBX0FDVElPTiIsIlNFTEZfQ0FOQ0VMTEFUSU9OIiwiVEFTSyIsIlRBU0tfQ0FOQ0VMIiwiVEVSTUlOQVRFIiwiU0FHQV9MT0NBVElPTiIsInVuZGVmIiwibm90VW5kZWYiLCJyZWR1eF9zYWdhX2lzX2VzbV9wcm9taXNlIiwicmVkdXhfc2FnYV9pc19lc21faXRlcmF0b3IiLCJpdCIsInRocm93IiwicmVkdXhfc2FnYV9pc19lc21fcGF0dGVybiIsInBhdHRlcm4iLCJwYXQiLCJldmVyeSIsInJlZHV4X3NhZ2FfaXNfZXNtX2NoYW5uZWwiLCJ0YWtlIiwiY2xvc2UiLCJzdHJpbmdhYmxlRnVuYyIsInJlZHV4X3NhZ2FfaXNfZXNtX211bHRpY2FzdCIsImtUcnVlIiwia29uc3QiLCJpZGVudGl0eSIsImFzeW5jSXRlcmF0b3IiLCJjaHVua19lOTIyYzk1MF9hc3NpZ25XaXRoU3ltYm9scyIsImZsYXRNYXAiLCJtYXBwZXIiLCJjYWxsZWQiLCJrVGhyb3ciLCJrUmV0dXJuIiwibWFrZUl0ZXJhdG9yIiwidGhybyIsImlzU2FnYUl0ZXJhdG9yIiwibG9nRXJyb3IiLCJzYWdhU3RhY2siLCJjcmVhdGVFbXB0eUFycmF5IiwiY2h1bmtfZTkyMmM5NTBfd3JhcFNhZ2FEaXNwYXRjaCIsImNodW5rX2U5MjJjOTUwX3Nob3VsZFRlcm1pbmF0ZSIsInJlcyIsImNodW5rX2U5MjJjOTUwX3Nob3VsZENhbmNlbCIsInNob3VsZENvbXBsZXRlIiwiY3JlYXRlQWxsU3R5bGVDaGlsZENhbGxiYWNrcyIsInBhcmVudENhbGxiYWNrIiwidG90YWxDb3VudCIsImNvbXBsZXRlZCIsImNvbXBsZXRlZENvdW50IiwicmVzdWx0cyIsImNoaWxkQ2FsbGJhY2tzIiwiY2hDYkF0S2V5IiwiaXNFcnIiLCJnZXRNZXRhSW5mbyIsImdldExvY2F0aW9uIiwiaW5zdHJ1bWVudGVkIiwiQlVGRkVSX09WRVJGTE9XIiwiT05fT1ZFUkZMT1dfVEhST1ciLCJPTl9PVkVSRkxPV19TTElERSIsIk9OX09WRVJGTE9XX0VYUEFORCIsInJpbmdCdWZmZXIiLCJsaW1pdCIsIm92ZXJmbG93QWN0aW9uIiwicHVzaEluZGV4IiwicG9wSW5kZXgiLCJmbHVzaCIsIml0ZW1zIiwiaXNFbXB0eSIsInB1dCIsImRvdWJsZWRMaW1pdCIsImV4cGFuZGluZyIsImluaXRpYWxTaXplIiwiVEFLRSIsIlBVVCIsIkFMTCIsIlJBQ0UiLCJDQUxMIiwiQ1BTIiwiRk9SSyIsIkpPSU4iLCJjaHVua19lOTIyYzk1MF9DQU5DRUwiLCJTRUxFQ1QiLCJBQ1RJT05fQ0hBTk5FTCIsIkNBTkNFTExFRCIsIkZMVVNIIiwiR0VUX0NPTlRFWFQiLCJTRVRfQ09OVEVYVCIsImNodW5rX2U5MjJjOTUwX21ha2VFZmZlY3QiLCJjb21iaW5hdG9yIiwiY2h1bmtfZTkyMmM5NTBfdGFrZSIsInBhdHRlcm5PckNoYW5uZWwiLCJtdWx0aWNhc3RQYXR0ZXJuIiwiY2hhbm5lbCIsImNodW5rX2U5MjJjOTUwX3B1dCIsImNoYW5uZWwkMSIsImdldEZuQ2FsbERlc2NyaXB0b3IiLCJmbkRlc2NyaXB0b3IiLCJmb3JrIiwiX2xlbjMiLCJfa2V5MyIsImRlZmVycmVkIiwiZGVmIiwicmVkdXhfc2FnYV9kZWZlcnJlZF9lc20iLCJyZWR1eF9zYWdhX2NvcmVfZXNtX3F1ZXVlIiwic2VtYXBob3JlIiwiZXhlYyIsInRhc2siLCJzdXNwZW5kIiwiYXNhcCIsInJlZHV4X3NhZ2FfY29yZV9lc21fZmx1c2giLCJpbW1lZGlhdGVseSIsInJlZHV4X3NhZ2FfY29yZV9lc21fYXJyYXkiLCJwYXR0ZXJucyIsInNvbWUiLCJyZWR1eF9zYWdhX2NvcmVfZXNtX21hdGNoZXIiLCJfcHJlZGljYXRlIiwicmVkdXhfc2FnYV9jb3JlX2VzbV9zdHJpbmciLCJyZWR1eF9zYWdhX2NvcmVfZXNtX3N5bWJvbCIsInJlZHV4X3NhZ2FfY29yZV9lc21fd2lsZGNhcmQiLCJtYXRjaGVyQ3JlYXRvciIsIkVORCIsInJlZHV4X3NhZ2FfY29yZV9lc21faXNFbmQiLCJyZWR1eF9zYWdhX2NvcmVfZXNtX2NoYW5uZWwiLCJidWZmZXIkMSIsImNsb3NlZCIsInRha2VycyIsInRha2VyIiwic3RkQ2hhbm5lbCIsImN1cnJlbnRUYWtlcnMiLCJuZXh0VGFrZXJzIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dFRha2VycyIsImNoYW4iLCJtYXRjaGVyIiwiUlVOTklORyIsInJlZHV4X3NhZ2FfY29yZV9lc21fQ0FOQ0VMTEVEIiwiQUJPUlRFRCIsIkRPTkUiLCJjYW5jZWxQcm9taXNlIiwiX2VmZmVjdFJ1bm5lck1hcCIsInJlZHV4X3NhZ2FfY29yZV9lc21fY3VycmVudCIsIm5leHRFZmZlY3RJZCIsImNhbmNlbFNpbmdsZVRhc2siLCJ0YXNrVG9DYW5jZWwiLCJpc1J1bm5pbmciLCJlZmZlY3RSdW5uZXJNYXAiLCJfcmVmMyRjaGFubmVsIiwibWF5YmUiLCJ0YWtlQ2IiLCJlZmZlY3RzIiwiX3JlZjExIiwiZGlnZXN0RWZmZWN0IiwiZWZmZWN0SWQiLCJfcmVmMTIiLCJjaGlsZENicyIsIl9yZWY0IiwiX3JlZjUiLCJwcm9jIiwiX3JlZjYiLCJjcHNDYiIsIl9yZWY3IiwiX3JlZjgiLCJkZXRhY2hlZCIsInBhcmVudCIsInRhc2tJdGVyYXRvciIsInJlc29sdmVkIiwiY3JlYXRlVGFza0l0ZXJhdG9yIiwiZ2V0SXRlcmF0b3JNZXRhSW5mbyIsImFkZFRhc2siLCJpc0Fib3J0ZWQiLCJ0YXNrT3JUYXNrcyIsIl9yZWY5Iiwiam9pblNpbmdsZVRhc2siLCJ0YXNrVG9Kb2luIiwiam9pbmVyIiwiam9pbmVycyIsIl9yZWYxMCIsIl9yZWYxMyIsInNlbGVjdG9yIiwiX3JlZjE0IiwiX3JlZjE1IiwiaXNDYW5jZWxsZWQiLCJfcmVmMTYiLCJfcmVmMTciLCJmb3JtYXRMb2NhdGlvbiIsInNhZ2FMb2NhdGlvbkFzU3RyaW5nIiwic2FnYU1ldGEiLCJjcmFzaGVkRWZmZWN0IiwicmVkdXhfc2FnYV9jb3JlX2VzbV9zYWdhU3RhY2siLCJhZGRTYWdhRnJhbWUiLCJmcmFtZSIsInNldENyYXNoZWRFZmZlY3QiLCJlZmZlY3QiLCJyZWR1eF9zYWdhX2NvcmVfZXNtX3RvU3RyaW5nIiwiY2FuY2VsbGVkVGFza3MiLCJmaXJzdFNhZ2EiLCJvdGhlclNhZ2FzIiwiY3Jhc2hlZEVmZmVjdExvY2F0aW9uIiwibmV3VGFzayIsIm1haW5UYXNrIiwicGFyZW50Q29udGV4dCIsInBhcmVudEVmZmVjdElkIiwiaXNSb290IiwiY29udCIsIl90YXNrIiwidGFza1Jlc3VsdCIsInRhc2tFcnJvciIsImRlZmVycmVkRW5kIiwiY2FuY2VsbGVkRHVlVG9FcnJvclRhc2tzIiwib25BYm9ydCIsInRhc2tzIiwiY2FuY2VsQWxsIiwiZ2V0VGFza3MiLCJmb3JrUXVldWUiLCJzZXRDb250ZXh0IiwidG9Qcm9taXNlIiwiaXRlcmF0b3IkMSIsImZpbmFsUnVuRWZmZWN0IiwiZmluYWxpemVSdW5FZmZlY3QiLCJjdXJyQ2IiLCJlZmZlY3RSdW5uZXIiLCJleGVjdXRpbmdDb250ZXh0IiwibGFiZWwiLCJlZmZlY3RTZXR0bGVkIiwic2FnYU1vbml0b3IiLCJlZmZlY3RSZWplY3RlZCIsImVmZmVjdFJlc29sdmVkIiwiZWZmZWN0VHJpZ2dlcmVkIiwiZWZmZWN0Q2FuY2VsbGVkIiwicmVkdXhfc2FnYV9jb3JlX25wbV9wcm94eV9lc20iLCJib3VuZFJ1blNhZ2EiLCJfcmVmMiRjaGFubmVsIiwic2FnYU1pZGRsZXdhcmUiLCJzYWdhIiwiX3JlZiRjaGFubmVsIiwiX3JlZiRjb250ZXh0IiwiZWZmZWN0TWlkZGxld2FyZXMiLCJfcmVmJG9uRXJyb3IiLCJyb290U2FnYVN0YXJ0ZWQiLCJhY3Rpb25EaXNwYXRjaGVkIiwicnVuRWZmZWN0IiwiZWZmIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJyZWR1eF90aHVua19lcyIsImluaXRpYWxTdGF0ZSIsIm1hbnVhbEpvYnMiLCJhdXRvVHJpZ2dlckpvYnMiLCJhcHBfcmVkdWNlcl9yZWR1Y2VyIiwiam9icyIsImJ1aWxkcyIsInJlcG9ydCIsInFFbmQiLCJzYWZlTmFtZSIsImZzbUl0ZXJhdG9yIiwiZnNtIiwic3RhcnRTdGF0ZSIsInN0YXRlVXBkYXRlciIsImVycm9yU3RhdGUiLCJ0YWtlTGF0ZXN0Iiwid29ya2VyIiwieVRha2UiLCJ5Rm9yayIsInlDYW5jZWwiLCJzZXRUYXNrIiwic2V0QWN0aW9uIiwicTEiLCJxMiIsInEzIiwidGFrZUxhdGVzdCQxIiwiX2xlbjIiLCJfa2V5MiIsImN1Y3VtYmVyUmVwb3J0U2VydmljZSIsImF4aW9zX2RlZmF1bHQiLCJqb2IiLCJidWlsZElkIiwiYXBwU2FnYSIsImxvYWRDdWN1bWJlckpvYnMiLCJsb2FkQ3VjdW1iZXJCdWlsZHMiLCJsb2FkQ3VjdW1iZXJSZXBvcnQiLCJnZXRDdWN1bWJlckpvYnMiLCJsb2dnZXJNaWRkbGV3YXJlIiwicmVkdXhfbG9nZ2VyIiwic3RvcmVfc2FnYU1pZGRsZXdhcmUiLCJBcHBfc3RvcmUiLCJjb25maWd1cmVTdG9yZSIsInJlYWN0X2RvbV9kZWZhdWx0IiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixF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VUYsS0FDTjc3RCxRQUFRa00sSUFBSSwwQkFDWixNQUFNM0QsUUFBaUJpekQsR0FBc0JRLHdCQUN2QzVMLEdBQUksQ0FDTnB2RCxLQUFNNjZDLEVBQ05vZSxLQUFNMXhELEVBQVNwQyxPQUt2QixTQUFTMjFELE1BSVQsU0FBU0MsTUV4QlQsTUFBTUUsR0FBbUJoaEUsT0FBQWloRSxHQUFBLGFBQUFqaEUsR0FDbkJraEUsR0FBaUJ4RCxLQ0h2QixNQUFNeUQsR0RLUyxXQUVYLE1BQU0xZixFQUFRaUgsRUFDVnFXLEdBQ0E1VSxFQUFnQitXLEdBQWdCRixHQUFrQnJDLEtBS3RELE9BRkF1QyxHQUFlcGtCLElBQUk2akIsSUFFWmxmLEVDZEcyZixHQ0RkQyxFQUFBejlELEVBQVNnRCxPQUFPczZDLEVBQUF0OUMsRUFBQWdXLGNER1QsY0FBa0JzbkMsRUFBQXQ5QyxFQUFNbVUsVUFFM0IrMkMsU0FDSSxPQUNJNU4sRUFBQXQ5QyxFQUFBZ1csY0FBQzhwQyxFQUFRLENBQUNqQyxNQUFPMGYsSUFDYmpnQixFQUFBdDlDLEVBQUFnVyxjQUFDaTFDLEdBQWEsU0NSVixNQUFLeHJELFNBQVNpK0QsZUFBZSIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQ2KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBlcXVhbCB0byBtZXJnZSB3aXRoIHRoZSBkaWZmZXJlbmNlIGJlaW5nIHRoYXQgbm8gcmVmZXJlbmNlXG4gKiB0byBvcmlnaW5hbCBvYmplY3RzIGlzIGtlcHQuXG4gKlxuICogQHNlZSBtZXJnZVxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZGVlcE1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGRlZXBNZXJnZTogZGVlcE1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGU6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICByZW5kZXI6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZVxufTtcblxudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIGNvbXBhcmU6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbUmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gICAgaWYgKFJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgICB9XG4gICAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICAgICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIC8vIE9ubHkgTm9kZS5KUyBoYXMgYSBwcm9jZXNzIHZhcmlhYmxlIHRoYXQgaXMgb2YgW1tDbGFzc11dIHByb2Nlc3NcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHV0aWxzLmZvckVhY2goWyd1cmwnLCAnbWV0aG9kJywgJ3BhcmFtcycsICdkYXRhJ10sIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5J10sIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICh1dGlscy5pc09iamVjdChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnbWF4Q29udGVudExlbmd0aCcsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJywgJ21heFJlZGlyZWN0cycsICdodHRwQWdlbnQnLCAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsXG4gICAgJ3NvY2tldFBhdGgnXG4gIF0sIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP3QoZXhwb3J0cyk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCJdLHQpOnQoZS5yZWR1eExvZ2dlcj1lLnJlZHV4TG9nZ2VyfHx7fSl9KHRoaXMsZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlLHQpe2Uuc3VwZXJfPXQsZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSl9ZnVuY3Rpb24gcihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwia2luZFwiLHt2YWx1ZTplLGVudW1lcmFibGU6ITB9KSx0JiZ0Lmxlbmd0aCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwYXRoXCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIG4oZSx0LHIpe24uc3VwZXJfLmNhbGwodGhpcyxcIkVcIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImxoc1wiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJoc1wiLHt2YWx1ZTpyLGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBvKGUsdCl7by5zdXBlcl8uY2FsbCh0aGlzLFwiTlwiLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicmhzXCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIGkoZSx0KXtpLnN1cGVyXy5jYWxsKHRoaXMsXCJEXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJsaHNcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gYShlLHQscil7YS5zdXBlcl8uY2FsbCh0aGlzLFwiQVwiLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaW5kZXhcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpdGVtXCIse3ZhbHVlOnIsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIGYoZSx0LHIpe3ZhciBuPWUuc2xpY2UoKHJ8fHQpKzF8fGUubGVuZ3RoKTtyZXR1cm4gZS5sZW5ndGg9dDwwP2UubGVuZ3RoK3Q6dCxlLnB1c2guYXBwbHkoZSxuKSxlfWZ1bmN0aW9uIHUoZSl7dmFyIHQ9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpOKGUpO3JldHVyblwib2JqZWN0XCIhPT10P3Q6ZT09PU1hdGg/XCJtYXRoXCI6bnVsbD09PWU/XCJudWxsXCI6QXJyYXkuaXNBcnJheShlKT9cImFycmF5XCI6XCJbb2JqZWN0IERhdGVdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk/XCJkYXRlXCI6XCJmdW5jdGlvblwiPT10eXBlb2YgZS50b1N0cmluZyYmL15cXC8uKlxcLy8udGVzdChlLnRvU3RyaW5nKCkpP1wicmVnZXhwXCI6XCJvYmplY3RcIn1mdW5jdGlvbiBsKGUsdCxyLGMscyxkLHApe3M9c3x8W10scD1wfHxbXTt2YXIgZz1zLnNsaWNlKDApO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkKXtpZihjKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBjJiZjKGcsZCkpcmV0dXJuO2lmKFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGM/XCJ1bmRlZmluZWRcIjpOKGMpKSl7aWYoYy5wcmVmaWx0ZXImJmMucHJlZmlsdGVyKGcsZCkpcmV0dXJuO2lmKGMubm9ybWFsaXplKXt2YXIgaD1jLm5vcm1hbGl6ZShnLGQsZSx0KTtoJiYoZT1oWzBdLHQ9aFsxXSl9fX1nLnB1c2goZCl9XCJyZWdleHBcIj09PXUoZSkmJlwicmVnZXhwXCI9PT11KHQpJiYoZT1lLnRvU3RyaW5nKCksdD10LnRvU3RyaW5nKCkpO3ZhciB5PVwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6TihlKSx2PVwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6Tih0KSxiPVwidW5kZWZpbmVkXCIhPT15fHxwJiZwW3AubGVuZ3RoLTFdLmxocyYmcFtwLmxlbmd0aC0xXS5saHMuaGFzT3duUHJvcGVydHkoZCksbT1cInVuZGVmaW5lZFwiIT09dnx8cCYmcFtwLmxlbmd0aC0xXS5yaHMmJnBbcC5sZW5ndGgtMV0ucmhzLmhhc093blByb3BlcnR5KGQpO2lmKCFiJiZtKXIobmV3IG8oZyx0KSk7ZWxzZSBpZighbSYmYilyKG5ldyBpKGcsZSkpO2Vsc2UgaWYodShlKSE9PXUodCkpcihuZXcgbihnLGUsdCkpO2Vsc2UgaWYoXCJkYXRlXCI9PT11KGUpJiZlLXQhPT0wKXIobmV3IG4oZyxlLHQpKTtlbHNlIGlmKFwib2JqZWN0XCI9PT15JiZudWxsIT09ZSYmbnVsbCE9PXQpaWYocC5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHQubGhzPT09ZX0pLmxlbmd0aCllIT09dCYmcihuZXcgbihnLGUsdCkpO2Vsc2V7aWYocC5wdXNoKHtsaHM6ZSxyaHM6dH0pLEFycmF5LmlzQXJyYXkoZSkpe3ZhciB3O2UubGVuZ3RoO2Zvcih3PTA7dzxlLmxlbmd0aDt3Kyspdz49dC5sZW5ndGg/cihuZXcgYShnLHcsbmV3IGkodm9pZCAwLGVbd10pKSk6bChlW3ddLHRbd10scixjLGcsdyxwKTtmb3IoO3c8dC5sZW5ndGg7KXIobmV3IGEoZyx3LG5ldyBvKHZvaWQgMCx0W3crK10pKSl9ZWxzZXt2YXIgeD1PYmplY3Qua2V5cyhlKSxTPU9iamVjdC5rZXlzKHQpO3guZm9yRWFjaChmdW5jdGlvbihuLG8pe3ZhciBpPVMuaW5kZXhPZihuKTtpPj0wPyhsKGVbbl0sdFtuXSxyLGMsZyxuLHApLFM9ZihTLGkpKTpsKGVbbl0sdm9pZCAwLHIsYyxnLG4scCl9KSxTLmZvckVhY2goZnVuY3Rpb24oZSl7bCh2b2lkIDAsdFtlXSxyLGMsZyxlLHApfSl9cC5sZW5ndGg9cC5sZW5ndGgtMX1lbHNlIGUhPT10JiYoXCJudW1iZXJcIj09PXkmJmlzTmFOKGUpJiZpc05hTih0KXx8cihuZXcgbihnLGUsdCkpKX1mdW5jdGlvbiBjKGUsdCxyLG4pe3JldHVybiBuPW58fFtdLGwoZSx0LGZ1bmN0aW9uKGUpe2UmJm4ucHVzaChlKX0sciksbi5sZW5ndGg/bjp2b2lkIDB9ZnVuY3Rpb24gcyhlLHQscil7aWYoci5wYXRoJiZyLnBhdGgubGVuZ3RoKXt2YXIgbixvPWVbdF0saT1yLnBhdGgubGVuZ3RoLTE7Zm9yKG49MDtuPGk7bisrKW89b1tyLnBhdGhbbl1dO3N3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpzKG9bci5wYXRoW25dXSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmRlbGV0ZSBvW3IucGF0aFtuXV07YnJlYWs7Y2FzZVwiRVwiOmNhc2VcIk5cIjpvW3IucGF0aFtuXV09ci5yaHN9fWVsc2Ugc3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnMoZVt0XSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmU9ZihlLHQpO2JyZWFrO2Nhc2VcIkVcIjpjYXNlXCJOXCI6ZVt0XT1yLnJoc31yZXR1cm4gZX1mdW5jdGlvbiBkKGUsdCxyKXtpZihlJiZ0JiZyJiZyLmtpbmQpe2Zvcih2YXIgbj1lLG89LTEsaT1yLnBhdGg/ci5wYXRoLmxlbmd0aC0xOjA7KytvPGk7KVwidW5kZWZpbmVkXCI9PXR5cGVvZiBuW3IucGF0aFtvXV0mJihuW3IucGF0aFtvXV09XCJudW1iZXJcIj09dHlwZW9mIHIucGF0aFtvXT9bXTp7fSksbj1uW3IucGF0aFtvXV07c3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnMoci5wYXRoP25bci5wYXRoW29dXTpuLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZGVsZXRlIG5bci5wYXRoW29dXTticmVhaztjYXNlXCJFXCI6Y2FzZVwiTlwiOm5bci5wYXRoW29dXT1yLnJoc319fWZ1bmN0aW9uIHAoZSx0LHIpe2lmKHIucGF0aCYmci5wYXRoLmxlbmd0aCl7dmFyIG4sbz1lW3RdLGk9ci5wYXRoLmxlbmd0aC0xO2ZvcihuPTA7bjxpO24rKylvPW9bci5wYXRoW25dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cChvW3IucGF0aFtuXV0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjpvW3IucGF0aFtuXV09ci5saHM7YnJlYWs7Y2FzZVwiRVwiOm9bci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJOXCI6ZGVsZXRlIG9bci5wYXRoW25dXX19ZWxzZSBzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cChlW3RdLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZVt0XT1yLmxoczticmVhaztjYXNlXCJFXCI6ZVt0XT1yLmxoczticmVhaztjYXNlXCJOXCI6ZT1mKGUsdCl9cmV0dXJuIGV9ZnVuY3Rpb24gZyhlLHQscil7aWYoZSYmdCYmciYmci5raW5kKXt2YXIgbixvLGk9ZTtmb3Iobz1yLnBhdGgubGVuZ3RoLTEsbj0wO248bztuKyspXCJ1bmRlZmluZWRcIj09dHlwZW9mIGlbci5wYXRoW25dXSYmKGlbci5wYXRoW25dXT17fSksaT1pW3IucGF0aFtuXV07c3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnAoaVtyLnBhdGhbbl1dLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6aVtyLnBhdGhbbl1dPXIubGhzO2JyZWFrO2Nhc2VcIkVcIjppW3IucGF0aFtuXV09ci5saHM7YnJlYWs7Y2FzZVwiTlwiOmRlbGV0ZSBpW3IucGF0aFtuXV19fX1mdW5jdGlvbiBoKGUsdCxyKXtpZihlJiZ0KXt2YXIgbj1mdW5jdGlvbihuKXtyJiYhcihlLHQsbil8fGQoZSx0LG4pfTtsKGUsdCxuKX19ZnVuY3Rpb24geShlKXtyZXR1cm5cImNvbG9yOiBcIitGW2VdLmNvbG9yK1wiOyBmb250LXdlaWdodDogYm9sZFwifWZ1bmN0aW9uIHYoZSl7dmFyIHQ9ZS5raW5kLHI9ZS5wYXRoLG49ZS5saHMsbz1lLnJocyxpPWUuaW5kZXgsYT1lLml0ZW07c3dpdGNoKHQpe2Nhc2VcIkVcIjpyZXR1cm5bci5qb2luKFwiLlwiKSxuLFwi4oaSXCIsb107Y2FzZVwiTlwiOnJldHVybltyLmpvaW4oXCIuXCIpLG9dO2Nhc2VcIkRcIjpyZXR1cm5bci5qb2luKFwiLlwiKV07Y2FzZVwiQVwiOnJldHVybltyLmpvaW4oXCIuXCIpK1wiW1wiK2krXCJdXCIsYV07ZGVmYXVsdDpyZXR1cm5bXX19ZnVuY3Rpb24gYihlLHQscixuKXt2YXIgbz1jKGUsdCk7dHJ5e24/ci5ncm91cENvbGxhcHNlZChcImRpZmZcIik6ci5ncm91cChcImRpZmZcIil9Y2F0Y2goZSl7ci5sb2coXCJkaWZmXCIpfW8/by5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PWUua2luZCxuPXYoZSk7ci5sb2cuYXBwbHkocixbXCIlYyBcIitGW3RdLnRleHQseSh0KV0uY29uY2F0KFAobikpKX0pOnIubG9nKFwi4oCU4oCUIG5vIGRpZmYg4oCU4oCUXCIpO3RyeXtyLmdyb3VwRW5kKCl9Y2F0Y2goZSl7ci5sb2coXCLigJTigJQgZGlmZiBlbmQg4oCU4oCUIFwiKX19ZnVuY3Rpb24gbShlLHQscixuKXtzd2l0Y2goXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpOKGUpKXtjYXNlXCJvYmplY3RcIjpyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlW25dP2Vbbl0uYXBwbHkoZSxQKHIpKTplW25dO2Nhc2VcImZ1bmN0aW9uXCI6cmV0dXJuIGUodCk7ZGVmYXVsdDpyZXR1cm4gZX19ZnVuY3Rpb24gdyhlKXt2YXIgdD1lLnRpbWVzdGFtcCxyPWUuZHVyYXRpb247cmV0dXJuIGZ1bmN0aW9uKGUsbixvKXt2YXIgaT1bXCJhY3Rpb25cIl07cmV0dXJuIGkucHVzaChcIiVjXCIrU3RyaW5nKGUudHlwZSkpLHQmJmkucHVzaChcIiVjQCBcIituKSxyJiZpLnB1c2goXCIlYyhpbiBcIitvLnRvRml4ZWQoMikrXCIgbXMpXCIpLGkuam9pbihcIiBcIil9fWZ1bmN0aW9uIHgoZSx0KXt2YXIgcj10LmxvZ2dlcixuPXQuYWN0aW9uVHJhbnNmb3JtZXIsbz10LnRpdGxlRm9ybWF0dGVyLGk9dm9pZCAwPT09bz93KHQpOm8sYT10LmNvbGxhcHNlZCxmPXQuY29sb3JzLHU9dC5sZXZlbCxsPXQuZGlmZixjPVwidW5kZWZpbmVkXCI9PXR5cGVvZiB0LnRpdGxlRm9ybWF0dGVyO2UuZm9yRWFjaChmdW5jdGlvbihvLHMpe3ZhciBkPW8uc3RhcnRlZCxwPW8uc3RhcnRlZFRpbWUsZz1vLmFjdGlvbixoPW8ucHJldlN0YXRlLHk9by5lcnJvcix2PW8udG9vayx3PW8ubmV4dFN0YXRlLHg9ZVtzKzFdO3gmJih3PXgucHJldlN0YXRlLHY9eC5zdGFydGVkLWQpO3ZhciBTPW4oZyksaz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2EoZnVuY3Rpb24oKXtyZXR1cm4gd30sZyxvKTphLGo9RChwKSxFPWYudGl0bGU/XCJjb2xvcjogXCIrZi50aXRsZShTKStcIjtcIjpcIlwiLEE9W1wiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiXTtBLnB1c2goRSksdC50aW1lc3RhbXAmJkEucHVzaChcImNvbG9yOiBncmF5OyBmb250LXdlaWdodDogbGlnaHRlcjtcIiksdC5kdXJhdGlvbiYmQS5wdXNoKFwiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiKTt2YXIgTz1pKFMsaix2KTt0cnl7az9mLnRpdGxlJiZjP3IuZ3JvdXBDb2xsYXBzZWQuYXBwbHkocixbXCIlYyBcIitPXS5jb25jYXQoQSkpOnIuZ3JvdXBDb2xsYXBzZWQoTyk6Zi50aXRsZSYmYz9yLmdyb3VwLmFwcGx5KHIsW1wiJWMgXCIrT10uY29uY2F0KEEpKTpyLmdyb3VwKE8pfWNhdGNoKGUpe3IubG9nKE8pfXZhciBOPW0odSxTLFtoXSxcInByZXZTdGF0ZVwiKSxQPW0odSxTLFtTXSxcImFjdGlvblwiKSxDPW0odSxTLFt5LGhdLFwiZXJyb3JcIiksRj1tKHUsUyxbd10sXCJuZXh0U3RhdGVcIik7aWYoTilpZihmLnByZXZTdGF0ZSl7dmFyIEw9XCJjb2xvcjogXCIrZi5wcmV2U3RhdGUoaCkrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCI7cltOXShcIiVjIHByZXYgc3RhdGVcIixMLGgpfWVsc2UgcltOXShcInByZXYgc3RhdGVcIixoKTtpZihQKWlmKGYuYWN0aW9uKXt2YXIgVD1cImNvbG9yOiBcIitmLmFjdGlvbihTKStcIjsgZm9udC13ZWlnaHQ6IGJvbGRcIjtyW1BdKFwiJWMgYWN0aW9uICAgIFwiLFQsUyl9ZWxzZSByW1BdKFwiYWN0aW9uICAgIFwiLFMpO2lmKHkmJkMpaWYoZi5lcnJvcil7dmFyIE09XCJjb2xvcjogXCIrZi5lcnJvcih5LGgpK1wiOyBmb250LXdlaWdodDogYm9sZDtcIjtyW0NdKFwiJWMgZXJyb3IgICAgIFwiLE0seSl9ZWxzZSByW0NdKFwiZXJyb3IgICAgIFwiLHkpO2lmKEYpaWYoZi5uZXh0U3RhdGUpe3ZhciBfPVwiY29sb3I6IFwiK2YubmV4dFN0YXRlKHcpK1wiOyBmb250LXdlaWdodDogYm9sZFwiO3JbRl0oXCIlYyBuZXh0IHN0YXRlXCIsXyx3KX1lbHNlIHJbRl0oXCJuZXh0IHN0YXRlXCIsdyk7bCYmYihoLHcscixrKTt0cnl7ci5ncm91cEVuZCgpfWNhdGNoKGUpe3IubG9nKFwi4oCU4oCUIGxvZyBlbmQg4oCU4oCUXCIpfX0pfWZ1bmN0aW9uIFMoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1PYmplY3QuYXNzaWduKHt9LEwsZSkscj10LmxvZ2dlcixuPXQuc3RhdGVUcmFuc2Zvcm1lcixvPXQuZXJyb3JUcmFuc2Zvcm1lcixpPXQucHJlZGljYXRlLGE9dC5sb2dFcnJvcnMsZj10LmRpZmZQcmVkaWNhdGU7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHIpcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSh0KX19fTtpZihlLmdldFN0YXRlJiZlLmRpc3BhdGNoKXJldHVybiBjb25zb2xlLmVycm9yKFwiW3JlZHV4LWxvZ2dlcl0gcmVkdXgtbG9nZ2VyIG5vdCBpbnN0YWxsZWQuIE1ha2Ugc3VyZSB0byBwYXNzIGxvZ2dlciBpbnN0YW5jZSBhcyBtaWRkbGV3YXJlOlxcbi8vIExvZ2dlciB3aXRoIGRlZmF1bHQgb3B0aW9uc1xcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ3JlZHV4LWxvZ2dlcidcXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxcbiAgcmVkdWNlcixcXG4gIGFwcGx5TWlkZGxld2FyZShsb2dnZXIpXFxuKVxcbi8vIE9yIHlvdSBjYW4gY3JlYXRlIHlvdXIgb3duIGxvZ2dlciB3aXRoIGN1c3RvbSBvcHRpb25zIGh0dHA6Ly9iaXQubHkvcmVkdXgtbG9nZ2VyLW9wdGlvbnNcXG5pbXBvcnQgY3JlYXRlTG9nZ2VyIGZyb20gJ3JlZHV4LWxvZ2dlcidcXG5jb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoe1xcbiAgLy8gLi4ub3B0aW9uc1xcbn0pO1xcbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXFxuICByZWR1Y2VyLFxcbiAgYXBwbHlNaWRkbGV3YXJlKGxvZ2dlcilcXG4pXFxuXCIpLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSh0KX19fTt2YXIgdT1bXTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI9ZS5nZXRTdGF0ZTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGwpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGkmJiFpKHIsbCkpcmV0dXJuIGUobCk7dmFyIGM9e307dS5wdXNoKGMpLGMuc3RhcnRlZD1PLm5vdygpLGMuc3RhcnRlZFRpbWU9bmV3IERhdGUsYy5wcmV2U3RhdGU9bihyKCkpLGMuYWN0aW9uPWw7dmFyIHM9dm9pZCAwO2lmKGEpdHJ5e3M9ZShsKX1jYXRjaChlKXtjLmVycm9yPW8oZSl9ZWxzZSBzPWUobCk7Yy50b29rPU8ubm93KCktYy5zdGFydGVkLGMubmV4dFN0YXRlPW4ocigpKTt2YXIgZD10LmRpZmYmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGY/ZihyLGwpOnQuZGlmZjtpZih4KHUsT2JqZWN0LmFzc2lnbih7fSx0LHtkaWZmOmR9KSksdS5sZW5ndGg9MCxjLmVycm9yKXRocm93IGMuZXJyb3I7cmV0dXJuIHN9fX19dmFyIGssaixFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBBcnJheSh0KzEpLmpvaW4oZSl9LEE9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gRShcIjBcIix0LWUudG9TdHJpbmcoKS5sZW5ndGgpK2V9LEQ9ZnVuY3Rpb24oZSl7cmV0dXJuIEEoZS5nZXRIb3VycygpLDIpK1wiOlwiK0EoZS5nZXRNaW51dGVzKCksMikrXCI6XCIrQShlLmdldFNlY29uZHMoKSwyKStcIi5cIitBKGUuZ2V0TWlsbGlzZWNvbmRzKCksMyl9LE89XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHBlcmZvcm1hbmNlJiZudWxsIT09cGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdz9wZXJmb3JtYW5jZTpEYXRlLE49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sUD1mdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHQ9MCxyPUFycmF5KGUubGVuZ3RoKTt0PGUubGVuZ3RoO3QrKylyW3RdPWVbdF07cmV0dXJuIHJ9cmV0dXJuIEFycmF5LmZyb20oZSl9LEM9W107az1cIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBnbG9iYWw/XCJ1bmRlZmluZWRcIjpOKGdsb2JhbCkpJiZnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9LGo9ay5EZWVwRGlmZixqJiZDLnB1c2goZnVuY3Rpb24oKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgaiYmay5EZWVwRGlmZj09PWMmJihrLkRlZXBEaWZmPWosaj12b2lkIDApfSksdChuLHIpLHQobyxyKSx0KGksciksdChhLHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGMse2RpZmY6e3ZhbHVlOmMsZW51bWVyYWJsZTohMH0sb2JzZXJ2YWJsZURpZmY6e3ZhbHVlOmwsZW51bWVyYWJsZTohMH0sYXBwbHlEaWZmOnt2YWx1ZTpoLGVudW1lcmFibGU6ITB9LGFwcGx5Q2hhbmdlOnt2YWx1ZTpkLGVudW1lcmFibGU6ITB9LHJldmVydENoYW5nZTp7dmFsdWU6ZyxlbnVtZXJhYmxlOiEwfSxpc0NvbmZsaWN0Ont2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBqfSxlbnVtZXJhYmxlOiEwfSxub0NvbmZsaWN0Ont2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBDJiYoQy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UoKX0pLEM9bnVsbCksY30sZW51bWVyYWJsZTohMH19KTt2YXIgRj17RTp7Y29sb3I6XCIjMjE5NkYzXCIsdGV4dDpcIkNIQU5HRUQ6XCJ9LE46e2NvbG9yOlwiIzRDQUY1MFwiLHRleHQ6XCJBRERFRDpcIn0sRDp7Y29sb3I6XCIjRjQ0MzM2XCIsdGV4dDpcIkRFTEVURUQ6XCJ9LEE6e2NvbG9yOlwiIzIxOTZGM1wiLHRleHQ6XCJBUlJBWTpcIn19LEw9e2xldmVsOlwibG9nXCIsbG9nZ2VyOmNvbnNvbGUsbG9nRXJyb3JzOiEwLGNvbGxhcHNlZDp2b2lkIDAscHJlZGljYXRlOnZvaWQgMCxkdXJhdGlvbjohMSx0aW1lc3RhbXA6ITAsc3RhdGVUcmFuc2Zvcm1lcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sYWN0aW9uVHJhbnNmb3JtZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGVycm9yVHJhbnNmb3JtZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGNvbG9yczp7dGl0bGU6ZnVuY3Rpb24oKXtyZXR1cm5cImluaGVyaXRcIn0scHJldlN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuXCIjOUU5RTlFXCJ9LGFjdGlvbjpmdW5jdGlvbigpe3JldHVyblwiIzAzQTlGNFwifSxuZXh0U3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm5cIiM0Q0FGNTBcIn0sZXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm5cIiNGMjA0MDRcIn19LGRpZmY6ITEsZGlmZlByZWRpY2F0ZTp2b2lkIDAsdHJhbnNmb3JtZXI6dm9pZCAwfSxUPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHQ9ZS5kaXNwYXRjaCxyPWUuZ2V0U3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdHx8XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9TKCkoe2Rpc3BhdGNoOnQsZ2V0U3RhdGU6cn0pOnZvaWQgY29uc29sZS5lcnJvcihcIlxcbltyZWR1eC1sb2dnZXIgdjNdIEJSRUFLSU5HIENIQU5HRVxcbltyZWR1eC1sb2dnZXIgdjNdIFNpbmNlIDMuMC4wIHJlZHV4LWxvZ2dlciBleHBvcnRzIGJ5IGRlZmF1bHQgbG9nZ2VyIHdpdGggZGVmYXVsdCBzZXR0aW5ncy5cXG5bcmVkdXgtbG9nZ2VyIHYzXSBDaGFuZ2VcXG5bcmVkdXgtbG9nZ2VyIHYzXSBpbXBvcnQgY3JlYXRlTG9nZ2VyIGZyb20gJ3JlZHV4LWxvZ2dlcidcXG5bcmVkdXgtbG9nZ2VyIHYzXSB0b1xcbltyZWR1eC1sb2dnZXIgdjNdIGltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJ3JlZHV4LWxvZ2dlcidcXG5cIil9O2UuZGVmYXVsdHM9TCxlLmNyZWF0ZUxvZ2dlcj1TLGUubG9nZ2VyPVQsZS5kZWZhdWx0PVQsT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaz1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLHk9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsYmE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBjYShhLGIsZCxjLGUsZyxoLGYpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtkLGMsZSxnLGgsZl0sbT0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbbSsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIEIoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxkPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTA7YzxiO2MrKylkKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGQpfXZhciBDPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxEPXt9O1xuZnVuY3Rpb24gRShhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0IoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q312YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztrKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2U9YVtoXTt2YXIgZj1iK1QoZSxoKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QSYmYVtBXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxoPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGgrKyksZys9UyhlLGYsZCxjKTtlbHNlXCJvYmplY3RcIj09PWUmJihkPVwiXCIrYSxCKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZD9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpkLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixkKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsZCl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gZWEoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZmEoYSxiLGQpe3ZhciBjPWEucmVzdWx0LGU9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGMsZCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihOKGEpJiYoYT1kYShhLGUrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2QpKSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGQsYyxlKXt2YXIgZz1cIlwiO251bGwhPWQmJihnPShcIlwiK2QpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGUpO1UoYSxmYSxiKTtSKGIpfWZ1bmN0aW9uIFcoKXt2YXIgYT1JLmN1cnJlbnQ7bnVsbD09PWE/QihcIjMyMVwiKTp2b2lkIDA7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZCk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGQpO1UoYSxlYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtOKGEpP3ZvaWQgMDpCKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6YmEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6YWEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGQpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZCl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixkKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFN0cmljdE1vZGU6dCxTdXNwZW5zZTp6LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe251bGw9PT1hfHx2b2lkIDA9PT1hP0IoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGU9ayh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1cbmIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjguNlwiLFxudW5zdGFibGVfQ29uY3VycmVudE1vZGU6eCx1bnN0YWJsZV9Qcm9maWxlcjp1LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkksUmVhY3RDdXJyZW50T3duZXI6Sixhc3NpZ246a319LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCl7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2MsZCxlLGYsZyxoXSxrPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFtrKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24geChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGQ9MDtkPGI7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2JhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9YWE/dm9pZCAwOngoXCIyMjdcIik7ZnVuY3Rpb24gY2EoYSxiLGMsZCxlLGYsZyxoLGwpe3ZhciBrPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGspfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19XG52YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsbCl7ZGE9ITE7ZWE9bnVsbDtjYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxsKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgaz1lYTtkYT0hMTtlYT1udWxsfWVsc2UgeChcIjE5OFwiKSxrPXZvaWQgMDtmYXx8KGZhPSEwLGhhPWspfX12YXIgbGE9bnVsbCxtYT17fTtcbmZ1bmN0aW9uIG5hKCl7aWYobGEpZm9yKHZhciBhIGluIG1hKXt2YXIgYj1tYVthXSxjPWxhLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6eChcIjk2XCIsYSk7aWYoIW9hW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOngoXCI5N1wiLGEpO29hW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cGEuaGFzT3duUHJvcGVydHkoaCk/eChcIjk5XCIsaCk6dm9pZCAwO3BhW2hdPWY7dmFyIGw9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihsKXtmb3IoZSBpbiBsKWwuaGFzT3duUHJvcGVydHkoZSkmJnFhKGxbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhxYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOngoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiBxYShhLGIsYyl7cmFbYV0/eChcIjEwMFwiLGEpOnZvaWQgMDtyYVthXT1iO3NhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIG9hPVtdLHBhPXt9LHJhPXt9LHNhPXt9LHRhPW51bGwsdWE9bnVsbCx2YT1udWxsO2Z1bmN0aW9uIHdhKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD12YShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfWZ1bmN0aW9uIHhhKGEsYil7bnVsbD09Yj94KFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19XG52YXIgQmE9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oYSl7bGE/eChcIjEwMVwiKTp2b2lkIDA7bGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7bmEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO21hLmhhc093blByb3BlcnR5KGMpJiZtYVtjXT09PWR8fChtYVtjXT94KFwiMTAyXCIsYyk6dm9pZCAwLG1hW2NdPWQsYj0hMCl9YiYmbmEoKX19O1xuZnVuY3Rpb24gQ2EoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD10YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gRGEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEmJih5YShhLEFhKSx6YT94KFwiOTVcIik6dm9pZCAwLGZhKSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9dmFyIEVhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEZhPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrRWEsR2E9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitFYTtmdW5jdGlvbiBIYShhKXtpZihhW0ZhXSlyZXR1cm4gYVtGYV07Zm9yKDshYVtGYV07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGYV07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBJYShhKXthPWFbRmFdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9XG5mdW5jdGlvbiBKYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7eChcIjMzXCIpfWZ1bmN0aW9uIEthKGEpe3JldHVybiBhW0dhXXx8bnVsbH1mdW5jdGlvbiBMYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIE1hKGEsYixjKXtpZihiPUNhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBOYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPUxhKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylNYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU1hKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIE9hKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUNhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZPYShhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBRYShhKXt5YShhLE5hKX12YXIgUmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5kb2N1bWVudHx8IXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtmdW5jdGlvbiBTYShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYT17YW5pbWF0aW9uZW5kOlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2EoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYT17fSxWYT17fTtcblJhJiYoVmE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGEuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGEuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGEuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGEudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYShhKXtpZihVYVthXSlyZXR1cm4gVWFbYV07aWYoIVRhW2FdKXJldHVybiBhO3ZhciBiPVRhW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZhKXJldHVybiBVYVthXT1iW2NdO3JldHVybiBhfVxudmFyIFhhPVdhKFwiYW5pbWF0aW9uZW5kXCIpLFlhPVdhKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFphPVdhKFwiYW5pbWF0aW9uc3RhcnRcIiksJGE9V2EoXCJ0cmFuc2l0aW9uZW5kXCIpLGFiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYj1udWxsLGNiPW51bGwsZGI9bnVsbDtcbmZ1bmN0aW9uIGViKCl7aWYoZGIpcmV0dXJuIGRiO3ZhciBhLGI9Y2IsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gYmI/YmIudmFsdWU6YmIudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gZGI9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBmYigpe3JldHVybiEwfWZ1bmN0aW9uIGdiKCl7cmV0dXJuITF9XG5mdW5jdGlvbiB5KGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9mYjpnYjt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWdiO3JldHVybiB0aGlzfVxubih5LnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWZiKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWZiKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWZifSxpc1BlcnNpc3RlbnQ6Z2IsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Z2I7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTt5LkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbnkuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7aGIoYyk7cmV0dXJuIGN9O2hiKHkpO2Z1bmN0aW9uIGliKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIGpiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDp4KFwiMjc5XCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1cbmZ1bmN0aW9uIGhiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWliO2EucmVsZWFzZT1qYn12YXIga2I9eS5leHRlbmQoe2RhdGE6bnVsbH0pLGxiPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxtYj1bOSwxMywyNywzMl0sbmI9UmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LG9iPW51bGw7UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKG9iPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcGI9UmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFvYixxYj1SYSYmKCFuYnx8b2ImJjg8b2ImJjExPj1vYikscmI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksc2I9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sdGI9ITE7XG5mdW5jdGlvbiB1YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW1iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gdmIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgd2I9ITE7ZnVuY3Rpb24geGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHZiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt0Yj0hMDtyZXR1cm4gcmI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09cmImJnRiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHliKGEsYil7aWYod2IpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IW5iJiZ1YihhLGIpPyhhPWViKCksZGI9Y2I9YmI9bnVsbCx3Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gcWImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHpiPXtldmVudFR5cGVzOnNiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihuYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXNiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXNiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT1zYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2Ugd2I/dWIoYSxjKSYmKGU9c2IuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1zYi5jb21wb3NpdGlvblN0YXJ0KTtlPyhxYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih3Ynx8ZSE9PXNiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXNiLmNvbXBvc2l0aW9uRW5kJiZ3YiYmKGY9ZWIoKSk6KGJiPWQsY2I9XCJ2YWx1ZVwiaW4gYmI/YmIudmFsdWU6YmIudGV4dENvbnRlbnQsd2I9XG4hMCkpLGU9a2IuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9dmIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFFhKGUpLGY9ZSk6Zj1udWxsOyhhPXBiP3hiKGEsYyk6eWIoYSxjKSk/KGI9bGIuZ2V0UG9vbGVkKHNiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxRYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxBYj1udWxsLEJiPW51bGwsQ2I9bnVsbDtmdW5jdGlvbiBEYihhKXtpZihhPXVhKGEpKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQWI/eChcIjI4MFwiKTp2b2lkIDA7dmFyIGI9dGEoYS5zdGF0ZU5vZGUpO0FiKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gRWIoYSl7QmI/Q2I/Q2IucHVzaChhKTpDYj1bYV06QmI9YX1mdW5jdGlvbiBGYigpe2lmKEJiKXt2YXIgYT1CYixiPUNiO0NiPUJiPW51bGw7RGIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKURiKGJbYV0pfX1cbmZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPSExO2Z1bmN0aW9uIEtiKGEsYil7aWYoSmIpcmV0dXJuIGEoYik7SmI9ITA7dHJ5e3JldHVybiBHYihhLGIpfWZpbmFsbHl7aWYoSmI9ITEsbnVsbCE9PUJifHxudWxsIT09Q2IpSWIoKSxGYigpfX12YXIgTGI9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gTWIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFMYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG5mdW5jdGlvbiBOYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gT2IoYSl7aWYoIVJhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIFBiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBRYihhKXt2YXIgYj1QYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gUmIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVFiKGEpKX1mdW5jdGlvbiBTYihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9UGIoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX12YXIgVGI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7VGIuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoVGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7XG52YXIgVWI9L14oLiopW1xcXFxcXC9dLyx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsVmI9ej9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxXYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsWGI9ej9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsWWI9ej9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsWmI9ej9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsJGI9ej9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksYWM9ej9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxiYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsY2M9ej9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsZGM9ej9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsZWM9ej9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGZjPXo/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsZ2M9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGhjKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1nYyYmYVtnY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGljKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYmM6cmV0dXJuXCJDb25jdXJyZW50TW9kZVwiO2Nhc2UgWGI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgV2I6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIFpiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIFliOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgZGM6cmV0dXJuXCJTdXNwZW5zZVwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBhYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlICRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgY2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcblwiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIGVjOnJldHVybiBpYyhhLnR5cGUpO2Nhc2UgZmM6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBpYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBqYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9aWMoYS50eXBlKTtjPW51bGw7ZCYmKGM9aWMoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShVYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIGtjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG1jPXt9LG5jPXt9O1xuZnVuY3Rpb24gb2MoYSl7aWYobGMuY2FsbChuYyxhKSlyZXR1cm4hMDtpZihsYy5jYWxsKG1jLGEpKXJldHVybiExO2lmKGtjLnRlc3QoYSkpcmV0dXJuIG5jW2FdPSEwO21jW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBDKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBDKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgcmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYyxcbnNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYyxzYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYyxzYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuZnVuY3Rpb24gdGMoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwocWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29jKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB1YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gdmMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gd2MoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9dWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiB4YyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiB5YyhhLGIpe3hjKGEsYik7dmFyIGM9dWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/emMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmemMoYSxiLnR5cGUsdWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBBYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiB6YyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIEJjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIENjKGEsYixjKXthPXkuZ2V0UG9vbGVkKEJjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RWIoYyk7UWEoYSk7cmV0dXJuIGF9dmFyIERjPW51bGwsRWM9bnVsbDtmdW5jdGlvbiBGYyhhKXtEYShhKX1cbmZ1bmN0aW9uIEdjKGEpe3ZhciBiPUphKGEpO2lmKFNiKGIpKXJldHVybiBhfWZ1bmN0aW9uIEhjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEljPSExO1JhJiYoSWM9T2IoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gSmMoKXtEYyYmKERjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEtjKSxFYz1EYz1udWxsKX1mdW5jdGlvbiBLYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmR2MoRWMpJiYoYT1DYyhFYyxhLE5iKGEpKSxLYihGYyxhKSl9ZnVuY3Rpb24gTGMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEpjKCksRGM9YixFYz1jLERjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEtjKSk6XCJibHVyXCI9PT1hJiZKYygpfWZ1bmN0aW9uIE1jKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIEdjKEVjKX1cbmZ1bmN0aW9uIE5jKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gR2MoYil9ZnVuY3Rpb24gT2MoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gR2MoYil9XG52YXIgUGM9e2V2ZW50VHlwZXM6QmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpJYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/SmEoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPUhjOk1iKGUpP0ljP2Y9T2M6KGY9TWMsZz1MYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9TmMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIENjKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmemMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sUWM9eS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFJjPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFNjKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9UmNbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBUYygpe3JldHVybiBTY31cbnZhciBVYz0wLFZjPTAsV2M9ITEsWGM9ITEsWWM9UWMuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVVjO1VjPWEuc2NyZWVuWDtyZXR1cm4gV2M/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihXYz0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVZjO1ZjPWEuc2NyZWVuWTtyZXR1cm4gWGM/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihYYz0hMCwwKX19KSxaYz1ZYy5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksJGM9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGFkPXtldmVudFR5cGVzOiRjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0hhKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsbD12b2lkIDAsaz12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1ZYyxoPSRjLm1vdXNlTGVhdmUsbD0kYy5tb3VzZUVudGVyLGs9XCJtb3VzZVwiO1xuZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1aYyxoPSRjLnBvaW50ZXJMZWF2ZSxsPSRjLnBvaW50ZXJFbnRlcixrPVwicG9pbnRlclwiO3ZhciBtPW51bGw9PWY/ZTpKYShmKTtlPW51bGw9PWI/ZTpKYShiKTthPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2EudHlwZT1rK1wibGVhdmVcIjthLnRhcmdldD1tO2EucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQobCxiLGMsZCk7Yy50eXBlPWsrXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PW07ZD1iO2lmKGYmJmQpYTp7Yj1mO2U9ZDtrPTA7Zm9yKGc9YjtnO2c9TGEoZykpaysrO2c9MDtmb3IobD1lO2w7bD1MYShsKSlnKys7Zm9yKDswPGstZzspYj1MYShiKSxrLS07Zm9yKDswPGctazspZT1MYShlKSxnLS07Zm9yKDtrLS07KXtpZihiPT09ZXx8Yj09PWUuYWx0ZXJuYXRlKWJyZWFrIGE7Yj1MYShiKTtlPUxhKGUpfWI9bnVsbH1lbHNlIGI9bnVsbDtlPWI7Zm9yKGI9W107ZiYmZiE9PWU7KXtrPVxuZi5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2IucHVzaChmKTtmPUxhKGYpfWZvcihmPVtdO2QmJmQhPT1lOyl7az1kLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Zi5wdXNoKGQpO2Q9TGEoZCl9Zm9yKGQ9MDtkPGIubGVuZ3RoO2QrKylPYShiW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihkPWYubGVuZ3RoOzA8ZC0tOylPYShmW2RdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm5bYSxjXX19O2Z1bmN0aW9uIGJkKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgY2Q9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGRkKGEsYil7aWYoYmQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFjZC5jYWxsKGIsY1tkXSl8fCFiZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGVkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGZkKGEpezIhPT1lZChhKT94KFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGdkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWVkKGEpLDM9PT1iP3goXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGZkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGZkKGUpLGI7Zz1nLnNpYmxpbmd9eChcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOngoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD94KFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/eChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBoZChhKXthPWdkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIGlkPXkuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxqZD15LmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLGtkPVFjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gbGQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgbWQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LG5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxvZD1RYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9bWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9bGQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP25kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9sZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9sZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHBkPVljLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxxZD1RYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUY30pLHJkPXkuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHNkPVljLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksdGQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbWGEsXCJhbmltYXRpb25FbmRcIl0sW1lhLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtaYSxcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sWyRhLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0sdWQ9e30sdmQ9e307ZnVuY3Rpb24gd2QoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTt1ZFthXT1iO3ZkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxcbltcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7d2QoYSwhMCl9KTt0ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3dkKGEsITEpfSk7XG52YXIgeGQ9e2V2ZW50VHlwZXM6dWQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9dmRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09bGQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPW9kO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1rZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVljO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG5wZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXFkO2JyZWFrO2Nhc2UgWGE6Y2FzZSBZYTpjYXNlIFphOmE9aWQ7YnJlYWs7Y2FzZSAkYTphPXJkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPVFjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9c2Q7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1qZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVpjO2JyZWFrO2RlZmF1bHQ6YT15fWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7UWEoYik7cmV0dXJuIGJ9fSx5ZD14ZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG56ZD1bXTtmdW5jdGlvbiBBZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1IYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1OYihhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9bnVsbCxoPTA7aDxvYS5sZW5ndGg7aCsrKXt2YXIgbD1vYVtoXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoZz14YShnLGwpKX1EYShnKX19dmFyIEJkPSEwO1xuZnVuY3Rpb24gRShhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPSh5ZChhKT9DZDpEZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfWZ1bmN0aW9uIEVkKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KHlkKGEpP0NkOkRkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gQ2QoYSxiKXtIYihEZCxhLGIpfVxuZnVuY3Rpb24gRGQoYSxiKXtpZihCZCl7dmFyIGM9TmIoYik7Yz1IYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWVkKGMpfHwoYz1udWxsKTtpZih6ZC5sZW5ndGgpe3ZhciBkPXpkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e0tiKEFkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+emQubGVuZ3RoJiZ6ZC5wdXNoKGEpfX19dmFyIEZkPXt9LEdkPTAsSGQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuZnVuY3Rpb24gSWQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsSGQpfHwoYVtIZF09R2QrKyxGZFthW0hkXV09e30pO3JldHVybiBGZFthW0hkXV19ZnVuY3Rpb24gSmQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIEtkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExkKGEsYil7dmFyIGM9S2QoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2QoYyl9fWZ1bmN0aW9uIE1kKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWQoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmQoKXtmb3IodmFyIGE9d2luZG93LGI9SmQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9SmQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2QoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIFBkKCl7dmFyIGE9TmQoKTtpZihPZChhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yj0oYj1hLm93bmVyRG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGM9Yi5nZXRTZWxlY3Rpb24mJmIuZ2V0U2VsZWN0aW9uKCk7aWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaChBKXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGc9LTEsaD0tMSxsPTAsaz0wLG09YSxwPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdDs7KXttIT09Ynx8MCE9PWQmJjMhPT1tLm5vZGVUeXBlfHwoZz1mK2QpO20hPT1lfHwwIT09YyYmMyE9PW0ubm9kZVR5cGV8fChoPWYrYyk7Mz09PW0ubm9kZVR5cGUmJihmKz1tLm5vZGVWYWx1ZS5sZW5ndGgpO1xuaWYobnVsbD09PSh0PW0uZmlyc3RDaGlsZCkpYnJlYWs7cD1tO209dH1mb3IoOzspe2lmKG09PT1hKWJyZWFrIGI7cD09PWImJisrbD09PWQmJihnPWYpO3A9PT1lJiYrK2s9PT1jJiYoaD1mKTtpZihudWxsIT09KHQ9bS5uZXh0U2libGluZykpYnJlYWs7bT1wO3A9bS5wYXJlbnROb2RlfW09dH1iPS0xPT09Z3x8LTE9PT1oP251bGw6e3N0YXJ0OmcsZW5kOmh9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO3JldHVybntmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9fVxuZnVuY3Rpb24gUWQoYSl7dmFyIGI9TmQoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJk1kKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZPZChjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1MZChjLGYpO3ZhciBnPUxkKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUmQ9UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxTZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sVGQ9bnVsbCxVZD1udWxsLFZkPW51bGwsV2Q9ITE7XG5mdW5jdGlvbiBYZChhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKFdkfHxudWxsPT1UZHx8VGQhPT1KZChjKSlyZXR1cm4gbnVsbDtjPVRkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJk9kKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIFZkJiZkZChWZCxjKT9udWxsOihWZD1jLGE9eS5nZXRQb29sZWQoU2Quc2VsZWN0LFVkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9VGQsUWEoYSksYSl9XG52YXIgWWQ9e2V2ZW50VHlwZXM6U2QsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9SWQoZSk7Zj1zYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP0phKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoTWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpVGQ9ZSxVZD1iLFZkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpWZD1VZD1UZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpXZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIFdkPSExLFhkKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFJkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gWGQoYyxkKX1yZXR1cm4gbnVsbH19O0JhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7dGE9S2E7dWE9SWE7dmE9SmE7QmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjp4ZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46YWQsQ2hhbmdlRXZlbnRQbHVnaW46UGMsU2VsZWN0RXZlbnRQbHVnaW46WWQsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjp6Yn0pO2Z1bmN0aW9uIFpkKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gJGQoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1aZChiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gYWUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3VjKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBiZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/eChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBjZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP3goXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDp4KFwiOTNcIiksYj1iWzBdKSxjPWIpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTp1YyhjKX19XG5mdW5jdGlvbiBkZShhLGIpe3ZhciBjPXVjKGIudmFsdWUpLGQ9dWMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBlZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgZmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gZ2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBoZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/Z2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgaWU9dm9pZCAwLGplPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWZlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle2llPWllfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2llLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPWllLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIGtlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgbGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sbWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGxlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe21lLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7bGVbYl09bGVbYV19KX0pO2Z1bmN0aW9uIG5lKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxsZS5oYXNPd25Qcm9wZXJ0eShhKSYmbGVbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gb2UoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bmUoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgcGU9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHFlKGEsYil7YiYmKHBlW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD94KFwiMTM3XCIsYSxcIlwiKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP3goXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6eChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/eChcIjYyXCIsXCJcIik6dm9pZCAwKX1cbmZ1bmN0aW9uIHJlKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1cbmZ1bmN0aW9uIHNlKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPUlkKGEpO2I9c2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07aWYoIWMuaGFzT3duUHJvcGVydHkoZSl8fCFjW2VdKXtzd2l0Y2goZSl7Y2FzZSBcInNjcm9sbFwiOkVkKFwic2Nyb2xsXCIsYSk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpFZChcImZvY3VzXCIsYSk7RWQoXCJibHVyXCIsYSk7Yy5ibHVyPSEwO2MuZm9jdXM9ITA7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOk9iKGUpJiZFZChlLGEpO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1hYi5pbmRleE9mKGUpJiZFKGUsYSl9Y1tlXT0hMH19fWZ1bmN0aW9uIHRlKCl7fXZhciB1ZT1udWxsLHZlPW51bGw7XG5mdW5jdGlvbiB3ZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9ZnVuY3Rpb24geGUoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIHllPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHplPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxBZT1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssQmU9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaztcbmZ1bmN0aW9uIENlKGEsYixjLGQsZSl7YVtHYV09ZTtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmeGMoYSxlKTtyZShjLGQpO2Q9cmUoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saD1iW2YrMV07XCJzdHlsZVwiPT09Zz9vZShhLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/amUoYSxoKTpcImNoaWxkcmVuXCI9PT1nP2tlKGEsaCk6dGMoYSxnLGgsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOnljKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZGUoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9hZShhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/YWUoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsXG4hMCk6YWUoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fWZ1bmN0aW9uIERlKGEpe2ZvcihhPWEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIEZlPVtdLEdlPS0xO2Z1bmN0aW9uIEYoYSl7MD5HZXx8KGEuY3VycmVudD1GZVtHZV0sRmVbR2VdPW51bGwsR2UtLSl9ZnVuY3Rpb24gRyhhLGIpe0dlKys7RmVbR2VdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgSGU9e30sSD17Y3VycmVudDpIZX0sST17Y3VycmVudDohMX0sSWU9SGU7XG5mdW5jdGlvbiBKZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEhlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEooYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBLZShhKXtGKEksYSk7RihILGEpfWZ1bmN0aW9uIExlKGEpe0YoSSxhKTtGKEgsYSl9XG5mdW5jdGlvbiBNZShhLGIsYyl7SC5jdXJyZW50IT09SGU/eChcIjE2OFwiKTp2b2lkIDA7RyhILGIsYSk7RyhJLGMsYSl9ZnVuY3Rpb24gTmUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWUgaW4gYT92b2lkIDA6eChcIjEwOFwiLGljKGIpfHxcIlVua25vd25cIixlKTtyZXR1cm4gbih7fSxjLGQpfWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8SGU7SWU9SC5jdXJyZW50O0coSCxiLGEpO0coSSxJLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBQZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7ZD92b2lkIDA6eChcIjE2OVwiKTtjPyhiPU5lKGEsYixJZSksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEYoSSxhKSxGKEgsYSksRyhILGIsYSkpOkYoSSxhKTtHKEksYyxhKX12YXIgUWU9bnVsbCxSZT1udWxsO2Z1bmN0aW9uIFNlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBUZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtRZT1TZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7UmU9U2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFVlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5jb250ZXh0RGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEsoYSxiLGMsZCl7cmV0dXJuIG5ldyBVZShhLGIsYyxkKX1cbmZ1bmN0aW9uIFZlKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gV2UoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIFZlKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1jYylyZXR1cm4gMTE7aWYoYT09PWVjKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFhlKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9SyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yy5jb250ZXh0RGVwZW5kZW5jaWVzPWEuY29udGV4dERlcGVuZGVuY2llcztjLnNpYmxpbmc9YS5zaWJsaW5nO1xuYy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gWWUoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKVZlKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIFhiOnJldHVybiBaZShjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGJjOnJldHVybiAkZShjLGV8MyxmLGIpO2Nhc2UgWWI6cmV0dXJuICRlKGMsZXwyLGYsYik7Y2FzZSBaYjpyZXR1cm4gYT1LKDEyLGMsYixlfDQpLGEuZWxlbWVudFR5cGU9WmIsYS50eXBlPVpiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgZGM6cmV0dXJuIGE9SygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1kYyxhLnR5cGU9ZGMsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlICRiOmc9MTA7YnJlYWsgYTtjYXNlIGFjOmc9OTticmVhayBhO2Nhc2UgY2M6Zz0xMTticmVhayBhO2Nhc2UgZWM6Zz1cbjE0O2JyZWFrIGE7Y2FzZSBmYzpnPTE2O2Q9bnVsbDticmVhayBhfXgoXCIxMzBcIixudWxsPT1hP2E6dHlwZW9mIGEsXCJcIil9Yj1LKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWmUoYSxiLGMsZCl7YT1LKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiAkZShhLGIsYyxkKXthPUsoOCxhLGQsYik7Yj0wPT09KGImMSk/WWI6YmM7YS5lbGVtZW50VHlwZT1iO2EudHlwZT1iO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBhZihhLGIsYyl7YT1LKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIGJmKGEsYixjKXtiPUsoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9ZnVuY3Rpb24gY2YoYSxiKXthLmRpZEVycm9yPSExO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTswPT09Yz9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT1iOmM8Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YjphLmxhdGVzdFBlbmRpbmdUaW1lPmImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWIpO2RmKGIsYSl9XG5mdW5jdGlvbiBlZihhLGIpe2EuZGlkRXJyb3I9ITE7aWYoMD09PWIpYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTA7ZWxzZXtiPGEubGF0ZXN0UGluZ2VkVGltZSYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmxhdGVzdFBlbmRpbmdUaW1lOzAhPT1jJiYoYz5iP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPTA6YS5lYXJsaWVzdFBlbmRpbmdUaW1lPmImJihhLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZSkpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7MD09PWM/Y2YoYSxiKTpiPGEubGF0ZXN0U3VzcGVuZGVkVGltZT8oYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MCxjZihhLGIpKTpcbmI+YyYmY2YoYSxiKX1kZigwLGEpfWZ1bmN0aW9uIGZmKGEsYil7YS5kaWRFcnJvcj0hMTthLmxhdGVzdFBpbmdlZFRpbWU+PWImJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lLGQ9YS5sYXRlc3RQZW5kaW5nVGltZTtjPT09Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9ZD09PWI/YS5sYXRlc3RQZW5kaW5nVGltZT0wOmQ6ZD09PWImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWMpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7ZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7MD09PWM/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YS5sYXRlc3RTdXNwZW5kZWRUaW1lPWI6YzxiP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWI6ZD5iJiYoYS5sYXRlc3RTdXNwZW5kZWRUaW1lPWIpO2RmKGIsYSl9XG5mdW5jdGlvbiBnZihhLGIpe3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTthPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2M+YiYmKGI9Yyk7YT5iJiYoYj1hKTtyZXR1cm4gYn1mdW5jdGlvbiBkZihhLGIpe3ZhciBjPWIuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9Yi5sYXRlc3RTdXNwZW5kZWRUaW1lLGU9Yi5lYXJsaWVzdFBlbmRpbmdUaW1lLGY9Yi5sYXRlc3RQaW5nZWRUaW1lO2U9MCE9PWU/ZTpmOzA9PT1lJiYoMD09PWF8fGQ8YSkmJihlPWQpO2E9ZTswIT09YSYmYz5hJiYoYT1jKTtiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWU7Yi5leHBpcmF0aW9uVGltZT1hfWZ1bmN0aW9uIEwoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9XG5mdW5jdGlvbiBoZihhKXt2YXIgYj1hLl9yZXN1bHQ7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBiO2Nhc2UgMjp0aHJvdyBiO2Nhc2UgMDp0aHJvdyBiO2RlZmF1bHQ6YS5fc3RhdHVzPTA7Yj1hLl9jdG9yO2I9YigpO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSk7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBhLl9yZXN1bHQ7Y2FzZSAyOnRocm93IGEuX3Jlc3VsdDt9YS5fcmVzdWx0PWI7dGhyb3cgYjt9fXZhciBqZj0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIGtmKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIHRmPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09ZWQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bGYoKTtkPW1mKGQsYSk7dmFyIGU9bmYoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO29mKCk7cGYoYSxlKTtxZihhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1sZigpO2Q9bWYoZCxhKTt2YXIgZT1uZihkKTtlLnRhZz1yZjtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7b2YoKTtwZihhLGUpO3FmKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPWxmKCk7Yz1tZihjLGEpO3ZhciBkPW5mKGMpO2QudGFnPVxuc2Y7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO29mKCk7cGYoYSxkKTtxZihhLGMpfX07ZnVuY3Rpb24gdWYoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZGQoYyxkKXx8IWRkKGUsZik6ITB9XG5mdW5jdGlvbiB2ZihhLGIsYyl7dmFyIGQ9ITEsZT1IZTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1NKGYpOihlPUooYik/SWU6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/SmUoYSxlKTpIZSk7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPXRmO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHdmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZ0Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHhmKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1NKGYpOihmPUooYik/SWU6SC5jdXJyZW50LGUuY29udGV4dD1KZShhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJih5ZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoa2YoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmdGYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoeWYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciB6Zj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gQWYoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMSE9PWMudGFnP3goXCIzMDlcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOngoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PWpmJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP3goXCIyODRcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDp4KFwiMjkwXCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBCZihhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmeChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gQ2YoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1YZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPWFmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1BZihhLGIsYyksZC5yZXR1cm49YSxkO2Q9WWUoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9QWYoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1iZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1aZShjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9YWYoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGM9WWUoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9QWYoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIFdiOnJldHVybiBiPWJmKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZih6ZihiKXx8XG5oYyhiKSlyZXR1cm4gYj1aZShiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtCZihhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHQoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1YYj9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6bChhLGIsYyxkKTpudWxsO2Nhc2UgV2I6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGx9aWYoemYoYyl8fGhjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtCZihhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEEoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09WGI/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTpsKGIsYSxkLGUpO2Nhc2UgV2I6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSl9aWYoemYoZCl8fGhjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtCZihiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHYoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHE9Zyx1PWc9MCxCPW51bGw7bnVsbCE9PXEmJnU8aC5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KEI9cSxxPW51bGwpOkI9cS5zaWJsaW5nO3ZhciB3PXQoZSxxLGhbdV0sayk7aWYobnVsbD09PXcpe251bGw9PT1xJiYocT1CKTticmVha31hJiZcbnEmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHEpO2c9Zih3LGcsdSk7bnVsbD09PW0/bD13Om0uc2libGluZz13O209dztxPUJ9aWYodT09PWgubGVuZ3RoKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDt1PGgubGVuZ3RoO3UrKylpZihxPXAoZSxoW3VdLGspKWc9ZihxLGcsdSksbnVsbD09PW0/bD1xOm0uc2libGluZz1xLG09cTtyZXR1cm4gbH1mb3IocT1kKGUscSk7dTxoLmxlbmd0aDt1KyspaWYoQj1BKHEsZSx1LGhbdV0saykpYSYmbnVsbCE9PUIuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09Qi5rZXk/dTpCLmtleSksZz1mKEIsZyx1KSxudWxsPT09bT9sPUI6bS5zaWJsaW5nPUIsbT1CO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gUihlLGcsaCxrKXt2YXIgbD1oYyhoKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgbD94KFwiMTUwXCIpOnZvaWQgMDtoPWwuY2FsbChoKTtudWxsPT1oP3goXCIxNTFcIik6dm9pZCAwO1xuZm9yKHZhciBtPWw9bnVsbCxxPWcsdT1nPTAsQj1udWxsLHc9aC5uZXh0KCk7bnVsbCE9PXEmJiF3LmRvbmU7dSsrLHc9aC5uZXh0KCkpe3EuaW5kZXg+dT8oQj1xLHE9bnVsbCk6Qj1xLnNpYmxpbmc7dmFyIHY9dChlLHEsdy52YWx1ZSxrKTtpZihudWxsPT09dil7cXx8KHE9Qik7YnJlYWt9YSYmcSYmbnVsbD09PXYuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKHYsZyx1KTtudWxsPT09bT9sPXY6bS5zaWJsaW5nPXY7bT12O3E9Qn1pZih3LmRvbmUpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoOyF3LmRvbmU7dSsrLHc9aC5uZXh0KCkpdz1wKGUsdy52YWx1ZSxrKSxudWxsIT09dyYmKGc9Zih3LGcsdSksbnVsbD09PW0/bD13Om0uc2libGluZz13LG09dyk7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpOyF3LmRvbmU7dSsrLHc9aC5uZXh0KCkpdz1BKHEsZSx1LHcudmFsdWUsayksbnVsbCE9PXcmJihhJiZudWxsIT09dy5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT13LmtleT91Olxudy5rZXkpLGc9Zih3LGcsdSksbnVsbD09PW0/bD13Om0uc2libGluZz13LG09dyk7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09WGImJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgVmI6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKWlmKDc9PT1rLnRhZz9mLnR5cGU9PT1YYjprLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1YYj9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9QWYoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1cbmsuc2libGluZ31mLnR5cGU9PT1YYj8oZD1aZShmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9WWUoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9QWYoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIFdiOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9YmYoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XG5cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPWFmKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKHpmKGYpKXJldHVybiB2KGEsZCxmLGgpO2lmKGhjKGYpKXJldHVybiBSKGEsZCxmLGgpO2wmJkJmKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6aD1hLnR5cGUseChcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIERmPUNmKCEwKSxFZj1DZighMSksRmY9e30sTj17Y3VycmVudDpGZn0sR2Y9e2N1cnJlbnQ6RmZ9LEhmPXtjdXJyZW50OkZmfTtmdW5jdGlvbiBJZihhKXthPT09RmY/eChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZihhLGIpe0coSGYsYixhKTtHKEdmLGEsYSk7RyhOLEZmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmhlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1oZShiLGMpfUYoTixhKTtHKE4sYixhKX1mdW5jdGlvbiBLZihhKXtGKE4sYSk7RihHZixhKTtGKEhmLGEpfWZ1bmN0aW9uIExmKGEpe0lmKEhmLmN1cnJlbnQpO3ZhciBiPUlmKE4uY3VycmVudCk7dmFyIGM9aGUoYixhLnR5cGUpO2IhPT1jJiYoRyhHZixhLGEpLEcoTixjLGEpKX1mdW5jdGlvbiBNZihhKXtHZi5jdXJyZW50PT09YSYmKEYoTixhKSxGKEdmLGEpKX1cbnZhciBOZj0wLE9mPTIsUGY9NCxRZj04LFJmPTE2LFNmPTMyLFRmPTY0LFVmPTEyOCxWZj1UYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFdmPTAsWGY9bnVsbCxPPW51bGwsUD1udWxsLFlmPW51bGwsUT1udWxsLFpmPW51bGwsJGY9MCxhZz1udWxsLGJnPTAsY2c9ITEsZGc9bnVsbCxlZz0wO2Z1bmN0aW9uIGZnKCl7eChcIjMyMVwiKX1mdW5jdGlvbiBnZyhhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFiZChhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gaGcoYSxiLGMsZCxlLGYpe1dmPWY7WGY9YjtQPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO1ZmLmN1cnJlbnQ9bnVsbD09PVA/aWc6amc7Yj1jKGQsZSk7aWYoY2cpe2RvIGNnPSExLGVnKz0xLFA9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGwsWmY9WWYsYWc9UT1PPW51bGwsVmYuY3VycmVudD1qZyxiPWMoZCxlKTt3aGlsZShjZyk7ZGc9bnVsbDtlZz0wfVZmLmN1cnJlbnQ9a2c7YT1YZjthLm1lbW9pemVkU3RhdGU9WWY7YS5leHBpcmF0aW9uVGltZT0kZjthLnVwZGF0ZVF1ZXVlPWFnO2EuZWZmZWN0VGFnfD1iZzthPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O1dmPTA7WmY9UT1ZZj1QPU89WGY9bnVsbDskZj0wO2FnPW51bGw7Ymc9MDthP3goXCIzMDBcIik6dm9pZCAwO3JldHVybiBifWZ1bmN0aW9uIGxnKCl7VmYuY3VycmVudD1rZztXZj0wO1pmPVE9WWY9UD1PPVhmPW51bGw7JGY9MDthZz1udWxsO2JnPTA7Y2c9ITE7ZGc9bnVsbDtlZz0wfVxuZnVuY3Rpb24gbWcoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLHF1ZXVlOm51bGwsYmFzZVVwZGF0ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVE/WWY9UT1hOlE9US5uZXh0PWE7cmV0dXJuIFF9ZnVuY3Rpb24gbmcoKXtpZihudWxsIT09WmYpUT1aZixaZj1RLm5leHQsTz1QLFA9bnVsbCE9PU8/Ty5uZXh0Om51bGw7ZWxzZXtudWxsPT09UD94KFwiMzEwXCIpOnZvaWQgMDtPPVA7dmFyIGE9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxxdWV1ZTpPLnF1ZXVlLGJhc2VVcGRhdGU6Ty5iYXNlVXBkYXRlLG5leHQ6bnVsbH07UT1udWxsPT09UT9ZZj1hOlEubmV4dD1hO1A9Ty5uZXh0fXJldHVybiBRfWZ1bmN0aW9uIG9nKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gcGcoYSl7dmFyIGI9bmcoKSxjPWIucXVldWU7bnVsbD09PWM/eChcIjMxMVwiKTp2b2lkIDA7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7aWYoMDxlZyl7dmFyIGQ9Yy5kaXNwYXRjaDtpZihudWxsIT09ZGcpe3ZhciBlPWRnLmdldChjKTtpZih2b2lkIDAhPT1lKXtkZy5kZWxldGUoYyk7dmFyIGY9Yi5tZW1vaXplZFN0YXRlO2RvIGY9YShmLGUuYWN0aW9uKSxlPWUubmV4dDt3aGlsZShudWxsIT09ZSk7YmQoZixiLm1lbW9pemVkU3RhdGUpfHwocWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT09PWMubGFzdCYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9ZjtyZXR1cm5bZixkXX19cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxkXX1kPWMubGFzdDt2YXIgZz1iLmJhc2VVcGRhdGU7Zj1iLmJhc2VTdGF0ZTtudWxsIT09Zz8obnVsbCE9PWQmJihkLm5leHQ9bnVsbCksZD1nLm5leHQpOmQ9bnVsbCE9PWQ/ZC5uZXh0Om51bGw7aWYobnVsbCE9PVxuZCl7dmFyIGg9ZT1udWxsLGw9ZCxrPSExO2Rve3ZhciBtPWwuZXhwaXJhdGlvblRpbWU7bTxXZj8oa3x8KGs9ITAsaD1nLGU9ZiksbT4kZiYmKCRmPW0pKTpmPWwuZWFnZXJSZWR1Y2VyPT09YT9sLmVhZ2VyU3RhdGU6YShmLGwuYWN0aW9uKTtnPWw7bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1kKTtrfHwoaD1nLGU9Zik7YmQoZixiLm1lbW9pemVkU3RhdGUpfHwocWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1oO2IuYmFzZVN0YXRlPWU7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiByZyhhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07bnVsbD09PWFnPyhhZz17bGFzdEVmZmVjdDpudWxsfSxhZy5sYXN0RWZmZWN0PWEubmV4dD1hKTooYj1hZy5sYXN0RWZmZWN0LG51bGw9PT1iP2FnLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGM9Yi5uZXh0LGIubmV4dD1hLGEubmV4dD1jLGFnLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIHNnKGEsYixjLGQpe3ZhciBlPW1nKCk7Ymd8PWE7ZS5tZW1vaXplZFN0YXRlPXJnKGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdGcoYSxiLGMsZCl7dmFyIGU9bmcoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZnZyhkLGcuZGVwcykpe3JnKE5mLGMsZixkKTtyZXR1cm59fWJnfD1hO2UubWVtb2l6ZWRTdGF0ZT1yZyhiLGMsZixkKX1mdW5jdGlvbiB1ZyhhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHZnKCl7fVxuZnVuY3Rpb24gd2coYSxiLGMpezI1PmVnP3ZvaWQgMDp4KFwiMzAxXCIpO3ZhciBkPWEuYWx0ZXJuYXRlO2lmKGE9PT1YZnx8bnVsbCE9PWQmJmQ9PT1YZilpZihjZz0hMCxhPXtleHBpcmF0aW9uVGltZTpXZixhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxudWxsPT09ZGcmJihkZz1uZXcgTWFwKSxjPWRnLmdldChiKSx2b2lkIDA9PT1jKWRnLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX1lbHNle29mKCk7dmFyIGU9bGYoKTtlPW1mKGUsYSk7dmFyIGY9e2V4cGlyYXRpb25UaW1lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLmxhc3Q7aWYobnVsbD09PWcpZi5uZXh0PWY7ZWxzZXt2YXIgaD1nLm5leHQ7bnVsbCE9PWgmJihmLm5leHQ9aCk7Zy5uZXh0PWZ9Yi5sYXN0PWY7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09XG5kfHwwPT09ZC5leHBpcmF0aW9uVGltZSkmJihkPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBsPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1kKGwsYyk7Zi5lYWdlclJlZHVjZXI9ZDtmLmVhZ2VyU3RhdGU9aztpZihiZChrLGwpKXJldHVybn1jYXRjaChtKXt9ZmluYWxseXt9cWYoYSxlKX19XG52YXIga2c9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZmcsdXNlQ29udGV4dDpmZyx1c2VFZmZlY3Q6ZmcsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmZyx1c2VMYXlvdXRFZmZlY3Q6ZmcsdXNlTWVtbzpmZyx1c2VSZWR1Y2VyOmZnLHVzZVJlZjpmZyx1c2VTdGF0ZTpmZyx1c2VEZWJ1Z1ZhbHVlOmZnfSxpZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe21nKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2coNTE2LFVmfFRmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBzZyg0LFBmfFNmLHVnLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2coNCxQZnxTZixhLGIpfSxcbnVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1tZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1tZygpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXdnLmJpbmQobnVsbCxYZixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9bWcoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7dmFyIGI9bWcoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLFxubGFzdFJlbmRlcmVkUmVkdWNlcjpvZyxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9d2cuYmluZChudWxsLFhmLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19LHVzZURlYnVnVmFsdWU6dmd9LGpnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmdnKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRnKDUxNixVZnxUZixhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdGcoNCxQZnxTZix1Zy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsXG5iKXtyZXR1cm4gdGcoNCxQZnxTZixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmdnKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOnBnLHVzZVJlZjpmdW5jdGlvbigpe3JldHVybiBuZygpLm1lbW9pemVkU3RhdGV9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBwZyhvZyxhKX0sdXNlRGVidWdWYWx1ZTp2Z30seGc9bnVsbCx5Zz1udWxsLHpnPSExO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1LKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gQmcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIENnKGEpe2lmKHpnKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFCZyhhLGIpKXtiPURlKGMpO2lmKCFifHwhQmcoYSxiKSl7YS5lZmZlY3RUYWd8PTI7emc9ITE7eGc9YTtyZXR1cm59QWcoeGcsYyl9eGc9YTt5Zz1FZShiKX1lbHNlIGEuZWZmZWN0VGFnfD0yLHpnPSExLHhnPWF9fWZ1bmN0aW9uIERnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTghPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfWZ1bmN0aW9uIEVnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighemcpcmV0dXJuIERnKGEpLHpnPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYheGUoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPXlnO2I7KUFnKGEsYiksYj1EZShiKTtEZyhhKTt5Zz14Zz9EZShhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBGZygpe3lnPXhnPW51bGw7emc9ITF9XG52YXIgR2c9VGIuUmVhY3RDdXJyZW50T3duZXIscWc9ITE7ZnVuY3Rpb24gUyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0VmKGIsbnVsbCxjLGQpOkRmKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIEhnKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtJZyhiLGUpO2Q9aGcoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxKZyhhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEtnKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhVmUoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsTGcoYSxiLGcsZCxlLGYpO2E9WWUoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpkZCxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBKZyhhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1YZShnLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmZGQoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocWc9ITEsZTxmKT9KZyhhLGIsZik6TWcoYSxiLGMsZCxmKX1mdW5jdGlvbiBOZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIE1nKGEsYixjLGQsZSl7dmFyIGY9SihjKT9JZTpILmN1cnJlbnQ7Zj1KZShiLGYpO0lnKGIsZSk7Yz1oZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFxZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEpnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gT2coYSxiLGMsZCxlKXtpZihKKGMpKXt2YXIgZj0hMDtPZShiKX1lbHNlIGY9ITE7SWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLHZmKGIsYyxkLGUpLHhmKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPU0oayk6KGs9SihjKT9JZTpILmN1cnJlbnQsaz1KZShiLGspKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmd2YoYixnLGQsayk7UGc9ITE7dmFyIHQ9Yi5tZW1vaXplZFN0YXRlO2w9Zy5zdGF0ZT10O3ZhciBBPWIudXBkYXRlUXVldWU7bnVsbCE9PUEmJih5ZihiLEEsZCxnLGUpLGw9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8dCE9PWx8fEkuY3VycmVudHx8UGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2YoYixjLG0sZCksbD1iLm1lbW9pemVkU3RhdGUpLChoPVBnfHx1ZihiLGMsaCxkLHQsbCxrKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1sKSxnLnByb3BzPWQsZy5zdGF0ZT1sLGcuY29udGV4dD1rLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpMKGIudHlwZSxoKSxsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPU0oayk6KGs9SihjKT9JZTpILmN1cnJlbnQsaz1KZShiLGspKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PVxudHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bCE9PWspJiZ3ZihiLGcsZCxrKSxQZz0hMSxsPWIubWVtb2l6ZWRTdGF0ZSx0PWcuc3RhdGU9bCxBPWIudXBkYXRlUXVldWUsbnVsbCE9PUEmJih5ZihiLEEsZCxnLGUpLHQ9Yi5tZW1vaXplZFN0YXRlKSxoIT09ZHx8bCE9PXR8fEkuY3VycmVudHx8UGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2YoYixjLG0sZCksdD1iLm1lbW9pemVkU3RhdGUpLChtPVBnfHx1ZihiLGMsaCxkLGwsdCxrKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx0LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsdCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9XG50KSxnLnByb3BzPWQsZy5zdGF0ZT10LGcuY29udGV4dD1rLGQ9bSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBRZyhhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBRZyhhLGIsYyxkLGUsZil7TmcoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJlBlKGIsYywhMSksSmcoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7R2cuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9RGYoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1EZihiLG51bGwsaCxmKSk6UyhhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZQZShiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/TWUoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmTWUoYSxiLmNvbnRleHQsITEpO0pmKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIFNnKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRTdGF0ZTtpZigwPT09KGIuZWZmZWN0VGFnJjY0KSl7Zj1udWxsO3ZhciBnPSExfWVsc2UgZj17dGltZWRPdXRBdDpudWxsIT09Zj9mLnRpbWVkT3V0QXQ6MH0sZz0hMCxiLmVmZmVjdFRhZyY9LTY1O2lmKG51bGw9PT1hKWlmKGcpe3ZhciBoPWUuZmFsbGJhY2s7YT1aZShudWxsLGQsMCxudWxsKTswPT09KGIubW9kZSYxKSYmKGEuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpO2Q9WmUoaCxkLGMsbnVsbCk7YS5zaWJsaW5nPWQ7Yz1hO2MucmV0dXJuPWQucmV0dXJuPWJ9ZWxzZSBjPWQ9RWYoYixudWxsLGUuY2hpbGRyZW4sYyk7ZWxzZSBudWxsIT09YS5tZW1vaXplZFN0YXRlPyhkPWEuY2hpbGQsaD1kLnNpYmxpbmcsZz8oYz1lLmZhbGxiYWNrLGU9WGUoZCxkLnBlbmRpbmdQcm9wcywwKSwwPT09KGIubW9kZSYxKSYmKGc9bnVsbCE9PVxuYi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09ZC5jaGlsZCYmKGUuY2hpbGQ9ZykpLGQ9ZS5zaWJsaW5nPVhlKGgsYyxoLmV4cGlyYXRpb25UaW1lKSxjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6Yz1kPURmKGIsZC5jaGlsZCxlLmNoaWxkcmVuLGMpKTooaD1hLmNoaWxkLGc/KGc9ZS5mYWxsYmFjayxlPVplKG51bGwsZCwwLG51bGwpLGUuY2hpbGQ9aCwwPT09KGIubW9kZSYxKSYmKGUuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpLGQ9ZS5zaWJsaW5nPVplKGcsZCxjLG51bGwpLGQuZWZmZWN0VGFnfD0yLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpkPWM9RGYoYixoLGUuY2hpbGRyZW4sYykpLGIuc3RhdGVOb2RlPWEuc3RhdGVOb2RlO2IubWVtb2l6ZWRTdGF0ZT1mO2IuY2hpbGQ9YztyZXR1cm4gZH1cbmZ1bmN0aW9uIEpnKGEsYixjKXtudWxsIT09YSYmKGIuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXMpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD94KFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9WGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9WGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gVGcoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fEkuY3VycmVudClxZz0hMDtlbHNle2lmKGQ8Yyl7cWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6UmcoYik7RmcoKTticmVhaztjYXNlIDU6TGYoYik7YnJlYWs7Y2FzZSAxOkooYi50eXBlKSYmT2UoYik7YnJlYWs7Y2FzZSA0OkpmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpVZyhiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4gU2coYSxiLGMpO2I9SmcoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH19cmV0dXJuIEpnKGEsYixjKX19ZWxzZSBxZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1cbmIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9SmUoYixILmN1cnJlbnQpO0lnKGIsYyk7ZT1oZyhudWxsLGIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2xnKCk7aWYoSihkKSl7dmFyIGY9ITA7T2UoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJmtmKGIsZCxnLGEpO2UudXBkYXRlcj10ZjtiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO3hmKGIsZCxhLGMpO2I9UWcobnVsbCxiLGQsITAsZixcbmMpfWVsc2UgYi50YWc9MCxTKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7Zj1iLnBlbmRpbmdQcm9wczthPWhmKGUpO2IudHlwZT1hO2U9Yi50YWc9V2UoYSk7Zj1MKGEsZik7Zz12b2lkIDA7c3dpdGNoKGUpe2Nhc2UgMDpnPU1nKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxOmc9T2cobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDExOmc9SGcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE0Omc9S2cobnVsbCxiLGEsTChhLnR5cGUsZiksZCxjKTticmVhaztkZWZhdWx0OngoXCIzMDZcIixhLFwiXCIpfXJldHVybiBnO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLE1nKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLFxuZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxPZyhhLGIsZCxlLGMpO2Nhc2UgMzpSZyhiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/eChcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKUZnKCksYj1KZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSl5Zz1FZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSx4Zz1iLGU9emc9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1FZihiLG51bGwsZCxjKSk6KFMoYSxiLGQsYyksRmcoKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gTGYoYiksbnVsbD09PWEmJkNnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxcbmc9ZS5jaGlsZHJlbix4ZShkLGUpP2c9bnVsbDpudWxsIT09ZiYmeGUoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksTmcoYSxiKSwxIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFMoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkNnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gU2coYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9RGYoYixudWxsLGQsYyk6UyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxIZyhhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7VWcoYixmKTtpZihudWxsIT09Zyl7dmFyIGg9Zy52YWx1ZTtmPWJkKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFJLmN1cnJlbnQpe2I9SmcoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGw9aC5jb250ZXh0RGVwZW5kZW5jaWVzO2lmKG51bGwhPT1sKXtnPWguY2hpbGQ7Zm9yKHZhciBrPWwuZmlyc3Q7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kJiYwIT09XG4oay5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGs9bmYoYyksay50YWc9c2YscGYoaCxrKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtrPWguYWx0ZXJuYXRlO251bGwhPT1rJiZrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2s9Yztmb3IodmFyIG09aC5yZXR1cm47bnVsbCE9PW07KXt2YXIgcD1tLmFsdGVybmF0ZTtpZihtLmNoaWxkRXhwaXJhdGlvblRpbWU8ayltLmNoaWxkRXhwaXJhdGlvblRpbWU9ayxudWxsIT09cCYmcC5jaGlsZEV4cGlyYXRpb25UaW1lPGsmJihwLmNoaWxkRXhwaXJhdGlvblRpbWU9ayk7ZWxzZSBpZihudWxsIT09cCYmcC5jaGlsZEV4cGlyYXRpb25UaW1lPGspcC5jaGlsZEV4cGlyYXRpb25UaW1lPWs7ZWxzZSBicmVhazttPW0ucmV0dXJufWwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9az1rLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9cbm51bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfX1TKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLElnKGIsYyksZT1NKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1MKGUsYi5wZW5kaW5nUHJvcHMpLGY9TChlLnR5cGUsZiksS2coYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIExnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PVxuZD9lOkwoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxKKGQpPyhhPSEwLE9lKGIpKTphPSExLElnKGIsYyksdmYoYixkLGUsYykseGYoYixkLGUsYyksUWcobnVsbCxiLGQsITAsYSxjKX14KFwiMTU2XCIpfXZhciBWZz17Y3VycmVudDpudWxsfSxXZz1udWxsLFhnPW51bGwsWWc9bnVsbDtmdW5jdGlvbiBVZyhhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtHKFZnLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBaZyhhKXt2YXIgYj1WZy5jdXJyZW50O0YoVmcsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBJZyhhLGIpe1dnPWE7WWc9WGc9bnVsbDt2YXIgYz1hLmNvbnRleHREZXBlbmRlbmNpZXM7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU+PWImJihxZz0hMCk7YS5jb250ZXh0RGVwZW5kZW5jaWVzPW51bGx9XG5mdW5jdGlvbiBNKGEsYil7aWYoWWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKVlnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O251bGw9PT1YZz8obnVsbD09PVdnP3goXCIzMDhcIik6dm9pZCAwLFhnPWIsV2cuY29udGV4dERlcGVuZGVuY2llcz17Zmlyc3Q6YixleHBpcmF0aW9uVGltZTowfSk6WGc9WGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyICRnPTAscmY9MSxzZj0yLGFoPTMsUGc9ITE7ZnVuY3Rpb24gYmgoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gY2goYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIG5mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLHRhZzokZyxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBkaChhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBwZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9YmgoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPWNoKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPWNoKGQpKTtudWxsPT09ZXx8ZD09PWU/ZGgoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhkaChkLGIpLGRoKGUsYikpOihkaChkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIGVoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKTpmaChhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIGZoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPWNoKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgcmY6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIGFoOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0yMDQ5fDY0O2Nhc2UgJGc6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIHNmOlBnPSEwfXJldHVybiBkfVxuZnVuY3Rpb24geWYoYSxiLGMsZCxlKXtQZz0hMTtiPWZoKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsbD1iLmZpcnN0VXBkYXRlLGs9ZjtudWxsIT09bDspe3ZhciBtPWwuZXhwaXJhdGlvblRpbWU7bTxlPyhudWxsPT09ZyYmKGc9bCxmPWspLGg8bSYmKGg9bSkpOihrPWdoKGEsYixsLGssYyxkKSxudWxsIT09bC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWw6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWwsYi5sYXN0RWZmZWN0PWwpKSk7bD1sLm5leHR9bT1udWxsO2ZvcihsPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09bDspe3ZhciBwPWwuZXhwaXJhdGlvblRpbWU7cDxlPyhudWxsPT09bSYmKG09bCxudWxsPT09ZyYmKGY9aykpLGg8cCYmKGg9cCkpOihrPWdoKGEsYixsLGssYyxkKSxudWxsIT09bC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD1cbjMyLGwubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bDooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdENhcHR1cmVkRWZmZWN0PWwpKSk7bD1sLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1rKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWt9XG5mdW5jdGlvbiBoaChhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7aWgoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2loKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBpaChhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMTkxXCIsYyk6dm9pZCAwO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBqaChhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmpjKGIpfX1mdW5jdGlvbiBraChhKXthLmVmZmVjdFRhZ3w9NH12YXIgbGg9dm9pZCAwLG1oPXZvaWQgMCxuaD12b2lkIDAsb2g9dm9pZCAwO2xoPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTttaD1mdW5jdGlvbigpe307XG5uaD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7SWYoTi5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9dmMoZyxmKTtkPXZjKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj0kZChnLGYpO2Q9JGQoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1iZShnLGYpO2Q9YmUoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz10ZSl9cWUoYyxkKTtnPWM9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBsPWZbY107Zm9yKGcgaW4gbClsLmhhc093blByb3BlcnR5KGcpJiYoaHx8KGg9e30pLGhbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJihyYS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGs9ZFtjXTtsPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmayE9PWwmJihudWxsIT1rfHxudWxsIT1sKSlpZihcInN0eWxlXCI9PT1jKWlmKGwpe2ZvcihnIGluIGwpIWwuaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChofHwoaD17fSksaFtnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmxbZ10hPT1rW2ddJiYoaHx8XG4oaD17fSksaFtnXT1rW2ddKX1lbHNlIGh8fChhfHwoYT1bXSksYS5wdXNoKGMsaCkpLGg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8oaz1rP2suX19odG1sOnZvaWQgMCxsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmwhPT1rJiYoYT1hfHxbXSkucHVzaChjLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWM/bD09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYocmEuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWsmJnNlKGUsYyksYXx8bD09PWt8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxrKSl9aCYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGgpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYma2goYil9fTtvaD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYma2goYil9O1xudmFyIHBoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIHFoKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9amMoYykpO251bGwhPT1jJiZpYyhjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZpYyhhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiByaChhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtzaChhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiB0aChhLGIsYyl7Yz1jLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2Rve2lmKChkLnRhZyZhKSE9PU5mKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9KGQudGFnJmIpIT09TmYmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiB1aChhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9bmUoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1jLnRhZyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZSl7ZD1jLmNoaWxkLnNpYmxpbmc7ZC5yZXR1cm49YztjPWQ7Y29udGludWV9ZWxzZSBpZihudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxcbmMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIHZoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBSZSYmUmUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5sYXN0RWZmZWN0LG51bGwhPT1iKSl7dmFyIGM9Yj1iLm5leHQ7ZG97dmFyIGQ9Yy5kZXN0cm95O2lmKHZvaWQgMCE9PWQpe3ZhciBlPWE7dHJ5e2QoKX1jYXRjaChmKXtzaChlLGYpfX1jPWMubmV4dH13aGlsZShjIT09Yil9YnJlYWs7Y2FzZSAxOnJoKGEpO2I9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtzaChhLGYpfWJyZWFrO2Nhc2UgNTpyaChhKTticmVhaztjYXNlIDQ6d2goYSl9fVxuZnVuY3Rpb24geGgoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiB5aChhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZih4aChiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59eChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OngoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihrZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8eGgoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmXG4yKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGc9YixoPWUuc3RhdGVOb2RlLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPXRlKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7XG5lbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gd2goYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/eChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKHZoKGcpLG51bGwhPT1nLmNoaWxkJiY0IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1iLnRhZyl7aWYobnVsbCE9PWIuY2hpbGQpe2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKHZoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIHpoKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dGgoUGYsUWYsYik7YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQ2UoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9Yi5tZW1vaXplZFN0YXRlO2Q9dm9pZCAwO2E9YjtudWxsPT09Yz9kPSExOihkPSEwLGE9Yi5jaGlsZCwwPT09Yy50aW1lZE91dEF0JiYoYy50aW1lZE91dEF0PWxmKCkpKTtudWxsIT09YSYmdWgoYSxkKTtjPVxuYi51cGRhdGVRdWV1ZTtpZihudWxsIT09Yyl7Yi51cGRhdGVRdWV1ZT1udWxsO3ZhciBnPWIuc3RhdGVOb2RlO251bGw9PT1nJiYoZz1iLnN0YXRlTm9kZT1uZXcgcGgpO2MuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYz1BaC5iaW5kKG51bGwsYixhKTtnLmhhcyhhKXx8KGcuYWRkKGEpLGEudGhlbihjLGMpKX0pfWJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp4KFwiMTYzXCIpfX12YXIgQmg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gQ2goYSxiLGMpe2M9bmYoYyk7Yy50YWc9YWg7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0RoKGQpO3FoKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gRWgoYSxiLGMpe2M9bmYoYyk7Yy50YWc9YWg7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PUZoP0ZoPW5ldyBTZXQoW3RoaXNdKTpGaC5hZGQodGhpcykpO3ZhciBjPWIudmFsdWUsZT1iLnN0YWNrO3FoKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZT9lOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gR2goYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6SihhLnR5cGUpJiZLZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBLZihhKSxMZShhKSxiPWEuZWZmZWN0VGFnLDAhPT0oYiY2NCk/eChcIjI4NVwiKTp2b2lkIDAsYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhO2Nhc2UgNTpyZXR1cm4gTWYoYSksbnVsbDtjYXNlIDEzOnJldHVybiBiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMTg6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBLZihhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFpnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSGg9VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixJaD1UYi5SZWFjdEN1cnJlbnRPd25lcixKaD0xMDczNzQxODIyLEtoPSExLFQ9bnVsbCxMaD1udWxsLFU9MCxNaD0tMSxOaD0hMSxWPW51bGwsT2g9ITEsUGg9bnVsbCxRaD1udWxsLFJoPW51bGwsRmg9bnVsbDtmdW5jdGlvbiBTaCgpe2lmKG51bGwhPT1UKWZvcih2YXIgYT1ULnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDE6dmFyIGM9Yi50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1jJiZ2b2lkIDAhPT1jJiZLZShiKTticmVhaztjYXNlIDM6S2YoYik7TGUoYik7YnJlYWs7Y2FzZSA1Ok1mKGIpO2JyZWFrO2Nhc2UgNDpLZihiKTticmVhaztjYXNlIDEwOlpnKGIpfWE9YS5yZXR1cm59TGg9bnVsbDtVPTA7TWg9LTE7Tmg9ITE7VD1udWxsfVxuZnVuY3Rpb24gVGgoKXtmb3IoO251bGwhPT1WOyl7dmFyIGE9Vi5lZmZlY3RUYWc7YSYxNiYma2UoVi5zdGF0ZU5vZGUsXCJcIik7aWYoYSYxMjgpe3ZhciBiPVYuYWx0ZXJuYXRlO251bGwhPT1iJiYoYj1iLnJlZixudWxsIT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IobnVsbCk6Yi5jdXJyZW50PW51bGwpKX1zd2l0Y2goYSYxNCl7Y2FzZSAyOnloKFYpO1YuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6eWgoVik7Vi5lZmZlY3RUYWcmPS0zO3poKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgNDp6aChWLmFsdGVybmF0ZSxWKTticmVhaztjYXNlIDg6YT1WLHdoKGEpLGEucmV0dXJuPW51bGwsYS5jaGlsZD1udWxsLGEubWVtb2l6ZWRTdGF0ZT1udWxsLGEudXBkYXRlUXVldWU9bnVsbCxhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYS5yZXR1cm49bnVsbCxhLmNoaWxkPW51bGwsYS5tZW1vaXplZFN0YXRlPW51bGwsYS51cGRhdGVRdWV1ZT1udWxsKX1WPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBVaCgpe2Zvcig7bnVsbCE9PVY7KXtpZihWLmVmZmVjdFRhZyYyNTYpYTp7dmFyIGE9Vi5hbHRlcm5hdGUsYj1WO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aChPZixOZixiKTticmVhayBhO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOkwoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhayBhO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrIGE7ZGVmYXVsdDp4KFwiMTYzXCIpfX1WPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBWaChhLGIpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYz1WLmVmZmVjdFRhZztpZihjJjM2KXt2YXIgZD1WLmFsdGVybmF0ZSxlPVYsZj1iO3N3aXRjaChlLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aChSZixTZixlKTticmVhaztjYXNlIDE6dmFyIGc9ZS5zdGF0ZU5vZGU7aWYoZS5lZmZlY3RUYWcmNClpZihudWxsPT09ZClnLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgaD1lLmVsZW1lbnRUeXBlPT09ZS50eXBlP2QubWVtb2l6ZWRQcm9wczpMKGUudHlwZSxkLm1lbW9pemVkUHJvcHMpO2cuY29tcG9uZW50RGlkVXBkYXRlKGgsZC5tZW1vaXplZFN0YXRlLGcuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWQ9ZS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmaGgoZSxkLGcsZik7YnJlYWs7Y2FzZSAzOmQ9ZS51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCl7Zz1udWxsO2lmKG51bGwhPT1lLmNoaWxkKXN3aXRjaChlLmNoaWxkLnRhZyl7Y2FzZSA1Omc9XG5lLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Zz1lLmNoaWxkLnN0YXRlTm9kZX1oaChlLGQsZyxmKX1icmVhaztjYXNlIDU6Zj1lLnN0YXRlTm9kZTtudWxsPT09ZCYmZS5lZmZlY3RUYWcmNCYmd2UoZS50eXBlLGUubWVtb2l6ZWRQcm9wcykmJmYuZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpicmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6eChcIjE2M1wiKX19YyYxMjgmJihlPVYucmVmLG51bGwhPT1lJiYoZj1WLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9lKGYpOmUuY3VycmVudD1mKSk7YyY1MTImJihQaD1hKTtWPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBXaChhLGIpe1JoPVFoPVBoPW51bGw7dmFyIGM9VztXPSEwO2Rve2lmKGIuZWZmZWN0VGFnJjUxMil7dmFyIGQ9ITEsZT12b2lkIDA7dHJ5e3ZhciBmPWI7dGgoVWYsTmYsZik7dGgoTmYsVGYsZil9Y2F0Y2goZyl7ZD0hMCxlPWd9ZCYmc2goYixlKX1iPWIubmV4dEVmZmVjdH13aGlsZShudWxsIT09Yik7Vz1jO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmWGgoYSxjKTtYfHxXfHxZaCgxMDczNzQxODIzLCExKX1mdW5jdGlvbiBvZigpe251bGwhPT1RaCYmQmUoUWgpO251bGwhPT1SaCYmUmgoKX1cbmZ1bmN0aW9uIFpoKGEsYil7T2g9S2g9ITA7YS5jdXJyZW50PT09Yj94KFwiMTc3XCIpOnZvaWQgMDt2YXIgYz1hLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09Yz94KFwiMjYxXCIpOnZvaWQgMDthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPWIuZXhwaXJhdGlvblRpbWUsZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU7ZWYoYSxlPmQ/ZTpkKTtJaC5jdXJyZW50PW51bGw7ZD12b2lkIDA7MTxiLmVmZmVjdFRhZz9udWxsIT09Yi5sYXN0RWZmZWN0PyhiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLGQ9Yi5maXJzdEVmZmVjdCk6ZD1iOmQ9Yi5maXJzdEVmZmVjdDt1ZT1CZDt2ZT1QZCgpO0JkPSExO2ZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO3ZhciBmPXZvaWQgMDt0cnl7VWgoKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7XG5mPXZvaWQgMDt0cnl7VGgoKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9UWQodmUpO3ZlPW51bGw7QmQ9ISF1ZTt1ZT1udWxsO2EuY3VycmVudD1iO2ZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO2Y9dm9pZCAwO3RyeXtWaChhLGMpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1pZihudWxsIT09ZCYmbnVsbCE9PVBoKXt2YXIgZz1XaC5iaW5kKG51bGwsYSxkKTtRaD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIEFlKGcpfSk7Umg9Z31LaD1PaD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgUWUmJlFlKGIuc3RhdGVOb2RlKTtjPWIuZXhwaXJhdGlvblRpbWU7Yj1iLmNoaWxkRXhwaXJhdGlvblRpbWU7Yj1cbmI+Yz9iOmM7MD09PWImJihGaD1udWxsKTskaChhLGIpfVxuZnVuY3Rpb24gYWkoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmMTAyNCkpe1Q9YTthOnt2YXIgZT1iO2I9YTt2YXIgZj1VO3ZhciBnPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOkooYi50eXBlKSYmS2UoYik7YnJlYWs7Y2FzZSAzOktmKGIpO0xlKGIpO2c9Yi5zdGF0ZU5vZGU7Zy5wZW5kaW5nQ29udGV4dCYmKGcuY29udGV4dD1nLnBlbmRpbmdDb250ZXh0LGcucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWV8fG51bGw9PT1lLmNoaWxkKUVnKGIpLGIuZWZmZWN0VGFnJj0tMzttaChiKTticmVhaztjYXNlIDU6TWYoYik7dmFyIGg9SWYoSGYuY3VycmVudCk7Zj1iLnR5cGU7aWYobnVsbCE9PWUmJm51bGwhPWIuc3RhdGVOb2RlKW5oKGUsYixmLGcsaCksZS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD1cbjEyOCk7ZWxzZSBpZihnKXt2YXIgbD1JZihOLmN1cnJlbnQpO2lmKEVnKGIpKXtnPWI7ZT1nLnN0YXRlTm9kZTt2YXIgaz1nLnR5cGUsbT1nLm1lbW9pemVkUHJvcHMscD1oO2VbRmFdPWc7ZVtHYV09bTtmPXZvaWQgMDtoPWs7c3dpdGNoKGgpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RShcImxvYWRcIixlKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3Ioaz0wO2s8YWIubGVuZ3RoO2srKylFKGFiW2tdLGUpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpFKFwiZXJyb3JcIixlKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpFKFwiZXJyb3JcIixlKTtFKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RShcInJlc2V0XCIsZSk7RShcInN1Ym1pdFwiLGUpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RShcInRvZ2dsZVwiLGUpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOndjKGUsbSk7RShcImludmFsaWRcIixlKTtzZShwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmUuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O0UoXCJpbnZhbGlkXCIsZSk7c2UocCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNlKGUsbSksRShcImludmFsaWRcIixlKSxzZShwLFwib25DaGFuZ2VcIil9cWUoaCxtKTtrPW51bGw7Zm9yKGYgaW4gbSltLmhhc093blByb3BlcnR5KGYpJiYobD1tW2ZdLFwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsP2UudGV4dENvbnRlbnQhPT1sJiYoaz1bXCJjaGlsZHJlblwiLGxdKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJmUudGV4dENvbnRlbnQhPT1cIlwiK2wmJihrPVtcImNoaWxkcmVuXCIsXCJcIitsXSk6cmEuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWwmJnNlKHAsZikpO3N3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpSYihlKTtBYyhlLG0sITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJiKGUpO2VlKGUsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLm9uQ2xpY2smJlxuKGUub25jbGljaz10ZSl9Zj1rO2cudXBkYXRlUXVldWU9ZjtnPW51bGwhPT1mPyEwOiExO2cmJmtoKGIpfWVsc2V7bT1iO3A9ZjtlPWc7az05PT09aC5ub2RlVHlwZT9oOmgub3duZXJEb2N1bWVudDtsPT09ZmUuaHRtbCYmKGw9Z2UocCkpO2w9PT1mZS5odG1sP1wic2NyaXB0XCI9PT1wPyhlPWsuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGs9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGUuaXM/az1rLmNyZWF0ZUVsZW1lbnQocCx7aXM6ZS5pc30pOihrPWsuY3JlYXRlRWxlbWVudChwKSxcInNlbGVjdFwiPT09cCYmKHA9ayxlLm11bHRpcGxlP3AubXVsdGlwbGU9ITA6ZS5zaXplJiYocC5zaXplPWUuc2l6ZSkpKTprPWsuY3JlYXRlRWxlbWVudE5TKGwscCk7ZT1rO2VbRmFdPW07ZVtHYV09ZztsaChlLGIsITEsITEpO3A9ZTtrPWY7bT1nO3ZhciB0PWgsQT1yZShrLG0pO3N3aXRjaChrKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkUoXCJsb2FkXCIsXG5wKTtoPW07YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFiLmxlbmd0aDtoKyspRShhYltoXSxwKTtoPW07YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkUoXCJlcnJvclwiLHApO2g9bTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpFKFwiZXJyb3JcIixwKTtFKFwibG9hZFwiLHApO2g9bTticmVhaztjYXNlIFwiZm9ybVwiOkUoXCJyZXNldFwiLHApO0UoXCJzdWJtaXRcIixwKTtoPW07YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpFKFwidG9nZ2xlXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOndjKHAsbSk7aD12YyhwLG0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPSRkKHAsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnAuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtoPW4oe30sbSx7dmFsdWU6dm9pZCAwfSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2UocCxcbm0pO2g9YmUocCxtKTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9bX1xZShrLGgpO2w9dm9pZCAwO3ZhciB2PWssUj1wLHU9aDtmb3IobCBpbiB1KWlmKHUuaGFzT3duUHJvcGVydHkobCkpe3ZhciBxPXVbbF07XCJzdHlsZVwiPT09bD9vZShSLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KHE9cT9xLl9faHRtbDp2b2lkIDAsbnVsbCE9cSYmamUoUixxKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiPT09dHlwZW9mIHE/KFwidGV4dGFyZWFcIiE9PXZ8fFwiXCIhPT1xKSYma2UoUixxKTpcIm51bWJlclwiPT09dHlwZW9mIHEmJmtlKFIsXCJcIitxKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYocmEuaGFzT3duUHJvcGVydHkobCk/bnVsbCE9cSYmc2UodCxsKTpudWxsIT1xJiZ0YyhSLGwscSxBKSl9c3dpdGNoKGspe2Nhc2UgXCJpbnB1dFwiOlJiKHApO1xuQWMocCxtLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpSYihwKTtlZShwLG0pO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1tLnZhbHVlJiZwLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit1YyhtLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmg9cDtoLm11bHRpcGxlPSEhbS5tdWx0aXBsZTtwPW0udmFsdWU7bnVsbCE9cD9hZShoLCEhbS5tdWx0aXBsZSxwLCExKTpudWxsIT1tLmRlZmF1bHRWYWx1ZSYmYWUoaCwhIW0ubXVsdGlwbGUsbS5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKHAub25jbGljaz10ZSl9KGc9d2UoZixnKSkmJmtoKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA2OmUmJm51bGwhPWIuc3RhdGVOb2RlP29oKGUsYixlLm1lbW9pemVkUHJvcHMsZyk6KFwic3RyaW5nXCIhPT1cbnR5cGVvZiBnJiYobnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjZcIik6dm9pZCAwKSxlPUlmKEhmLmN1cnJlbnQpLElmKE4uY3VycmVudCksRWcoYik/KGc9YixmPWcuc3RhdGVOb2RlLGU9Zy5tZW1vaXplZFByb3BzLGZbRmFdPWcsKGc9Zi5ub2RlVmFsdWUhPT1lKSYma2goYikpOihmPWIsZz0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGcpLGdbRmFdPWIsZi5zdGF0ZU5vZGU9ZykpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpnPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1mO1Q9YjticmVhayBhfWc9bnVsbCE9PWc7Zj1udWxsIT09ZSYmbnVsbCE9PWUubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmIWcmJmYmJihlPWUuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGg9Yi5maXJzdEVmZmVjdCxudWxsIT09aD8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1oKTooYi5maXJzdEVmZmVjdD1cbmIubGFzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSk7aWYoZ3x8ZiliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OktmKGIpO21oKGIpO2JyZWFrO2Nhc2UgMTA6WmcoYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpKKGIudHlwZSkmJktlKGIpO2JyZWFrO2Nhc2UgMTg6YnJlYWs7ZGVmYXVsdDp4KFwiMTU2XCIpfVQ9bnVsbH1iPWE7aWYoMT09PVV8fDEhPT1iLmNoaWxkRXhwaXJhdGlvblRpbWUpe2c9MDtmb3IoZj1iLmNoaWxkO251bGwhPT1mOyllPWYuZXhwaXJhdGlvblRpbWUsaD1mLmNoaWxkRXhwaXJhdGlvblRpbWUsZT5nJiYoZz1lKSxoPmcmJihnPWgpLGY9Zi5zaWJsaW5nO2IuY2hpbGRFeHBpcmF0aW9uVGltZT1nfWlmKG51bGwhPT1UKXJldHVybiBUO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjEwMjQpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJlxuKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpfWVsc2V7YT1HaChhLFUpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MTAyMyxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbCxjLmVmZmVjdFRhZ3w9MTAyNCl9aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBiaShhKXt2YXIgYj1UZyhhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9YWkoYSkpO0loLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGNpKGEsYil7S2g/eChcIjI0M1wiKTp2b2lkIDA7b2YoKTtLaD0hMDt2YXIgYz1IaC5jdXJyZW50O0hoLmN1cnJlbnQ9a2c7dmFyIGQ9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtpZihkIT09VXx8YSE9PUxofHxudWxsPT09VClTaCgpLExoPWEsVT1kLFQ9WGUoTGguY3VycmVudCxudWxsLFUpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGU9ITE7ZG97dHJ5e2lmKGIpZm9yKDtudWxsIT09VCYmIWRpKCk7KVQ9YmkoVCk7ZWxzZSBmb3IoO251bGwhPT1UOylUPWJpKFQpfWNhdGNoKHUpe2lmKFlnPVhnPVdnPW51bGwsbGcoKSxudWxsPT09VCllPSEwLERoKHUpO2Vsc2V7bnVsbD09PVQ/eChcIjI3MVwiKTp2b2lkIDA7dmFyIGY9VCxnPWYucmV0dXJuO2lmKG51bGw9PT1nKWU9ITAsRGgodSk7ZWxzZXthOnt2YXIgaD1hLGw9ZyxrPWYsbT11O2c9VTtrLmVmZmVjdFRhZ3w9MTAyNDtrLmZpcnN0RWZmZWN0PWsubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1cbm0mJlwib2JqZWN0XCI9PT10eXBlb2YgbSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIG0udGhlbil7dmFyIHA9bTttPWw7dmFyIHQ9LTEsQT0tMTtkb3tpZigxMz09PW0udGFnKXt2YXIgdj1tLmFsdGVybmF0ZTtpZihudWxsIT09diYmKHY9di5tZW1vaXplZFN0YXRlLG51bGwhPT12KSl7QT0xMCooMTA3Mzc0MTgyMi12LnRpbWVkT3V0QXQpO2JyZWFrfXY9bS5wZW5kaW5nUHJvcHMubWF4RHVyYXRpb247aWYoXCJudW1iZXJcIj09PXR5cGVvZiB2KWlmKDA+PXYpdD0wO2Vsc2UgaWYoLTE9PT10fHx2PHQpdD12fW09bS5yZXR1cm59d2hpbGUobnVsbCE9PW0pO209bDtkb3tpZih2PTEzPT09bS50YWcpdj12b2lkIDA9PT1tLm1lbW9pemVkUHJvcHMuZmFsbGJhY2s/ITE6bnVsbD09PW0ubWVtb2l6ZWRTdGF0ZTtpZih2KXtsPW0udXBkYXRlUXVldWU7bnVsbD09PWw/KGw9bmV3IFNldCxsLmFkZChwKSxtLnVwZGF0ZVF1ZXVlPWwpOmwuYWRkKHApO2lmKDA9PT0obS5tb2RlJjEpKXttLmVmZmVjdFRhZ3w9XG42NDtrLmVmZmVjdFRhZyY9LTE5NTc7MT09PWsudGFnJiYobnVsbD09PWsuYWx0ZXJuYXRlP2sudGFnPTE3OihnPW5mKDEwNzM3NDE4MjMpLGcudGFnPXNmLHBmKGssZykpKTtrLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7YnJlYWsgYX1rPWg7bD1nO3ZhciBSPWsucGluZ0NhY2hlO251bGw9PT1SPyhSPWsucGluZ0NhY2hlPW5ldyBCaCx2PW5ldyBTZXQsUi5zZXQocCx2KSk6KHY9Ui5nZXQocCksdm9pZCAwPT09diYmKHY9bmV3IFNldCxSLnNldChwLHYpKSk7di5oYXMobCl8fCh2LmFkZChsKSxrPWVpLmJpbmQobnVsbCxrLHAsbCkscC50aGVuKGssaykpOy0xPT09dD9oPTEwNzM3NDE4MjM6KC0xPT09QSYmKEE9MTAqKDEwNzM3NDE4MjItZ2YoaCxnKSktNUUzKSxoPUErdCk7MDw9aCYmTWg8aCYmKE1oPWgpO20uZWZmZWN0VGFnfD0yMDQ4O20uZXhwaXJhdGlvblRpbWU9ZzticmVhayBhfW09bS5yZXR1cm59d2hpbGUobnVsbCE9PW0pO209RXJyb3IoKGljKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXG5cIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK2pjKGspKX1OaD0hMDttPWpoKG0sayk7aD1sO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmguZWZmZWN0VGFnfD0yMDQ4O2guZXhwaXJhdGlvblRpbWU9ZztnPUNoKGgsbSxnKTtlaChoLGcpO2JyZWFrIGE7Y2FzZSAxOmlmKHQ9bSxBPWgudHlwZSxrPWguc3RhdGVOb2RlLDA9PT0oaC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEEuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09ayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmh8fCFGaC5oYXMoaykpKSl7aC5lZmZlY3RUYWd8PTIwNDg7XG5oLmV4cGlyYXRpb25UaW1lPWc7Zz1FaChoLHQsZyk7ZWgoaCxnKTticmVhayBhfX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKX1UPWFpKGYpO2NvbnRpbnVlfX19YnJlYWt9d2hpbGUoMSk7S2g9ITE7SGguY3VycmVudD1jO1lnPVhnPVdnPW51bGw7bGcoKTtpZihlKUxoPW51bGwsYS5maW5pc2hlZFdvcms9bnVsbDtlbHNlIGlmKG51bGwhPT1UKWEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZXtjPWEuY3VycmVudC5hbHRlcm5hdGU7bnVsbD09PWM/eChcIjI4MVwiKTp2b2lkIDA7TGg9bnVsbDtpZihOaCl7ZT1hLmxhdGVzdFBlbmRpbmdUaW1lO2Y9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2c9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDAhPT1lJiZlPGR8fDAhPT1mJiZmPGR8fDAhPT1nJiZnPGQpe2ZmKGEsZCk7ZmkoYSxjLGQsYS5leHBpcmF0aW9uVGltZSwtMSk7cmV0dXJufWlmKCFhLmRpZEVycm9yJiZiKXthLmRpZEVycm9yPSEwO2Q9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1kO1xuYj1hLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7ZmkoYSxjLGQsYiwtMSk7cmV0dXJufX1iJiYtMSE9PU1oPyhmZihhLGQpLGI9MTAqKDEwNzM3NDE4MjItZ2YoYSxkKSksYjxNaCYmKE1oPWIpLGI9MTAqKDEwNzM3NDE4MjItbGYoKSksYj1NaC1iLGZpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsMD5iPzA6YikpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1kLGEuZmluaXNoZWRXb3JrPWMpfX1cbmZ1bmN0aW9uIHNoKGEsYil7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDE6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZofHwhRmguaGFzKGQpKSl7YT1qaChiLGEpO2E9RWgoYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7cWYoYywxMDczNzQxODIzKTtyZXR1cm59YnJlYWs7Y2FzZSAzOmE9amgoYixhKTthPUNoKGMsYSwxMDczNzQxODIzKTtwZihjLGEpO3FmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWM9Yy5yZXR1cm59Mz09PWEudGFnJiYoYz1qaChiLGEpLGM9Q2goYSxjLDEwNzM3NDE4MjMpLHBmKGEsYykscWYoYSwxMDczNzQxODIzKSl9XG5mdW5jdGlvbiBtZihhLGIpe3ZhciBjPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwoKSxkPXZvaWQgMDtpZigwPT09KGIubW9kZSYxKSlkPTEwNzM3NDE4MjM7ZWxzZSBpZihLaCYmIU9oKWQ9VTtlbHNle3N3aXRjaChjKXtjYXNlIHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk6ZD0xMDczNzQxODIzO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eTpkPTEwNzM3NDE4MjItMTAqKCgoMTA3Mzc0MTgyMi1hKzE1KS8xMHwwKSsxKTticmVhaztjYXNlIHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk6ZD0xMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItYSs1MDApLzI1fDApKzEpO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Mb3dQcmlvcml0eTpjYXNlIHIudW5zdGFibGVfSWRsZVByaW9yaXR5OmQ9MTticmVhaztkZWZhdWx0OngoXCIzMTNcIil9bnVsbCE9PUxoJiZkPT09VSYmLS1kfWM9PT1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5JiZcbigwPT09Z2l8fGQ8Z2kpJiYoZ2k9ZCk7cmV0dXJuIGR9ZnVuY3Rpb24gZWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtpZihudWxsIT09TGgmJlU9PT1jKUxoPW51bGw7ZWxzZSBpZihiPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXRlc3RTdXNwZW5kZWRUaW1lLDAhPT1iJiZjPD1iJiZjPj1kKXthLmRpZEVycm9yPSExO2I9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDA9PT1ifHxiPmMpYS5sYXRlc3RQaW5nZWRUaW1lPWM7ZGYoYyxhKTtjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJlhoKGEsYyl9fWZ1bmN0aW9uIEFoKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9bGYoKTtiPW1mKGIsYSk7YT1oaShhLGIpO251bGwhPT1hJiYoY2YoYSxiKSxiPWEuZXhwaXJhdGlvblRpbWUsMCE9PWImJlhoKGEsYikpfVxuZnVuY3Rpb24gaGkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1yZXR1cm4gZX1cbmZ1bmN0aW9uIHFmKGEsYil7YT1oaShhLGIpO251bGwhPT1hJiYoIUtoJiYwIT09VSYmYj5VJiZTaCgpLGNmKGEsYiksS2gmJiFPaCYmTGg9PT1hfHxYaChhLGEuZXhwaXJhdGlvblRpbWUpLGlpPmppJiYoaWk9MCx4KFwiMTg1XCIpKSl9ZnVuY3Rpb24ga2koYSxiLGMsZCxlKXtyZXR1cm4gci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9dmFyIGxpPW51bGwsWT1udWxsLG1pPTAsbmk9dm9pZCAwLFc9ITEsb2k9bnVsbCxaPTAsZ2k9MCxwaT0hMSxxaT1udWxsLFg9ITEscmk9ITEsc2k9bnVsbCx0aT1yLnVuc3RhYmxlX25vdygpLHVpPTEwNzM3NDE4MjItKHRpLzEwfDApLHZpPXVpLGppPTUwLGlpPTAsd2k9bnVsbDtmdW5jdGlvbiB4aSgpe3VpPTEwNzM3NDE4MjItKChyLnVuc3RhYmxlX25vdygpLXRpKS8xMHwwKX1cbmZ1bmN0aW9uIHlpKGEsYil7aWYoMCE9PW1pKXtpZihiPG1pKXJldHVybjtudWxsIT09bmkmJnIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sobmkpfW1pPWI7YT1yLnVuc3RhYmxlX25vdygpLXRpO25pPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayh6aSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMi1iKS1hfSl9ZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXthLmV4cGlyYXRpb25UaW1lPWQ7MCE9PWV8fGRpKCk/MDxlJiYoYS50aW1lb3V0SGFuZGxlPXllKEFpLmJpbmQobnVsbCxhLGIsYyksZSkpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuZmluaXNoZWRXb3JrPWIpfWZ1bmN0aW9uIEFpKGEsYixjKXthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jO2EuZmluaXNoZWRXb3JrPWI7eGkoKTt2aT11aTtCaShhLGMpfWZ1bmN0aW9uICRoKGEsYil7YS5leHBpcmF0aW9uVGltZT1iO2EuZmluaXNoZWRXb3JrPW51bGx9XG5mdW5jdGlvbiBsZigpe2lmKFcpcmV0dXJuIHZpO0NpKCk7aWYoMD09PVp8fDE9PT1aKXhpKCksdmk9dWk7cmV0dXJuIHZpfWZ1bmN0aW9uIFhoKGEsYil7bnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3Q/KGEuZXhwaXJhdGlvblRpbWU9YixudWxsPT09WT8obGk9WT1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KFk9WS5uZXh0U2NoZWR1bGVkUm9vdD1hLFkubmV4dFNjaGVkdWxlZFJvb3Q9bGkpKTpiPmEuZXhwaXJhdGlvblRpbWUmJihhLmV4cGlyYXRpb25UaW1lPWIpO1d8fChYP3JpJiYob2k9YSxaPTEwNzM3NDE4MjMsRGkoYSwxMDczNzQxODIzLCExKSk6MTA3Mzc0MTgyMz09PWI/WWgoMTA3Mzc0MTgyMywhMSk6eWkoYSxiKSl9XG5mdW5jdGlvbiBDaSgpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1ZKWZvcih2YXIgYz1ZLGQ9bGk7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PVk/eChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe2xpPVk9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PWxpKWxpPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxZLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PVkpe1k9YztZLm5leHRTY2hlZHVsZWRSb290PWxpO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7ZT5hJiYoYT1lLGI9ZCk7aWYoZD09PVkpYnJlYWs7aWYoMTA3Mzc0MTgyMz09PVxuYSlicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1vaT1iO1o9YX12YXIgRWk9ITE7ZnVuY3Rpb24gZGkoKXtyZXR1cm4gRWk/ITA6ci51bnN0YWJsZV9zaG91bGRZaWVsZCgpP0VpPSEwOiExfWZ1bmN0aW9uIHppKCl7dHJ5e2lmKCFkaSgpJiZudWxsIT09bGkpe3hpKCk7dmFyIGE9bGk7ZG97dmFyIGI9YS5leHBpcmF0aW9uVGltZTswIT09YiYmdWk8PWImJihhLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPXVpKTthPWEubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYSE9PWxpKX1ZaCgwLCEwKX1maW5hbGx5e0VpPSExfX1cbmZ1bmN0aW9uIFloKGEsYil7Q2koKTtpZihiKWZvcih4aSgpLHZpPXVpO251bGwhPT1vaSYmMCE9PVomJmE8PVomJiEoRWkmJnVpPlopOylEaShvaSxaLHVpPlopLENpKCkseGkoKSx2aT11aTtlbHNlIGZvcig7bnVsbCE9PW9pJiYwIT09WiYmYTw9WjspRGkob2ksWiwhMSksQ2koKTtiJiYobWk9MCxuaT1udWxsKTswIT09WiYmeWkob2ksWik7aWk9MDt3aT1udWxsO2lmKG51bGwhPT1zaSlmb3IoYT1zaSxzaT1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe3BpfHwocGk9ITAscWk9ZCl9fWlmKHBpKXRocm93IGE9cWkscWk9bnVsbCxwaT0hMSxhO31mdW5jdGlvbiBCaShhLGIpe1c/eChcIjI1M1wiKTp2b2lkIDA7b2k9YTtaPWI7RGkoYSxiLCExKTtZaCgxMDczNzQxODIzLCExKX1cbmZ1bmN0aW9uIERpKGEsYixjKXtXP3goXCIyNDVcIik6dm9pZCAwO1c9ITA7aWYoYyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/RmkoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSx6ZShkKSksY2koYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoZGkoKT9hLmZpbmlzaGVkV29yaz1kOkZpKGEsZCxiKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9GaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLHplKGQpKSxjaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJkZpKGEsZCxiKSk7Vz0hMX1cbmZ1bmN0aW9uIEZpKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1jJiYobnVsbD09PXNpP3NpPVtkXTpzaS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PXdpP2lpKys6KHdpPWEsaWk9MCk7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxmdW5jdGlvbigpe1poKGEsYil9KX1mdW5jdGlvbiBEaChhKXtudWxsPT09b2k/eChcIjI0NlwiKTp2b2lkIDA7b2kuZXhwaXJhdGlvblRpbWU9MDtwaXx8KHBpPSEwLHFpPWEpfWZ1bmN0aW9uIEdpKGEsYil7dmFyIGM9WDtYPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhYPWMpfHxXfHxZaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBIaShhLGIpe2lmKFgmJiFyaSl7cmk9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7cmk9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uIElpKGEsYixjKXtYfHxXfHwwPT09Z2l8fChZaChnaSwhMSksZ2k9MCk7dmFyIGQ9WDtYPSEwO3RyeXtyZXR1cm4gci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBhKGIsYyl9KX1maW5hbGx5eyhYPWQpfHxXfHxZaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBKaShhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6ezI9PT1lZChjKSYmMT09PWMudGFnP3ZvaWQgMDp4KFwiMTcwXCIpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEooZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt4KFwiMTcxXCIpO2c9dm9pZCAwfWlmKDE9PT1jLnRhZyl7dmFyIGg9Yy50eXBlO2lmKEooaCkpe2M9TmUoYyxoLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9SGU7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9bmYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1xub2YoKTtwZihmLGUpO3FmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gS2koYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9bGYoKTtlPW1mKGYsZSk7cmV0dXJuIEppKGEsYixjLGUsZCl9ZnVuY3Rpb24gTGkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBNaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOldiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuQWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjp5YyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9S2EoZCk7ZT92b2lkIDA6eChcIjkwXCIpO1NiKGQpO3ljKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpkZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmYWUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1sZigpKzUwMCkvMjV8MCkrMSk7Yj49SmgmJihiPUpoLTEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPUpoPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1OaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDp4KFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgT2k7SmkoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuTmkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuTmkucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOngoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/eChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtCaShhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtOaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gT2koKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1PaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuT2kucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBQaShhLGIsYyl7Yj1LKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBpbmdDYWNoZTpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cblBpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgT2k7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO0tpKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07UGkucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IE9pO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtLaShudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O1BpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBPaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7S2koYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcblBpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBOaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIFFpKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1HYj1HaTtIYj1JaTtJYj1mdW5jdGlvbigpe1d8fDA9PT1naXx8KFloKGdpLCExKSxnaT0wKX07XG5mdW5jdGlvbiBSaShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IFBpKGEsITEsYil9XG5mdW5jdGlvbiBTaShhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9TGkoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1SaShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1MaShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19SGkoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIExpKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBUaShhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBNaShhLGIsbnVsbCxjKX1cbnZhciBWaT17Y3JlYXRlUG9ydGFsOlRpLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/eChcIjE4OFwiKTp4KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPWhkKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIFNpKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBTaShudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7UWkoYyk/dm9pZCAwOngoXCIyMDBcIik7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP1xueChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gU2koYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7UWkoYSk/dm9pZCAwOngoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhIaShmdW5jdGlvbigpe1NpKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIFRpLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpHaSx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6SWksZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7Vz94KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1YO1g9ITA7dHJ5e3JldHVybiBraShhLGIpfWZpbmFsbHl7WD1jLFloKDEwNzM3NDE4MjMsITEpfX0sdW5zdGFibGVfY3JlYXRlUm9vdDpVaSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5YO1g9ITA7dHJ5e2tpKGEpfWZpbmFsbHl7KFg9Yil8fFd8fFloKDEwNzM3NDE4MjMsITEpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbSWEsSmEsS2EsQmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHBhLFFhLGZ1bmN0aW9uKGEpe3lhKGEsUGEpfSxFYixGYixEZCxEYV19fTtmdW5jdGlvbiBVaShhLGIpe1FpKGEpP3ZvaWQgMDp4KFwiMjk5XCIsXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgUGkoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gVGUobih7fSxhLHtvdmVycmlkZVByb3BzOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkhhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuOC42XCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIFdpPXtkZWZhdWx0OlZpfSxYaT1XaSYmVml8fFdpO21vZHVsZS5leHBvcnRzPVhpLmRlZmF1bHR8fFhpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMy42XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9bnVsbCxlPSExLGc9MyxrPS0xLGw9LTEsbT0hMSxuPSExO2Z1bmN0aW9uIHAoKXtpZighbSl7dmFyIGE9ZC5leHBpcmF0aW9uVGltZTtuP3EoKTpuPSEwO3IodCxhKX19XG5mdW5jdGlvbiB1KCl7dmFyIGE9ZCxiPWQubmV4dDtpZihkPT09YilkPW51bGw7ZWxzZXt2YXIgYz1kLnByZXZpb3VzO2Q9Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGw7Yz1hLmNhbGxiYWNrO2I9YS5leHBpcmF0aW9uVGltZTthPWEucHJpb3JpdHlMZXZlbDt2YXIgZj1nLFE9bDtnPWE7bD1iO3RyeXt2YXIgaD1jKCl9ZmluYWxseXtnPWYsbD1RfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoKWlmKGg9e2NhbGxiYWNrOmgscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1kKWQ9aC5uZXh0PWgucHJldmlvdXM9aDtlbHNle2M9bnVsbDthPWQ7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7Yz1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWgscCgpKTtiPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9aDtoLm5leHQ9YztoLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24gdigpe2lmKC0xPT09ayYmbnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpe209ITA7dHJ5e2RvIHUoKTt3aGlsZShudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl9ZmluYWxseXttPSExLG51bGwhPT1kP3AoKTpuPSExfX19ZnVuY3Rpb24gdChhKXttPSEwO3ZhciBiPWU7ZT1hO3RyeXtpZihhKWZvcig7bnVsbCE9PWQ7KXt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKGQuZXhwaXJhdGlvblRpbWU8PWMpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTw9Yyl9ZWxzZSBicmVha31lbHNlIGlmKG51bGwhPT1kKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJiF3KCkpfX1maW5hbGx5e209ITEsZT1iLG51bGwhPT1kP3AoKTpuPSExLHYoKX19XG52YXIgeD1EYXRlLHk9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEMsRDtmdW5jdGlvbiBFKGEpe0M9QShmdW5jdGlvbihiKXt6KEQpO2EoYil9KTtEPXkoZnVuY3Rpb24oKXtCKEMpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgRj1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBGLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCl9O3ZhciByLHEsdyxHPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3c/Rz13aW5kb3c6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnbG9iYWwmJihHPWdsb2JhbCk7XG5pZihHJiZHLl9zY2hlZE1vY2spe3ZhciBIPUcuX3NjaGVkTW9jaztyPUhbMF07cT1IWzFdO3c9SFsyXTtleHBvcnRzLnVuc3RhYmxlX25vdz1IWzNdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIEk9bnVsbCxKPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1JKXRyeXtJKGEpfWZpbmFsbHl7ST1udWxsfX07cj1mdW5jdGlvbihhKXtudWxsIT09ST9zZXRUaW1lb3V0KHIsMCxhKTooST1hLHNldFRpbWVvdXQoSiwwLCExKSl9O3E9ZnVuY3Rpb24oKXtJPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe0w9ITE7dmFyIGE9SyxiPU07Sz1udWxsO009LTE7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxmPSExO2lmKDA+PVAtYylpZigtMSE9PWImJmI8PWMpZj0hMDtlbHNle058fChOPSEwLEUoVikpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGYpfWZpbmFsbHl7Tz0hMX19fTtcbnZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFYpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLFUucG9zdE1lc3NhZ2Uodm9pZCAwKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/VS5wb3N0TWVzc2FnZSh2b2lkIDApOk58fChOPSEwLEUoVikpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPWcsZj1rO2c9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goZyl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Z312YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBjPS0xIT09az9rOmV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQpYj1jK2IudGltZW91dDtlbHNlIHN3aXRjaChnKXtjYXNlIDE6Yj1jKy0xO2JyZWFrO2Nhc2UgMjpiPWMrMjUwO2JyZWFrO2Nhc2UgNTpiPWMrMTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6Yj1jKzFFNDticmVhaztkZWZhdWx0OmI9Yys1RTN9YT17Y2FsbGJhY2s6YSxwcmlvcml0eUxldmVsOmcsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobnVsbD09PWQpZD1hLm5leHQ9YS5wcmV2aW91cz1hLHAoKTtlbHNle2M9bnVsbDt2YXIgZj1kO2Rve2lmKGYuZXhwaXJhdGlvblRpbWU+Yil7Yz1mO2JyZWFrfWY9Zi5uZXh0fXdoaWxlKGYhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWEscCgpKTtcbmI9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1hO2EubmV4dD1jO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGI9PT1hKWQ9bnVsbDtlbHNle2E9PT1kJiYoZD1iKTt2YXIgYz1hLnByZXZpb3VzO2MubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9ZztyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtnPWMsaz1mLHYoKX19fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIGd9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiFlJiYobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8bHx8dygpKX07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe251bGwhPT1kJiZwKCl9O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gZH07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kID8gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpIDogJ2dldCc7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyBSZXBvcnQgfSBmcm9tIFwiLi4vLi4vbW9kZWwvUmVwb3J0XCI7XHJcbmltcG9ydCB7IEJ1aWxkIH0gZnJvbSBcIi4uLy4uL21vZGVsL0J1aWxkXCI7XHJcblxyXG5leHBvcnQgY29uc3QgTE9BRF9DVUNVTUJFUl9KT0JTID0gJ0xvYWQgQ3VjdW1iZXIgSm9icyc7XHJcbmV4cG9ydCBjb25zdCBTQVZFX0NVQ1VNQkVSX0pPQlMgPSAnU2F2ZSBDdWN1bWJlciBKb2JzJztcclxuZXhwb3J0IGNvbnN0IExPQURfQ1VDVU1CRVJfQlVJTERTID0gICdMb2FkIEN1Y3VtYmVyIEJ1aWxkcyc7XHJcbmV4cG9ydCBjb25zdCBTQVZFX0NVQ1VNQkVSX0JVSUxEUyA9ICAnU2F2ZSBDdWN1bWJlciBCdWlsZHMnO1xyXG5leHBvcnQgY29uc3QgTE9BRF9DVUNVTUJFUl9SRVBPUlQgPSAnTG9hZCBDdWN1bWJlciBSZXBvcnQnO1xyXG5leHBvcnQgY29uc3QgU0FWRV9DVUNVTUJFUl9SRVBPUlQgPSAnU2F2ZSBDdWN1bWJlciBSZXBvcnQnO1xyXG5cclxuaW50ZXJmYWNlIExvYWRDdWN1bWJlckpvYnMge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIExPQURfQ1VDVU1CRVJfSk9CUztcclxufVxyXG5cclxuaW50ZXJmYWNlIFNhdmVDdWN1bWJlckpvYnMge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIFNBVkVfQ1VDVU1CRVJfSk9CUztcclxuICAgIHJlYWRvbmx5IGpvYnM6IEFycmF5PHN0cmluZz47XHJcbn1cclxuXHJcbmludGVyZmFjZSBMb2FkQ3VjdW1iZXJCdWlsZHMge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIExPQURfQ1VDVU1CRVJfQlVJTERTO1xyXG4gICAgcmVhZG9ubHkgam9iOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTYXZlQ3VjdW1iZXJCdWlsZHMge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIFNBVkVfQ1VDVU1CRVJfQlVJTERTO1xyXG4gICAgcmVhZG9ubHkgYnVpbGRzOiBBcnJheTxCdWlsZD47XHJcbn1cclxuXHJcbmludGVyZmFjZSBMb2FkQ3VjdW1iZXJSZXBvcnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIExPQURfQ1VDVU1CRVJfUkVQT1JUO1xyXG4gICAgcmVhZG9ubHkgam9iOiBzdHJpbmc7XHJcbiAgICByZWFkb25seSBidWlsZElkOiBudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTYXZlQ3VjdW1iZXJSZXBvcnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIFNBVkVfQ1VDVU1CRVJfUkVQT1JUO1xyXG4gICAgcmVhZG9ubHkgcmVwb3J0OiBSZXBvcnQ7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEFwcEFjdGlvbnMgPVxyXG4gICAgTG9hZEN1Y3VtYmVySm9icyB8XHJcbiAgICBTYXZlQ3VjdW1iZXJKb2JzIHxcclxuICAgIExvYWRDdWN1bWJlckJ1aWxkcyB8XHJcbiAgICBTYXZlQ3VjdW1iZXJCdWlsZHMgfFxyXG4gICAgTG9hZEN1Y3VtYmVyUmVwb3J0IHxcclxuICAgIFNhdmVDdWN1bWJlclJlcG9ydDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7IC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cblxuICB2YXIgY3VycmVudCA9IFtdO1xuICB2YXIgbmV4dCA9IFtdO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICBuZXh0LnB1c2gobGlzdGVuZXIpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcblxudmFyIFByb3ZpZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIHZhciBzdG9yZSA9IHByb3BzLnN0b3JlO1xuICAgIF90aGlzLm5vdGlmeVN1YnNjcmliZXJzID0gX3RoaXMubm90aWZ5U3Vic2NyaWJlcnMuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gX3RoaXMubm90aWZ5U3Vic2NyaWJlcnM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgIH07XG4gICAgX3RoaXMucHJldmlvdXNTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHRoaXMucHJldmlvdXNTdGF0ZSAhPT0gdGhpcy5wcm9wcy5zdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5zdGF0ZS5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnN0b3JlICE9PSBwcmV2UHJvcHMuc3RvcmUpIHtcbiAgICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnByb3BzLnN0b3JlKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gdGhpcy5ub3RpZnlTdWJzY3JpYmVycztcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdG9yZTogdGhpcy5wcm9wcy5zdG9yZSxcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5U3Vic2NyaWJlcnMgPSBmdW5jdGlvbiBub3RpZnlTdWJzY3JpYmVycygpIHtcbiAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgQ29udGV4dCA9IHRoaXMucHJvcHMuY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZVxuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn0oQ29tcG9uZW50KTtcblxuUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSksXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG59O1xuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IGJlY2F1c2Ugd2Ugd2FudFxuLy8gYGNvbm5lY3RgIHRvIHBlcmZvcm0gc3luYyB1cGRhdGVzIHRvIGEgcmVmIHRvIHNhdmUgdGhlIGxhdGVzdCBwcm9wcyBhZnRlclxuLy8gYSByZW5kZXIgaXMgYWN0dWFsbHkgY29tbWl0dGVkIHRvIHRoZSBET00uXG5cblxudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiZ2V0RGlzcGxheU5hbWVcIiwgXCJtZXRob2ROYW1lXCIsIFwicmVuZGVyQ291bnRQcm9wXCIsIFwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzXCIsIFwic3RvcmVLZXlcIiwgXCJ3aXRoUmVmXCIsIFwiZm9yd2FyZFJlZlwiLCBcImNvbnRleHRcIl0pO1xuXG4gIGludmFyaWFudChyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCwgXCJyZW5kZXJDb3VudFByb3AgaXMgcmVtb3ZlZC4gcmVuZGVyIGNvdW50aW5nIGlzIGJ1aWx0IGludG8gdGhlIGxhdGVzdCBSZWFjdCBEZXYgVG9vbHMgcHJvZmlsaW5nIGV4dGVuc2lvblwiKTtcbiAgaW52YXJpYW50KCF3aXRoUmVmLCAnd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG4gIGludmFyaWFudChzdG9yZUtleSA9PT0gJ3N0b3JlJywgJ3N0b3JlS2V5IGhhcyBiZWVuIHJlbW92ZWQgYW5kIGRvZXMgbm90IGRvIGFueXRoaW5nLiAnICsgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGludmFyaWFudChpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCksIFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgZm9yd2FyZGVkUmVmID0gcHJvcHMuZm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCBmb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKSxcbiAgICAgICAgICBwcm9wc0NvbnRleHQgPSBfdXNlTWVtb1swXSxcbiAgICAgICAgICBmb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lcihSZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dFxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuICAgICAgaW52YXJpYW50KGRpZFN0b3JlQ29tZUZyb21Qcm9wcyB8fCBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCwgXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZSB8fCBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IG51bGwgOiBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gVGhpcyBjYW5cbiAgICAgICAgLy8gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24ncyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZSAgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cblxuICAgICAgICB2YXIgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF91c2VNZW1vMlswXSxcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzID0gX3VzZU1lbW8yWzFdOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuXG4gICAgICB2YXIgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0sIFtkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZSwgc3Vic2NyaXB0aW9uXSk7IC8vIFdlIG5lZWQgdG8gZm9yY2UgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCB0byByZS1yZW5kZXIgd2hlbmV2ZXIgYSBSZWR1eCBzdG9yZSB1cGRhdGVcbiAgICAgIC8vIGNhdXNlcyBhIGNoYW5nZSB0byB0aGUgY2FsY3VsYXRlZCBjaGlsZCBjb21wb25lbnQgcHJvcHMgKG9yIHdlIGNhdWdodCBhbiBlcnJvciBpbiBtYXBTdGF0ZSlcblxuICAgICAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIsIEVNUFRZX0FSUkFZLCBpbml0U3RhdGVVcGRhdGVzKSxcbiAgICAgICAgICBfdXNlUmVkdWNlciQgPSBfdXNlUmVkdWNlclswXSxcbiAgICAgICAgICBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ID0gX3VzZVJlZHVjZXIkWzBdLFxuICAgICAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2ggPSBfdXNlUmVkdWNlclsxXTsgLy8gUHJvcGFnYXRlIGFueSBtYXBTdGF0ZS9tYXBEaXNwYXRjaCBlcnJvcnMgdXB3YXJkc1xuXG5cbiAgICAgIGlmIChwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ICYmIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcjtcbiAgICAgIH0gLy8gU2V0IHVwIHJlZnMgdG8gY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0aGUgc3Vic2NyaXB0aW9uIGVmZmVjdCBhbmQgdGhlIHJlbmRlciBsb2dpY1xuXG5cbiAgICAgIHZhciBsYXN0Q2hpbGRQcm9wcyA9IHVzZVJlZigpO1xuICAgICAgdmFyIGxhc3RXcmFwcGVyUHJvcHMgPSB1c2VSZWYod3JhcHBlclByb3BzKTtcbiAgICAgIHZhciBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICB2YXIgcmVuZGVySXNTY2hlZHVsZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgdmFyIGFjdHVhbENoaWxkUHJvcHMgPSB1c2VQdXJlT25seU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUcmlja3kgbG9naWMgaGVyZTpcbiAgICAgICAgLy8gLSBUaGlzIHJlbmRlciBtYXkgaGF2ZSBiZWVuIHRyaWdnZXJlZCBieSBhIFJlZHV4IHN0b3JlIHVwZGF0ZSB0aGF0IHByb2R1Y2VkIG5ldyBjaGlsZCBwcm9wc1xuICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbmV3IGNoaWxkIHByb3BzLCBhbmQgdGhlIHNhbWUgd3JhcHBlciBwcm9wcywgd2Uga25vdyB3ZSBzaG91bGQgdXNlIHRoZSBuZXcgY2hpbGQgcHJvcHMgYXMtaXMuXG4gICAgICAgIC8vIEJ1dCwgaWYgd2UgaGF2ZSBuZXcgd3JhcHBlciBwcm9wcywgdGhvc2UgbWlnaHQgY2hhbmdlIHRoZSBjaGlsZCBwcm9wcywgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGluZ3MuXG4gICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQ7XG4gICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgLy8gVGhpcyB3aWxsIGxpa2VseSBjYXVzZSBCYWQgVGhpbmdzIChUTSkgdG8gaGFwcGVuIGluIENvbmN1cnJlbnQgTW9kZS5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvIHRoaXMgYmVjYXVzZSBvbiByZW5kZXJzIF9ub3RfIGNhdXNlZCBieSBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRoZSBsYXRlc3Qgc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3BzU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgd3JhcHBlclByb3BzKTtcbiAgICAgIH0sIFtzdG9yZSwgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICAgICAgICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICAgICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgICAgICAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gICAgICAgIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgICAgICAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgICAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAgICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICAgICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICAgICAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgICAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICAgICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgIGxhdGVzdFN0b3JlU3RhdGU6IGxhdGVzdFN0b3JlU3RhdGUsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICAgICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICAgICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAgICAgICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gICAgICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gICAgICAgIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgICAgICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuXG4gICAgICAgICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgICAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgICAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xuICAgICAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0sIFtmb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgZm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duLmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpO1xuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhY3Rpb25DcmVhdG9ycyk7XG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiBcIiArIFwiT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLlwiKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSwgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcyB9O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXG4gKlxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XG4gKiB9XG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgfVxuXG4gIGludmFyaWFudChzZWxlY3RvciwgXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JzXCIpO1xuXG4gIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJBbiBlcnJvciBvY2N1cmVkIHdoaWxlIHNlbGVjdGluZyB0aGUgc3RvcmUgc3RhdGU6IFwiICsgZXJyLm1lc3NhZ2UgKyBcIi5cIjtcblxuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcbk9yaWdpbmFsIHN0YWNrIHRyYWNlOlwiO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKHt9KTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn0iLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yLCB1c2VTdG9yZSwgc2hhbGxvd0VxdWFsIH07IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IExPQURfQ1VDVU1CRVJfSk9CUyB9IGZyb20gXCIuLi9zdG9yZS9hY3Rpb24vYXBwLmFjdGlvblwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcblxyXG5jbGFzcyBKb2JTZWFyY2hGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PiB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcDogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNsaWNrKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwib25DbGlja1wiKTtcclxuICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKHtcclxuICAgICAgICAgICAgdHlwZTogTE9BRF9DVUNVTUJFUl9KT0JTXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLm9uQ2xpY2soKX0+Z2V0Q3VjdW1iZXJKb2JzPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImpvYklucHV0XCI+Q2hvb3NlIGEgam9iIGZyb20gdGhlIGxpc3Q6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCBsaXN0PVwiam9iTGlzdFwiIGlkPVwiam9iSW5wdXRcIiBuYW1lPVwiam9iSW5wdXRcIi8+XHJcbiAgICAgICAgICAgICAgICA8ZGF0YWxpc3QgaWQ9XCJqb2JMaXN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImpvYjFcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJqb2IyXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiam9iM1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2RhdGFsaXN0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoKShKb2JTZWFyY2hGb3JtKSIsInZhciBjcmVhdGVTeW1ib2wgPSBmdW5jdGlvbiBjcmVhdGVTeW1ib2wobmFtZSkge1xuICByZXR1cm4gXCJAQHJlZHV4LXNhZ2EvXCIgKyBuYW1lO1xufTtcblxudmFyIENBTkNFTCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ0NBTkNFTF9QUk9NSVNFJyk7XG52YXIgQ0hBTk5FTF9FTkRfVFlQRSA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ0NIQU5ORUxfRU5EJyk7XG52YXIgSU8gPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU3ltYm9sKCdJTycpO1xudmFyIE1BVENIID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVN5bWJvbCgnTUFUQ0gnKTtcbnZhciBNVUxUSUNBU1QgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU3ltYm9sKCdNVUxUSUNBU1QnKTtcbnZhciBTQUdBX0FDVElPTiA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ1NBR0FfQUNUSU9OJyk7XG52YXIgU0VMRl9DQU5DRUxMQVRJT04gPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU3ltYm9sKCdTRUxGX0NBTkNFTExBVElPTicpO1xudmFyIFRBU0sgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU3ltYm9sKCdUQVNLJyk7XG52YXIgVEFTS19DQU5DRUwgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU3ltYm9sKCdUQVNLX0NBTkNFTCcpO1xudmFyIFRFUk1JTkFURSA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTeW1ib2woJ1RFUk1JTkFURScpO1xudmFyIFNBR0FfTE9DQVRJT04gPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU3ltYm9sKCdMT0NBVElPTicpO1xuXG5leHBvcnQgeyBDQU5DRUwsIENIQU5ORUxfRU5EX1RZUEUsIElPLCBNQVRDSCwgTVVMVElDQVNULCBTQUdBX0FDVElPTiwgU0VMRl9DQU5DRUxMQVRJT04sIFRBU0ssIFRBU0tfQ0FOQ0VMLCBURVJNSU5BVEUsIFNBR0FfTE9DQVRJT04gfTtcbiIsImltcG9ydCB7IFRBU0ssIFNBR0FfQUNUSU9OLCBNVUxUSUNBU1QsIElPIH0gZnJvbSAnQHJlZHV4LXNhZ2Evc3ltYm9scyc7XG5cbnZhciB1bmRlZiA9IGZ1bmN0aW9uIHVuZGVmKHYpIHtcbiAgcmV0dXJuIHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkO1xufTtcbnZhciBub3RVbmRlZiA9IGZ1bmN0aW9uIG5vdFVuZGVmKHYpIHtcbiAgcmV0dXJuIHYgIT09IG51bGwgJiYgdiAhPT0gdW5kZWZpbmVkO1xufTtcbnZhciBmdW5jID0gZnVuY3Rpb24gZnVuYyhmKSB7XG4gIHJldHVybiB0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJztcbn07XG52YXIgbnVtYmVyID0gZnVuY3Rpb24gbnVtYmVyKG4pIHtcbiAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJztcbn07XG52YXIgc3RyaW5nID0gZnVuY3Rpb24gc3RyaW5nKHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJztcbn07XG52YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIG9iamVjdCA9IGZ1bmN0aW9uIG9iamVjdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiAhYXJyYXkob2JqKSAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jztcbn07XG52YXIgcHJvbWlzZSA9IGZ1bmN0aW9uIHByb21pc2UocCkge1xuICByZXR1cm4gcCAmJiBmdW5jKHAudGhlbik7XG59O1xudmFyIGl0ZXJhdG9yID0gZnVuY3Rpb24gaXRlcmF0b3IoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGZ1bmMoaXQubmV4dCkgJiYgZnVuYyhpdC50aHJvdyk7XG59O1xudmFyIGl0ZXJhYmxlID0gZnVuY3Rpb24gaXRlcmFibGUoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGZ1bmMoU3ltYm9sKSA/IGZ1bmMoaXRbU3ltYm9sLml0ZXJhdG9yXSkgOiBhcnJheShpdCk7XG59O1xudmFyIHRhc2sgPSBmdW5jdGlvbiB0YXNrKHQpIHtcbiAgcmV0dXJuIHQgJiYgdFtUQVNLXTtcbn07XG52YXIgc2FnYUFjdGlvbiA9IGZ1bmN0aW9uIHNhZ2FBY3Rpb24oYSkge1xuICByZXR1cm4gQm9vbGVhbihhICYmIGFbU0FHQV9BQ1RJT05dKTtcbn07XG52YXIgb2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIG9ic2VydmFibGUob2IpIHtcbiAgcmV0dXJuIG9iICYmIGZ1bmMob2Iuc3Vic2NyaWJlKTtcbn07XG52YXIgYnVmZmVyID0gZnVuY3Rpb24gYnVmZmVyKGJ1Zikge1xuICByZXR1cm4gYnVmICYmIGZ1bmMoYnVmLmlzRW1wdHkpICYmIGZ1bmMoYnVmLnRha2UpICYmIGZ1bmMoYnVmLnB1dCk7XG59O1xudmFyIHBhdHRlcm4gPSBmdW5jdGlvbiBwYXR0ZXJuKHBhdCkge1xuICByZXR1cm4gcGF0ICYmIChzdHJpbmcocGF0KSB8fCBzeW1ib2wocGF0KSB8fCBmdW5jKHBhdCkgfHwgYXJyYXkocGF0KSAmJiBwYXQuZXZlcnkocGF0dGVybikpO1xufTtcbnZhciBjaGFubmVsID0gZnVuY3Rpb24gY2hhbm5lbChjaCkge1xuICByZXR1cm4gY2ggJiYgZnVuYyhjaC50YWtlKSAmJiBmdW5jKGNoLmNsb3NlKTtcbn07XG52YXIgc3RyaW5nYWJsZUZ1bmMgPSBmdW5jdGlvbiBzdHJpbmdhYmxlRnVuYyhmKSB7XG4gIHJldHVybiBmdW5jKGYpICYmIGYuaGFzT3duUHJvcGVydHkoJ3RvU3RyaW5nJyk7XG59O1xudmFyIHN5bWJvbCA9IGZ1bmN0aW9uIHN5bWJvbChzeW0pIHtcbiAgcmV0dXJuIEJvb2xlYW4oc3ltKSAmJiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHN5bS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIHN5bSAhPT0gU3ltYm9sLnByb3RvdHlwZTtcbn07XG52YXIgbXVsdGljYXN0ID0gZnVuY3Rpb24gbXVsdGljYXN0KGNoKSB7XG4gIHJldHVybiBjaGFubmVsKGNoKSAmJiBjaFtNVUxUSUNBU1RdO1xufTtcbnZhciBlZmZlY3QgPSBmdW5jdGlvbiBlZmZlY3QoZWZmKSB7XG4gIHJldHVybiBlZmYgJiYgZWZmW0lPXTtcbn07XG5cbmV4cG9ydCB7IHVuZGVmLCBub3RVbmRlZiwgZnVuYywgbnVtYmVyLCBzdHJpbmcsIGFycmF5LCBvYmplY3QsIHByb21pc2UsIGl0ZXJhdG9yLCBpdGVyYWJsZSwgdGFzaywgc2FnYUFjdGlvbiwgb2JzZXJ2YWJsZSwgYnVmZmVyLCBwYXR0ZXJuLCBjaGFubmVsLCBzdHJpbmdhYmxlRnVuYywgc3ltYm9sLCBtdWx0aWNhc3QsIGVmZmVjdCB9O1xuIiwiaW1wb3J0IHsgQ0FOQ0VMIH0gZnJvbSAnQHJlZHV4LXNhZ2Evc3ltYm9scyc7XG5cbmZ1bmN0aW9uIGRlbGF5UChtcywgdmFsKSB7XG4gIGlmICh2YWwgPT09IHZvaWQgMCkge1xuICAgIHZhbCA9IHRydWU7XG4gIH1cblxuICB2YXIgdGltZW91dElkO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChyZXNvbHZlLCBtcywgdmFsKTtcbiAgfSk7XG5cbiAgcHJvbWlzZVtDQU5DRUxdID0gZnVuY3Rpb24gKCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICB9O1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWxheVA7XG4iLCJpbXBvcnQgeyBUQVNLX0NBTkNFTCwgVEVSTUlOQVRFLCBTQUdBX0xPQ0FUSU9OLCBTQUdBX0FDVElPTiwgSU8sIFNFTEZfQ0FOQ0VMTEFUSU9OIH0gZnJvbSAnQHJlZHV4LXNhZ2Evc3ltYm9scyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBhcnJheSwgbm90VW5kZWYsIHBhdHRlcm4sIG11bHRpY2FzdCwgY2hhbm5lbCwgdW5kZWYsIHRhc2ssIGZ1bmMsIGJ1ZmZlciwgc3RyaW5nLCBvYmplY3QgfSBmcm9tICdAcmVkdXgtc2FnYS9pcyc7XG5pbXBvcnQgZGVsYXlQIGZyb20gJ0ByZWR1eC1zYWdhL2RlbGF5LXAnO1xuXG52YXIga29uc3QgPSBmdW5jdGlvbiBrb25zdCh2KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG59O1xudmFyIGtUcnVlID1cbi8qI19fUFVSRV9fKi9cbmtvbnN0KHRydWUpO1xudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiBpZGVudGl0eSh2KSB7XG4gIHJldHVybiB2O1xufTtcbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nO1xudmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSBoYXNTeW1ib2wgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IgPyBTeW1ib2wuYXN5bmNJdGVyYXRvciA6ICdAQGFzeW5jSXRlcmF0b3InO1xuZnVuY3Rpb24gY2hlY2sodmFsdWUsIHByZWRpY2F0ZSwgZXJyb3IpIHtcbiAgaWYgKCFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufVxudmFyIGFzc2lnbldpdGhTeW1ib2xzID0gZnVuY3Rpb24gYXNzaWduV2l0aFN5bWJvbHModGFyZ2V0LCBzb3VyY2UpIHtcbiAgX2V4dGVuZHModGFyZ2V0LCBzb3VyY2UpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgIHRhcmdldFtzXSA9IHNvdXJjZVtzXTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBmbGF0TWFwID0gZnVuY3Rpb24gZmxhdE1hcChtYXBwZXIsIGFycikge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gKF9yZWYgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWYsIGFyci5tYXAobWFwcGVyKSk7XG59O1xuZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBpdGVtKSB7XG4gIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG5cbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBmbigpO1xuICB9O1xufVxuXG52YXIga1Rocm93ID0gZnVuY3Rpb24ga1Rocm93KGVycikge1xuICB0aHJvdyBlcnI7XG59O1xuXG52YXIga1JldHVybiA9IGZ1bmN0aW9uIGtSZXR1cm4odmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgZG9uZTogdHJ1ZVxuICB9O1xufTtcblxuZnVuY3Rpb24gbWFrZUl0ZXJhdG9yKG5leHQsIHRocm8sIG5hbWUpIHtcbiAgaWYgKHRocm8gPT09IHZvaWQgMCkge1xuICAgIHRocm8gPSBrVGhyb3c7XG4gIH1cblxuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICdpdGVyYXRvcic7XG4gIH1cblxuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbWV0YToge1xuICAgICAgbmFtZTogbmFtZVxuICAgIH0sXG4gICAgbmV4dDogbmV4dCxcbiAgICB0aHJvdzogdGhybyxcbiAgICByZXR1cm46IGtSZXR1cm4sXG4gICAgaXNTYWdhSXRlcmF0b3I6IHRydWVcbiAgfTtcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3I7XG59XG5mdW5jdGlvbiBsb2dFcnJvcihlcnJvciwgX3JlZjIpIHtcbiAgdmFyIHNhZ2FTdGFjayA9IF9yZWYyLnNhZ2FTdGFjaztcblxuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUqL1xuICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgY29uc29sZS5lcnJvcihzYWdhU3RhY2spO1xufVxudmFyIGludGVybmFsRXJyID0gZnVuY3Rpb24gaW50ZXJuYWxFcnIoZXJyKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoXCJcXG4gIHJlZHV4LXNhZ2E6IEVycm9yIGNoZWNraW5nIGhvb2tzIGRldGVjdGVkIGFuIGluY29uc2lzdGVudCBzdGF0ZS4gVGhpcyBpcyBsaWtlbHkgYSBidWdcXG4gIGluIHJlZHV4LXNhZ2EgY29kZSBhbmQgbm90IHlvdXJzLiBUaGFua3MgZm9yIHJlcG9ydGluZyB0aGlzIGluIHRoZSBwcm9qZWN0J3MgZ2l0aHViIHJlcG8uXFxuICBFcnJvcjogXCIgKyBlcnIgKyBcIlxcblwiKTtcbn07XG52YXIgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcgPSBmdW5jdGlvbiBjcmVhdGVTZXRDb250ZXh0V2FybmluZyhjdHgsIHByb3BzKSB7XG4gIHJldHVybiAoY3R4ID8gY3R4ICsgJy4nIDogJycpICsgXCJzZXRDb250ZXh0KHByb3BzKTogYXJndW1lbnQgXCIgKyBwcm9wcyArIFwiIGlzIG5vdCBhIHBsYWluIG9iamVjdFwiO1xufTtcbnZhciBGUk9aRU5fQUNUSU9OX0VSUk9SID0gXCJZb3UgY2FuJ3QgcHV0IChhLmsuYS4gZGlzcGF0Y2ggZnJvbSBzYWdhKSBmcm96ZW4gYWN0aW9ucy5cXG5XZSBoYXZlIHRvIGRlZmluZSBhIHNwZWNpYWwgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhvc2UgYWN0aW9ucyBmb3Igc2NoZWR1bGluZyBwdXJwb3Nlcy5cXG5PdGhlcndpc2UgeW91IHdvdWxkbid0IGJlIGFibGUgdG8gY29tbXVuaWNhdGUgcHJvcGVybHkgYmV0d2VlbiBzYWdhcyAmIG90aGVyIHN1YnNjcmliZXJzIChhY3Rpb24gb3JkZXJpbmcgd291bGQgYmVjb21lIGZhciBsZXNzIHByZWRpY3RhYmxlKS5cXG5JZiB5b3UgYXJlIHVzaW5nIHJlZHV4IGFuZCB5b3UgY2FyZSBhYm91dCB0aGlzIGJlaGF2aW91ciAoZnJvemVuIGFjdGlvbnMpLFxcbnRoZW4geW91IG1pZ2h0IHdhbnQgdG8gc3dpdGNoIHRvIGZyZWV6aW5nIGFjdGlvbnMgaW4gYSBtaWRkbGV3YXJlIHJhdGhlciB0aGFuIGluIGFjdGlvbiBjcmVhdG9yLlxcbkV4YW1wbGUgaW1wbGVtZW50YXRpb246XFxuXFxuY29uc3QgZnJlZXplQWN0aW9ucyA9IHN0b3JlID0+IG5leHQgPT4gYWN0aW9uID0+IG5leHQoT2JqZWN0LmZyZWV6ZShhY3Rpb24pKVxcblwiOyAvLyBjcmVhdGVzIGVtcHR5LCBidXQgbm90LWhvbGV5IGFycmF5XG5cbnZhciBjcmVhdGVFbXB0eUFycmF5ID0gZnVuY3Rpb24gY3JlYXRlRW1wdHlBcnJheShuKSB7XG4gIHJldHVybiBBcnJheS5hcHBseShudWxsLCBuZXcgQXJyYXkobikpO1xufTtcbnZhciB3cmFwU2FnYURpc3BhdGNoID0gZnVuY3Rpb24gd3JhcFNhZ2FEaXNwYXRjaChkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVjayhhY3Rpb24sIGZ1bmN0aW9uIChhYykge1xuICAgICAgICByZXR1cm4gIU9iamVjdC5pc0Zyb3plbihhYyk7XG4gICAgICB9LCBGUk9aRU5fQUNUSU9OX0VSUk9SKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlzcGF0Y2goT2JqZWN0LmRlZmluZVByb3BlcnR5KGFjdGlvbiwgU0FHQV9BQ1RJT04sIHtcbiAgICAgIHZhbHVlOiB0cnVlXG4gICAgfSkpO1xuICB9O1xufTtcbnZhciBzaG91bGRUZXJtaW5hdGUgPSBmdW5jdGlvbiBzaG91bGRUZXJtaW5hdGUocmVzKSB7XG4gIHJldHVybiByZXMgPT09IFRFUk1JTkFURTtcbn07XG52YXIgc2hvdWxkQ2FuY2VsID0gZnVuY3Rpb24gc2hvdWxkQ2FuY2VsKHJlcykge1xuICByZXR1cm4gcmVzID09PSBUQVNLX0NBTkNFTDtcbn07XG52YXIgc2hvdWxkQ29tcGxldGUgPSBmdW5jdGlvbiBzaG91bGRDb21wbGV0ZShyZXMpIHtcbiAgcmV0dXJuIHNob3VsZFRlcm1pbmF0ZShyZXMpIHx8IHNob3VsZENhbmNlbChyZXMpO1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUFsbFN0eWxlQ2hpbGRDYWxsYmFja3Moc2hhcGUsIHBhcmVudENhbGxiYWNrKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc2hhcGUpO1xuICB2YXIgdG90YWxDb3VudCA9IGtleXMubGVuZ3RoO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2sodG90YWxDb3VudCwgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjID4gMDtcbiAgICB9LCAnY3JlYXRlQWxsU3R5bGVDaGlsZENhbGxiYWNrczogZ2V0IGFuIGVtcHR5IGFycmF5IG9yIG9iamVjdCcpO1xuICB9XG5cbiAgdmFyIGNvbXBsZXRlZENvdW50ID0gMDtcbiAgdmFyIGNvbXBsZXRlZDtcbiAgdmFyIHJlc3VsdHMgPSBhcnJheShzaGFwZSkgPyBjcmVhdGVFbXB0eUFycmF5KHRvdGFsQ291bnQpIDoge307XG4gIHZhciBjaGlsZENhbGxiYWNrcyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrRW5kKCkge1xuICAgIGlmIChjb21wbGV0ZWRDb3VudCA9PT0gdG90YWxDb3VudCkge1xuICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgIHBhcmVudENhbGxiYWNrKHJlc3VsdHMpO1xuICAgIH1cbiAgfVxuXG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoQ2JBdEtleSA9IGZ1bmN0aW9uIGNoQ2JBdEtleShyZXMsIGlzRXJyKSB7XG4gICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRXJyIHx8IHNob3VsZENvbXBsZXRlKHJlcykpIHtcbiAgICAgICAgcGFyZW50Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICAgIHBhcmVudENhbGxiYWNrKHJlcywgaXNFcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0c1trZXldID0gcmVzO1xuICAgICAgICBjb21wbGV0ZWRDb3VudCsrO1xuICAgICAgICBjaGVja0VuZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjaENiQXRLZXkuY2FuY2VsID0gbm9vcDtcbiAgICBjaGlsZENhbGxiYWNrc1trZXldID0gY2hDYkF0S2V5O1xuICB9KTtcblxuICBwYXJlbnRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjb21wbGV0ZWQpIHtcbiAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gY2hpbGRDYWxsYmFja3Nba2V5XS5jYW5jZWwoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gY2hpbGRDYWxsYmFja3M7XG59XG5mdW5jdGlvbiBnZXRNZXRhSW5mbyhmbikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IGZuLm5hbWUgfHwgJ2Fub255bW91cycsXG4gICAgbG9jYXRpb246IGdldExvY2F0aW9uKGZuKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0TG9jYXRpb24oaW5zdHJ1bWVudGVkKSB7XG4gIHJldHVybiBpbnN0cnVtZW50ZWRbU0FHQV9MT0NBVElPTl07XG59XG5cbnZhciBCVUZGRVJfT1ZFUkZMT1cgPSBcIkNoYW5uZWwncyBCdWZmZXIgb3ZlcmZsb3chXCI7XG52YXIgT05fT1ZFUkZMT1dfVEhST1cgPSAxO1xudmFyIE9OX09WRVJGTE9XX0RST1AgPSAyO1xudmFyIE9OX09WRVJGTE9XX1NMSURFID0gMztcbnZhciBPTl9PVkVSRkxPV19FWFBBTkQgPSA0O1xudmFyIHplcm9CdWZmZXIgPSB7XG4gIGlzRW1wdHk6IGtUcnVlLFxuICBwdXQ6IG5vb3AsXG4gIHRha2U6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHJpbmdCdWZmZXIobGltaXQsIG92ZXJmbG93QWN0aW9uKSB7XG4gIGlmIChsaW1pdCA9PT0gdm9pZCAwKSB7XG4gICAgbGltaXQgPSAxMDtcbiAgfVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyYXkobGltaXQpO1xuICB2YXIgbGVuZ3RoID0gMDtcbiAgdmFyIHB1c2hJbmRleCA9IDA7XG4gIHZhciBwb3BJbmRleCA9IDA7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKGl0KSB7XG4gICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICBsZW5ndGgrKztcbiAgfTtcblxuICB2YXIgdGFrZSA9IGZ1bmN0aW9uIHRha2UoKSB7XG4gICAgaWYgKGxlbmd0aCAhPSAwKSB7XG4gICAgICB2YXIgaXQgPSBhcnJbcG9wSW5kZXhdO1xuICAgICAgYXJyW3BvcEluZGV4XSA9IG51bGw7XG4gICAgICBsZW5ndGgtLTtcbiAgICAgIHBvcEluZGV4ID0gKHBvcEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgIHJldHVybiBpdDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICB3aGlsZSAobGVuZ3RoKSB7XG4gICAgICBpdGVtcy5wdXNoKHRha2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBsZW5ndGggPT0gMDtcbiAgICB9LFxuICAgIHB1dDogZnVuY3Rpb24gcHV0KGl0KSB7XG4gICAgICBpZiAobGVuZ3RoIDwgbGltaXQpIHtcbiAgICAgICAgcHVzaChpdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZG91YmxlZExpbWl0O1xuXG4gICAgICAgIHN3aXRjaCAob3ZlcmZsb3dBY3Rpb24pIHtcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1RIUk9XOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEJVRkZFUl9PVkVSRkxPVyk7XG5cbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1NMSURFOlxuICAgICAgICAgICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICAgICAgICAgIHB1c2hJbmRleCA9IChwdXNoSW5kZXggKyAxKSAlIGxpbWl0O1xuICAgICAgICAgICAgcG9wSW5kZXggPSBwdXNoSW5kZXg7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfRVhQQU5EOlxuICAgICAgICAgICAgZG91YmxlZExpbWl0ID0gMiAqIGxpbWl0O1xuICAgICAgICAgICAgYXJyID0gZmx1c2goKTtcbiAgICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcG9wSW5kZXggPSAwO1xuICAgICAgICAgICAgYXJyLmxlbmd0aCA9IGRvdWJsZWRMaW1pdDtcbiAgICAgICAgICAgIGxpbWl0ID0gZG91YmxlZExpbWl0O1xuICAgICAgICAgICAgcHVzaChpdCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6IC8vIERST1BcblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB0YWtlOiB0YWtlLFxuICAgIGZsdXNoOiBmbHVzaFxuICB9O1xufVxuXG52YXIgbm9uZSA9IGZ1bmN0aW9uIG5vbmUoKSB7XG4gIHJldHVybiB6ZXJvQnVmZmVyO1xufTtcbnZhciBmaXhlZCA9IGZ1bmN0aW9uIGZpeGVkKGxpbWl0KSB7XG4gIHJldHVybiByaW5nQnVmZmVyKGxpbWl0LCBPTl9PVkVSRkxPV19USFJPVyk7XG59O1xudmFyIGRyb3BwaW5nID0gZnVuY3Rpb24gZHJvcHBpbmcobGltaXQpIHtcbiAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX0RST1ApO1xufTtcbnZhciBzbGlkaW5nID0gZnVuY3Rpb24gc2xpZGluZyhsaW1pdCkge1xuICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfU0xJREUpO1xufTtcbnZhciBleHBhbmRpbmcgPSBmdW5jdGlvbiBleHBhbmRpbmcoaW5pdGlhbFNpemUpIHtcbiAgcmV0dXJuIHJpbmdCdWZmZXIoaW5pdGlhbFNpemUsIE9OX09WRVJGTE9XX0VYUEFORCk7XG59O1xuXG52YXIgYnVmZmVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgbm9uZTogbm9uZSxcbiAgZml4ZWQ6IGZpeGVkLFxuICBkcm9wcGluZzogZHJvcHBpbmcsXG4gIHNsaWRpbmc6IHNsaWRpbmcsXG4gIGV4cGFuZGluZzogZXhwYW5kaW5nXG59KTtcblxudmFyIFRBS0UgPSAnVEFLRSc7XG52YXIgUFVUID0gJ1BVVCc7XG52YXIgQUxMID0gJ0FMTCc7XG52YXIgUkFDRSA9ICdSQUNFJztcbnZhciBDQUxMID0gJ0NBTEwnO1xudmFyIENQUyA9ICdDUFMnO1xudmFyIEZPUksgPSAnRk9SSyc7XG52YXIgSk9JTiA9ICdKT0lOJztcbnZhciBDQU5DRUwgPSAnQ0FOQ0VMJztcbnZhciBTRUxFQ1QgPSAnU0VMRUNUJztcbnZhciBBQ1RJT05fQ0hBTk5FTCA9ICdBQ1RJT05fQ0hBTk5FTCc7XG52YXIgQ0FOQ0VMTEVEID0gJ0NBTkNFTExFRCc7XG52YXIgRkxVU0ggPSAnRkxVU0gnO1xudmFyIEdFVF9DT05URVhUID0gJ0dFVF9DT05URVhUJztcbnZhciBTRVRfQ09OVEVYVCA9ICdTRVRfQ09OVEVYVCc7XG5cbnZhciBlZmZlY3RUeXBlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgVEFLRTogVEFLRSxcbiAgUFVUOiBQVVQsXG4gIEFMTDogQUxMLFxuICBSQUNFOiBSQUNFLFxuICBDQUxMOiBDQUxMLFxuICBDUFM6IENQUyxcbiAgRk9SSzogRk9SSyxcbiAgSk9JTjogSk9JTixcbiAgQ0FOQ0VMOiBDQU5DRUwsXG4gIFNFTEVDVDogU0VMRUNULFxuICBBQ1RJT05fQ0hBTk5FTDogQUNUSU9OX0NIQU5ORUwsXG4gIENBTkNFTExFRDogQ0FOQ0VMTEVELFxuICBGTFVTSDogRkxVU0gsXG4gIEdFVF9DT05URVhUOiBHRVRfQ09OVEVYVCxcbiAgU0VUX0NPTlRFWFQ6IFNFVF9DT05URVhUXG59KTtcblxudmFyIFRFU1RfSElOVCA9ICdcXG4oSElOVDogaWYgeW91IGFyZSBnZXR0aW5nIHRoaXMgZXJyb3JzIGluIHRlc3RzLCBjb25zaWRlciB1c2luZyBjcmVhdGVNb2NrVGFzayBmcm9tIEByZWR1eC1zYWdhL3Rlc3RpbmctdXRpbHMpJztcblxudmFyIG1ha2VFZmZlY3QgPSBmdW5jdGlvbiBtYWtlRWZmZWN0KHR5cGUsIHBheWxvYWQpIHtcbiAgdmFyIF9yZWY7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltJT10gPSB0cnVlLCBfcmVmLmNvbWJpbmF0b3IgPSBmYWxzZSwgX3JlZi50eXBlID0gdHlwZSwgX3JlZi5wYXlsb2FkID0gcGF5bG9hZCwgX3JlZjtcbn07XG5cbnZhciBpc0ZvcmtFZmZlY3QgPSBmdW5jdGlvbiBpc0ZvcmtFZmZlY3QoZWZmKSB7XG4gIHJldHVybiBlZmYgJiYgZWZmW0lPXSAmJiBlZmYudHlwZSA9PT0gRk9SSztcbn07XG5cbnZhciBkZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goZWZmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2soZWZmLCBpc0ZvcmtFZmZlY3QsICdkZXRhY2goZWZmKTogYXJndW1lbnQgbXVzdCBiZSBhIGZvcmsgZWZmZWN0Jyk7XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChGT1JLLCBfZXh0ZW5kcyh7fSwgZWZmLnBheWxvYWQsIHtcbiAgICBkZXRhY2hlZDogdHJ1ZVxuICB9KSk7XG59O1xuZnVuY3Rpb24gdGFrZShwYXR0ZXJuT3JDaGFubmVsLCBtdWx0aWNhc3RQYXR0ZXJuKSB7XG4gIGlmIChwYXR0ZXJuT3JDaGFubmVsID09PSB2b2lkIDApIHtcbiAgICBwYXR0ZXJuT3JDaGFubmVsID0gJyonO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNoZWNrKGFyZ3VtZW50c1swXSwgbm90VW5kZWYsICd0YWtlKHBhdHRlcm5PckNoYW5uZWwpOiBwYXR0ZXJuT3JDaGFubmVsIGlzIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgaWYgKHBhdHRlcm4ocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gbWFrZUVmZmVjdChUQUtFLCB7XG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuT3JDaGFubmVsXG4gICAgfSk7XG4gIH1cblxuICBpZiAobXVsdGljYXN0KHBhdHRlcm5PckNoYW5uZWwpICYmIG5vdFVuZGVmKG11bHRpY2FzdFBhdHRlcm4pICYmIHBhdHRlcm4obXVsdGljYXN0UGF0dGVybikpIHtcbiAgICByZXR1cm4gbWFrZUVmZmVjdChUQUtFLCB7XG4gICAgICBjaGFubmVsOiBwYXR0ZXJuT3JDaGFubmVsLFxuICAgICAgcGF0dGVybjogbXVsdGljYXN0UGF0dGVyblxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gbWFrZUVmZmVjdChUQUtFLCB7XG4gICAgICBjaGFubmVsOiBwYXR0ZXJuT3JDaGFubmVsXG4gICAgfSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcInRha2UocGF0dGVybk9yQ2hhbm5lbCk6IGFyZ3VtZW50IFwiICsgcGF0dGVybk9yQ2hhbm5lbCArIFwiIGlzIG5vdCB2YWxpZCBjaGFubmVsIG9yIGEgdmFsaWQgcGF0dGVyblwiKTtcbiAgfVxufVxudmFyIHRha2VNYXliZSA9IGZ1bmN0aW9uIHRha2VNYXliZSgpIHtcbiAgdmFyIGVmZiA9IHRha2UuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICBlZmYucGF5bG9hZC5tYXliZSA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuZnVuY3Rpb24gcHV0KGNoYW5uZWwkMSwgYWN0aW9uKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBjaGVjayhjaGFubmVsJDEsIG5vdFVuZGVmLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50IGNoYW5uZWwgaXMgdW5kZWZpbmVkJyk7XG4gICAgICBjaGVjayhjaGFubmVsJDEsIGNoYW5uZWwsIFwicHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50IFwiICsgY2hhbm5lbCQxICsgXCIgaXMgbm90IGEgdmFsaWQgY2hhbm5lbFwiKTtcbiAgICAgIGNoZWNrKGFjdGlvbiwgbm90VW5kZWYsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgYWN0aW9uIGlzIHVuZGVmaW5lZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGVjayhjaGFubmVsJDEsIG5vdFVuZGVmLCAncHV0KGFjdGlvbik6IGFyZ3VtZW50IGFjdGlvbiBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5kZWYoYWN0aW9uKSkge1xuICAgIGFjdGlvbiA9IGNoYW5uZWwkMTsgLy8gYHVuZGVmaW5lZGAgaW5zdGVhZCBvZiBgbnVsbGAgdG8gbWFrZSBkZWZhdWx0IHBhcmFtZXRlciB3b3JrXG5cbiAgICBjaGFubmVsJDEgPSB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChQVVQsIHtcbiAgICBjaGFubmVsOiBjaGFubmVsJDEsXG4gICAgYWN0aW9uOiBhY3Rpb25cbiAgfSk7XG59XG52YXIgcHV0UmVzb2x2ZSA9IGZ1bmN0aW9uIHB1dFJlc29sdmUoKSB7XG4gIHZhciBlZmYgPSBwdXQuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICBlZmYucGF5bG9hZC5yZXNvbHZlID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn07XG5mdW5jdGlvbiBhbGwoZWZmZWN0cykge1xuICB2YXIgZWZmID0gbWFrZUVmZmVjdChBTEwsIGVmZmVjdHMpO1xuICBlZmYuY29tYmluYXRvciA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59XG5mdW5jdGlvbiByYWNlKGVmZmVjdHMpIHtcbiAgdmFyIGVmZiA9IG1ha2VFZmZlY3QoUkFDRSwgZWZmZWN0cyk7XG4gIGVmZi5jb21iaW5hdG9yID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn0gLy8gdGhpcyBtYXRjaCBnZXRGbkNhbGxEZXNjcmlwdG9yIGxvZ2ljXG5cbnZhciB2YWxpZGF0ZUZuRGVzY3JpcHRvciA9IGZ1bmN0aW9uIHZhbGlkYXRlRm5EZXNjcmlwdG9yKGVmZmVjdE5hbWUsIGZuRGVzY3JpcHRvcikge1xuICBjaGVjayhmbkRlc2NyaXB0b3IsIG5vdFVuZGVmLCBlZmZlY3ROYW1lICsgXCI6IGFyZ3VtZW50IGZuIGlzIHVuZGVmaW5lZCBvciBudWxsXCIpO1xuXG4gIGlmIChmdW5jKGZuRGVzY3JpcHRvcikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY29udGV4dCA9IG51bGw7XG4gIHZhciBmbjtcblxuICBpZiAoYXJyYXkoZm5EZXNjcmlwdG9yKSkge1xuICAgIGNvbnRleHQgPSBmbkRlc2NyaXB0b3JbMF07XG4gICAgZm4gPSBmbkRlc2NyaXB0b3JbMV07XG4gICAgY2hlY2soZm4sIG5vdFVuZGVmLCBlZmZlY3ROYW1lICsgXCI6IGFyZ3VtZW50IG9mIHR5cGUgW2NvbnRleHQsIGZuXSBoYXMgdW5kZWZpbmVkIG9yIG51bGwgYGZuYFwiKTtcbiAgfSBlbHNlIGlmIChvYmplY3QoZm5EZXNjcmlwdG9yKSkge1xuICAgIGNvbnRleHQgPSBmbkRlc2NyaXB0b3IuY29udGV4dDtcbiAgICBmbiA9IGZuRGVzY3JpcHRvci5mbjtcbiAgICBjaGVjayhmbiwgbm90VW5kZWYsIGVmZmVjdE5hbWUgKyBcIjogYXJndW1lbnQgb2YgdHlwZSB7Y29udGV4dCwgZm59IGhhcyB1bmRlZmluZWQgb3IgbnVsbCBgZm5gXCIpO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrKGZuRGVzY3JpcHRvciwgZnVuYywgZWZmZWN0TmFtZSArIFwiOiBhcmd1bWVudCBmbiBpcyBub3QgZnVuY3Rpb25cIik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbnRleHQgJiYgc3RyaW5nKGZuKSkge1xuICAgIGNoZWNrKGNvbnRleHRbZm5dLCBmdW5jLCBlZmZlY3ROYW1lICsgXCI6IGNvbnRleHQgYXJndW1lbnRzIGhhcyBubyBzdWNoIG1ldGhvZCAtIFxcXCJcIiArIGZuICsgXCJcXFwiXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoZWNrKGZuLCBmdW5jLCBlZmZlY3ROYW1lICsgXCI6IHVucGFja2VkIGZuIGFyZ3VtZW50IChmcm9tIFtjb250ZXh0LCBmbl0gb3Ige2NvbnRleHQsIGZufSkgaXMgbm90IGEgZnVuY3Rpb25cIik7XG59O1xuXG5mdW5jdGlvbiBnZXRGbkNhbGxEZXNjcmlwdG9yKGZuRGVzY3JpcHRvciwgYXJncykge1xuICB2YXIgY29udGV4dCA9IG51bGw7XG4gIHZhciBmbjtcblxuICBpZiAoZnVuYyhmbkRlc2NyaXB0b3IpKSB7XG4gICAgZm4gPSBmbkRlc2NyaXB0b3I7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGFycmF5KGZuRGVzY3JpcHRvcikpIHtcbiAgICAgIGNvbnRleHQgPSBmbkRlc2NyaXB0b3JbMF07XG4gICAgICBmbiA9IGZuRGVzY3JpcHRvclsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGV4dCA9IGZuRGVzY3JpcHRvci5jb250ZXh0O1xuICAgICAgZm4gPSBmbkRlc2NyaXB0b3IuZm47XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgc3RyaW5nKGZuKSAmJiBmdW5jKGNvbnRleHRbZm5dKSkge1xuICAgICAgZm4gPSBjb250ZXh0W2ZuXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgZm46IGZuLFxuICAgIGFyZ3M6IGFyZ3NcbiAgfTtcbn1cblxudmFyIGlzTm90RGVsYXlFZmZlY3QgPSBmdW5jdGlvbiBpc05vdERlbGF5RWZmZWN0KGZuKSB7XG4gIHJldHVybiBmbiAhPT0gZGVsYXk7XG59O1xuXG5mdW5jdGlvbiBjYWxsKGZuRGVzY3JpcHRvcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBhcmcwID0gdHlwZW9mIGFyZ3NbMF0gPT09ICdudW1iZXInID8gYXJnc1swXSA6ICdtcyc7XG4gICAgY2hlY2soZm5EZXNjcmlwdG9yLCBpc05vdERlbGF5RWZmZWN0LCBcImluc3RlYWQgb2Ygd3JpdGluZyBgeWllbGQgY2FsbChkZWxheSwgXCIgKyBhcmcwICsgXCIpYCB3aGVyZSBkZWxheSBpcyBhbiBlZmZlY3QgZnJvbSBgcmVkdXgtc2FnYS9lZmZlY3RzYCB5b3Ugc2hvdWxkIHdyaXRlIGB5aWVsZCBkZWxheShcIiArIGFyZzAgKyBcIilgXCIpO1xuICAgIHZhbGlkYXRlRm5EZXNjcmlwdG9yKCdjYWxsJywgZm5EZXNjcmlwdG9yKTtcbiAgfVxuXG4gIHJldHVybiBtYWtlRWZmZWN0KENBTEwsIGdldEZuQ2FsbERlc2NyaXB0b3IoZm5EZXNjcmlwdG9yLCBhcmdzKSk7XG59XG5mdW5jdGlvbiBhcHBseShjb250ZXh0LCBmbiwgYXJncykge1xuICBpZiAoYXJncyA9PT0gdm9pZCAwKSB7XG4gICAgYXJncyA9IFtdO1xuICB9XG5cbiAgdmFyIGZuRGVzY3JpcHRvciA9IFtjb250ZXh0LCBmbl07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZUZuRGVzY3JpcHRvcignYXBwbHknLCBmbkRlc2NyaXB0b3IpO1xuICB9XG5cbiAgcmV0dXJuIG1ha2VFZmZlY3QoQ0FMTCwgZ2V0Rm5DYWxsRGVzY3JpcHRvcihbY29udGV4dCwgZm5dLCBhcmdzKSk7XG59XG5mdW5jdGlvbiBjcHMoZm5EZXNjcmlwdG9yKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVGbkRlc2NyaXB0b3IoJ2NwcycsIGZuRGVzY3JpcHRvcik7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChDUFMsIGdldEZuQ2FsbERlc2NyaXB0b3IoZm5EZXNjcmlwdG9yLCBhcmdzKSk7XG59XG5mdW5jdGlvbiBmb3JrKGZuRGVzY3JpcHRvcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRm5EZXNjcmlwdG9yKCdmb3JrJywgZm5EZXNjcmlwdG9yKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHJldHVybiBtYWtlRWZmZWN0KEZPUkssIGdldEZuQ2FsbERlc2NyaXB0b3IoZm5EZXNjcmlwdG9yLCBhcmdzKSk7XG59XG5mdW5jdGlvbiBzcGF3bihmbkRlc2NyaXB0b3IpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZUZuRGVzY3JpcHRvcignc3Bhd24nLCBmbkRlc2NyaXB0b3IpO1xuICB9XG5cbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgcmV0dXJuIGRldGFjaChmb3JrLmFwcGx5KHZvaWQgMCwgW2ZuRGVzY3JpcHRvcl0uY29uY2F0KGFyZ3MpKSk7XG59XG5mdW5jdGlvbiBqb2luKHRhc2tPclRhc2tzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2pvaW4oLi4udGFza3MpIGlzIG5vdCBzdXBwb3J0ZWQgYW55IG1vcmUuIFBsZWFzZSB1c2Ugam9pbihbLi4udGFza3NdKSB0byBqb2luIG11bHRpcGxlIHRhc2tzLicpO1xuICAgIH1cblxuICAgIGlmIChhcnJheSh0YXNrT3JUYXNrcykpIHtcbiAgICAgIHRhc2tPclRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgY2hlY2sodCwgdGFzaywgXCJqb2luKFsuLi50YXNrc10pOiBhcmd1bWVudCBcIiArIHQgKyBcIiBpcyBub3QgYSB2YWxpZCBUYXNrIG9iamVjdCBcIiArIFRFU1RfSElOVCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2sodGFza09yVGFza3MsIHRhc2ssIFwiam9pbih0YXNrKTogYXJndW1lbnQgXCIgKyB0YXNrT3JUYXNrcyArIFwiIGlzIG5vdCBhIHZhbGlkIFRhc2sgb2JqZWN0IFwiICsgVEVTVF9ISU5UKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChKT0lOLCB0YXNrT3JUYXNrcyk7XG59XG5mdW5jdGlvbiBjYW5jZWwodGFza09yVGFza3MpIHtcbiAgaWYgKHRhc2tPclRhc2tzID09PSB2b2lkIDApIHtcbiAgICB0YXNrT3JUYXNrcyA9IFNFTEZfQ0FOQ0VMTEFUSU9OO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2FuY2VsKC4uLnRhc2tzKSBpcyBub3Qgc3VwcG9ydGVkIGFueSBtb3JlLiBQbGVhc2UgdXNlIGNhbmNlbChbLi4udGFza3NdKSB0byBjYW5jZWwgbXVsdGlwbGUgdGFza3MuJyk7XG4gICAgfVxuXG4gICAgaWYgKGFycmF5KHRhc2tPclRhc2tzKSkge1xuICAgICAgdGFza09yVGFza3MuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICBjaGVjayh0LCB0YXNrLCBcImNhbmNlbChbLi4udGFza3NdKTogYXJndW1lbnQgXCIgKyB0ICsgXCIgaXMgbm90IGEgdmFsaWQgVGFzayBvYmplY3QgXCIgKyBURVNUX0hJTlQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0YXNrT3JUYXNrcyAhPT0gU0VMRl9DQU5DRUxMQVRJT04gJiYgbm90VW5kZWYodGFza09yVGFza3MpKSB7XG4gICAgICBjaGVjayh0YXNrT3JUYXNrcywgdGFzaywgXCJjYW5jZWwodGFzayk6IGFyZ3VtZW50IFwiICsgdGFza09yVGFza3MgKyBcIiBpcyBub3QgYSB2YWxpZCBUYXNrIG9iamVjdCBcIiArIFRFU1RfSElOVCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VFZmZlY3QoQ0FOQ0VMLCB0YXNrT3JUYXNrcyk7XG59XG5mdW5jdGlvbiBzZWxlY3Qoc2VsZWN0b3IpIHtcbiAgaWYgKHNlbGVjdG9yID09PSB2b2lkIDApIHtcbiAgICBzZWxlY3RvciA9IGlkZW50aXR5O1xuICB9XG5cbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41ID4gMSA/IF9sZW41IC0gMSA6IDApLCBfa2V5NSA9IDE7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhcmdzW19rZXk1IC0gMV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNoZWNrKGFyZ3VtZW50c1swXSwgbm90VW5kZWYsICdzZWxlY3Qoc2VsZWN0b3IsIFsuLi5dKTogYXJndW1lbnQgc2VsZWN0b3IgaXMgdW5kZWZpbmVkJyk7XG4gICAgY2hlY2soc2VsZWN0b3IsIGZ1bmMsIFwic2VsZWN0KHNlbGVjdG9yLCBbLi4uXSk6IGFyZ3VtZW50IFwiICsgc2VsZWN0b3IgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHJldHVybiBtYWtlRWZmZWN0KFNFTEVDVCwge1xuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBhcmdzOiBhcmdzXG4gIH0pO1xufVxuLyoqXG4gIGNoYW5uZWwocGF0dGVybiwgW2J1ZmZlcl0pICAgID0+IGNyZWF0ZXMgYSBwcm94eSBjaGFubmVsIGZvciBzdG9yZSBhY3Rpb25zXG4qKi9cblxuZnVuY3Rpb24gYWN0aW9uQ2hhbm5lbChwYXR0ZXJuJDEsIGJ1ZmZlciQxKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2socGF0dGVybiQxLCBwYXR0ZXJuLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLC4uLik6IGFyZ3VtZW50IHBhdHRlcm4gaXMgbm90IHZhbGlkJyk7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNoZWNrKGJ1ZmZlciQxLCBub3RVbmRlZiwgJ2FjdGlvbkNoYW5uZWwocGF0dGVybiwgYnVmZmVyKTogYXJndW1lbnQgYnVmZmVyIGlzIHVuZGVmaW5lZCcpO1xuICAgICAgY2hlY2soYnVmZmVyJDEsIGJ1ZmZlciwgXCJhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcik6IGFyZ3VtZW50IFwiICsgYnVmZmVyJDEgKyBcIiBpcyBub3QgYSB2YWxpZCBidWZmZXJcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VFZmZlY3QoQUNUSU9OX0NIQU5ORUwsIHtcbiAgICBwYXR0ZXJuOiBwYXR0ZXJuJDEsXG4gICAgYnVmZmVyOiBidWZmZXIkMVxuICB9KTtcbn1cbmZ1bmN0aW9uIGNhbmNlbGxlZCgpIHtcbiAgcmV0dXJuIG1ha2VFZmZlY3QoQ0FOQ0VMTEVELCB7fSk7XG59XG5mdW5jdGlvbiBmbHVzaChjaGFubmVsJDEpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVjayhjaGFubmVsJDEsIGNoYW5uZWwsIFwiZmx1c2goY2hhbm5lbCk6IGFyZ3VtZW50IFwiICsgY2hhbm5lbCQxICsgXCIgaXMgbm90IHZhbGlkIGNoYW5uZWxcIik7XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChGTFVTSCwgY2hhbm5lbCQxKTtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQocHJvcCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrKHByb3AsIHN0cmluZywgXCJnZXRDb250ZXh0KHByb3ApOiBhcmd1bWVudCBcIiArIHByb3AgKyBcIiBpcyBub3QgYSBzdHJpbmdcIik7XG4gIH1cblxuICByZXR1cm4gbWFrZUVmZmVjdChHRVRfQ09OVEVYVCwgcHJvcCk7XG59XG5mdW5jdGlvbiBzZXRDb250ZXh0KHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2socHJvcHMsIG9iamVjdCwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcobnVsbCwgcHJvcHMpKTtcbiAgfVxuXG4gIHJldHVybiBtYWtlRWZmZWN0KFNFVF9DT05URVhULCBwcm9wcyk7XG59XG52YXIgZGVsYXkgPVxuLyojX19QVVJFX18qL1xuY2FsbC5iaW5kKG51bGwsIGRlbGF5UCk7XG5cbmV4cG9ydCB7IGtUcnVlIGFzIGEsIGV4cGFuZGluZyBhcyBiLCBjaGVjayBhcyBjLCBub25lIGFzIGQsIG9uY2UgYXMgZSwgcmVtb3ZlIGFzIGYsIGludGVybmFsRXJyIGFzIGcsIFRBS0UgYXMgaCwgUFVUIGFzIGksIEFMTCBhcyBqLCBSQUNFIGFzIGssIENBTEwgYXMgbCwgQ1BTIGFzIG0sIEZPUksgYXMgbiwgSk9JTiBhcyBvLCBDQU5DRUwgYXMgcCwgU0VMRUNUIGFzIHEsIEFDVElPTl9DSEFOTkVMIGFzIHIsIENBTkNFTExFRCBhcyBzLCBGTFVTSCBhcyB0LCBHRVRfQ09OVEVYVCBhcyB1LCBTRVRfQ09OVEVYVCBhcyB2LCBnZXRNZXRhSW5mbyBhcyB3LCBub29wIGFzIHgsIGNyZWF0ZUFsbFN0eWxlQ2hpbGRDYWxsYmFja3MgYXMgeSwgY3JlYXRlRW1wdHlBcnJheSBhcyB6LCBhc3NpZ25XaXRoU3ltYm9scyBhcyBBLCBtYWtlSXRlcmF0b3IgYXMgQiwgc2hvdWxkQ29tcGxldGUgYXMgQywgZmxhdE1hcCBhcyBELCBnZXRMb2NhdGlvbiBhcyBFLCBjcmVhdGVTZXRDb250ZXh0V2FybmluZyBhcyBGLCBhc3luY0l0ZXJhdG9yU3ltYm9sIGFzIEcsIHNob3VsZENhbmNlbCBhcyBILCBzaG91bGRUZXJtaW5hdGUgYXMgSSwgbG9nRXJyb3IgYXMgSiwgd3JhcFNhZ2FEaXNwYXRjaCBhcyBLLCBpZGVudGl0eSBhcyBMLCB0YWtlIGFzIE0sIGZvcmsgYXMgTiwgY2FuY2VsIGFzIE8sIGNhbGwgYXMgUCwgYWN0aW9uQ2hhbm5lbCBhcyBRLCBzbGlkaW5nIGFzIFIsIGRlbGF5IGFzIFMsIHJhY2UgYXMgVCwgYnVmZmVycyBhcyBVLCBkZXRhY2ggYXMgViwgZWZmZWN0VHlwZXMgYXMgVywgdGFrZU1heWJlIGFzIFgsIHB1dCBhcyBZLCBwdXRSZXNvbHZlIGFzIFosIGFsbCBhcyBfLCBhcHBseSBhcyAkLCBjcHMgYXMgYTAsIHNwYXduIGFzIGExLCBqb2luIGFzIGEyLCBzZWxlY3QgYXMgYTMsIGNhbmNlbGxlZCBhcyBhNCwgZmx1c2ggYXMgYTUsIGdldENvbnRleHQgYXMgYTYsIHNldENvbnRleHQgYXMgYTcgfTtcbiIsImZ1bmN0aW9uIGRlZmVycmVkKCkge1xuICB2YXIgZGVmID0ge307XG4gIGRlZi5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRlZi5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICBkZWYucmVqZWN0ID0gcmVqZWN0O1xuICB9KTtcbiAgcmV0dXJuIGRlZjtcbn1cbmZ1bmN0aW9uIGFycmF5T2ZEZWZlcnJlZChsZW5ndGgpIHtcbiAgdmFyIGFyciA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcnIucHVzaChkZWZlcnJlZCgpKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmVycmVkO1xuZXhwb3J0IHsgYXJyYXlPZkRlZmVycmVkIH07XG4iLCJpbXBvcnQgeyBDSEFOTkVMX0VORF9UWVBFLCBNVUxUSUNBU1QsIE1BVENILCBTQUdBX0FDVElPTiwgQ0FOQ0VMLCBTRUxGX0NBTkNFTExBVElPTiwgVEVSTUlOQVRFLCBUQVNLLCBUQVNLX0NBTkNFTCwgSU8gfSBmcm9tICdAcmVkdXgtc2FnYS9zeW1ib2xzJztcbmV4cG9ydCB7IENBTkNFTCwgU0FHQV9MT0NBVElPTiB9IGZyb20gJ0ByZWR1eC1zYWdhL3N5bWJvbHMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IHsgc3RyaW5nIGFzIHN0cmluZyQxLCBhcnJheSBhcyBhcnJheSQxLCBzdHJpbmdhYmxlRnVuYywgZnVuYywgc3ltYm9sIGFzIHN5bWJvbCQxLCBidWZmZXIsIG5vdFVuZGVmLCBwcm9taXNlLCBpdGVyYXRvciwgdW5kZWYsIG9iamVjdCwgY2hhbm5lbCBhcyBjaGFubmVsJDEgfSBmcm9tICdAcmVkdXgtc2FnYS9pcyc7XG5pbXBvcnQgeyBhIGFzIGtUcnVlLCBiIGFzIGV4cGFuZGluZywgYyBhcyBjaGVjaywgZCBhcyBub25lLCBlIGFzIG9uY2UsIGYgYXMgcmVtb3ZlLCBnIGFzIGludGVybmFsRXJyLCBoIGFzIFRBS0UsIGkgYXMgUFVULCBqIGFzIEFMTCwgayBhcyBSQUNFLCBsIGFzIENBTEwsIG0gYXMgQ1BTLCBuIGFzIEZPUkssIG8gYXMgSk9JTiwgcCBhcyBDQU5DRUwkMSwgcSBhcyBTRUxFQ1QsIHIgYXMgQUNUSU9OX0NIQU5ORUwsIHMgYXMgQ0FOQ0VMTEVEJDEsIHQgYXMgRkxVU0gsIHUgYXMgR0VUX0NPTlRFWFQsIHYgYXMgU0VUX0NPTlRFWFQsIHcgYXMgZ2V0TWV0YUluZm8sIHggYXMgbm9vcCwgeSBhcyBjcmVhdGVBbGxTdHlsZUNoaWxkQ2FsbGJhY2tzLCB6IGFzIGNyZWF0ZUVtcHR5QXJyYXksIEEgYXMgYXNzaWduV2l0aFN5bWJvbHMsIEIgYXMgbWFrZUl0ZXJhdG9yLCBDIGFzIHNob3VsZENvbXBsZXRlLCBEIGFzIGZsYXRNYXAsIEUgYXMgZ2V0TG9jYXRpb24sIEYgYXMgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcsIEcgYXMgYXN5bmNJdGVyYXRvclN5bWJvbCwgSCBhcyBzaG91bGRDYW5jZWwsIEkgYXMgc2hvdWxkVGVybWluYXRlLCBKIGFzIGxvZ0Vycm9yLCBLIGFzIHdyYXBTYWdhRGlzcGF0Y2gsIEwgYXMgaWRlbnRpdHkgfSBmcm9tICcuL2NodW5rLWU5MjJjOTUwLmpzJztcbmV4cG9ydCB7IFUgYXMgYnVmZmVycywgViBhcyBkZXRhY2ggfSBmcm9tICcuL2NodW5rLWU5MjJjOTUwLmpzJztcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgZGVmZXJyZWQgZnJvbSAnQHJlZHV4LXNhZ2EvZGVmZXJyZWQnO1xuaW1wb3J0ICdAcmVkdXgtc2FnYS9kZWxheS1wJztcblxudmFyIHF1ZXVlID0gW107XG4vKipcbiAgVmFyaWFibGUgdG8gaG9sZCBhIGNvdW50aW5nIHNlbWFwaG9yZVxuICAtIEluY3JlbWVudGluZyBhZGRzIGEgbG9jayBhbmQgcHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUgKGlmIGl0J3Mgbm90XG4gICAgYWxyZWFkeSBzdXNwZW5kZWQpXG4gIC0gRGVjcmVtZW50aW5nIHJlbGVhc2VzIGEgbG9jay4gWmVybyBsb2NrcyBwdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgcmVsZWFzZWRgIHN0YXRlLiBUaGlzXG4gICAgdHJpZ2dlcnMgZmx1c2hpbmcgdGhlIHF1ZXVlZCB0YXNrcy5cbioqL1xuXG52YXIgc2VtYXBob3JlID0gMDtcbi8qKlxuICBFeGVjdXRlcyBhIHRhc2sgJ2F0b21pY2FsbHknLiBUYXNrcyBzY2hlZHVsZWQgZHVyaW5nIHRoaXMgZXhlY3V0aW9uIHdpbGwgYmUgcXVldWVkXG4gIGFuZCBmbHVzaGVkIGFmdGVyIHRoaXMgdGFzayBoYXMgZmluaXNoZWQgKGFzc3VtaW5nIHRoZSBzY2hlZHVsZXIgZW5kdXAgaW4gYSByZWxlYXNlZFxuICBzdGF0ZSkuXG4qKi9cblxuZnVuY3Rpb24gZXhlYyh0YXNrKSB7XG4gIHRyeSB7XG4gICAgc3VzcGVuZCgpO1xuICAgIHRhc2soKTtcbiAgfSBmaW5hbGx5IHtcbiAgICByZWxlYXNlKCk7XG4gIH1cbn1cbi8qKlxuICBFeGVjdXRlcyBvciBxdWV1ZXMgYSB0YXNrIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgdGhlIHNjaGVkdWxlciAoYHN1c3BlbmRlZGAgb3IgYHJlbGVhc2VkYClcbioqL1xuXG5cbmZ1bmN0aW9uIGFzYXAodGFzaykge1xuICBxdWV1ZS5wdXNoKHRhc2spO1xuXG4gIGlmICghc2VtYXBob3JlKSB7XG4gICAgc3VzcGVuZCgpO1xuICAgIGZsdXNoKCk7XG4gIH1cbn1cbi8qKlxuICogUHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUgYW5kIGV4ZWN1dGVzIGEgdGFzayBpbW1lZGlhdGVseS5cbiAqL1xuXG5mdW5jdGlvbiBpbW1lZGlhdGVseSh0YXNrKSB7XG4gIHRyeSB7XG4gICAgc3VzcGVuZCgpO1xuICAgIHJldHVybiB0YXNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZmx1c2goKTtcbiAgfVxufVxuLyoqXG4gIFB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGBzdXNwZW5kZWRgIHN0YXRlLiBTY2hlZHVsZWQgdGFza3Mgd2lsbCBiZSBxdWV1ZWQgdW50aWwgdGhlXG4gIHNjaGVkdWxlciBpcyByZWxlYXNlZC5cbioqL1xuXG5mdW5jdGlvbiBzdXNwZW5kKCkge1xuICBzZW1hcGhvcmUrKztcbn1cbi8qKlxuICBQdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgcmVsZWFzZWRgIHN0YXRlLlxuKiovXG5cblxuZnVuY3Rpb24gcmVsZWFzZSgpIHtcbiAgc2VtYXBob3JlLS07XG59XG4vKipcbiAgUmVsZWFzZXMgdGhlIGN1cnJlbnQgbG9jay4gRXhlY3V0ZXMgYWxsIHF1ZXVlZCB0YXNrcyBpZiB0aGUgc2NoZWR1bGVyIGlzIGluIHRoZSByZWxlYXNlZCBzdGF0ZS5cbioqL1xuXG5cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICByZWxlYXNlKCk7XG4gIHZhciB0YXNrO1xuXG4gIHdoaWxlICghc2VtYXBob3JlICYmICh0YXNrID0gcXVldWUuc2hpZnQoKSkgIT09IHVuZGVmaW5lZCkge1xuICAgIGV4ZWModGFzayk7XG4gIH1cbn1cblxudmFyIGFycmF5ID0gZnVuY3Rpb24gYXJyYXkocGF0dGVybnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHJldHVybiBwYXR0ZXJucy5zb21lKGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcihwKShpbnB1dCk7XG4gICAgfSk7XG4gIH07XG59O1xudmFyIHByZWRpY2F0ZSA9IGZ1bmN0aW9uIHByZWRpY2F0ZShfcHJlZGljYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gX3ByZWRpY2F0ZShpbnB1dCk7XG4gIH07XG59O1xudmFyIHN0cmluZyA9IGZ1bmN0aW9uIHN0cmluZyhwYXR0ZXJuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQudHlwZSA9PT0gU3RyaW5nKHBhdHRlcm4pO1xuICB9O1xufTtcbnZhciBzeW1ib2wgPSBmdW5jdGlvbiBzeW1ib2wocGF0dGVybikge1xuICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnR5cGUgPT09IHBhdHRlcm47XG4gIH07XG59O1xudmFyIHdpbGRjYXJkID0gZnVuY3Rpb24gd2lsZGNhcmQoKSB7XG4gIHJldHVybiBrVHJ1ZTtcbn07XG5mdW5jdGlvbiBtYXRjaGVyKHBhdHRlcm4pIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIHZhciBtYXRjaGVyQ3JlYXRvciA9IHBhdHRlcm4gPT09ICcqJyA/IHdpbGRjYXJkIDogc3RyaW5nJDEocGF0dGVybikgPyBzdHJpbmcgOiBhcnJheSQxKHBhdHRlcm4pID8gYXJyYXkgOiBzdHJpbmdhYmxlRnVuYyhwYXR0ZXJuKSA/IHN0cmluZyA6IGZ1bmMocGF0dGVybikgPyBwcmVkaWNhdGUgOiBzeW1ib2wkMShwYXR0ZXJuKSA/IHN5bWJvbCA6IG51bGw7XG5cbiAgaWYgKG1hdGNoZXJDcmVhdG9yID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXR0ZXJuOiBcIiArIHBhdHRlcm4pO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXJDcmVhdG9yKHBhdHRlcm4pO1xufVxuXG52YXIgRU5EID0ge1xuICB0eXBlOiBDSEFOTkVMX0VORF9UWVBFXG59O1xudmFyIGlzRW5kID0gZnVuY3Rpb24gaXNFbmQoYSkge1xuICByZXR1cm4gYSAmJiBhLnR5cGUgPT09IENIQU5ORUxfRU5EX1RZUEU7XG59O1xudmFyIENMT1NFRF9DSEFOTkVMX1dJVEhfVEFLRVJTID0gJ0Nhbm5vdCBoYXZlIGEgY2xvc2VkIGNoYW5uZWwgd2l0aCBwZW5kaW5nIHRha2Vycyc7XG52YXIgSU5WQUxJRF9CVUZGRVIgPSAnaW52YWxpZCBidWZmZXIgcGFzc2VkIHRvIGNoYW5uZWwgZmFjdG9yeSBmdW5jdGlvbic7XG52YXIgVU5ERUZJTkVEX0lOUFVUX0VSUk9SID0gXCJTYWdhIG9yIGNoYW5uZWwgd2FzIHByb3ZpZGVkIHdpdGggYW4gdW5kZWZpbmVkIGFjdGlvblxcbkhpbnRzOlxcbiAgLSBjaGVjayB0aGF0IHlvdXIgQWN0aW9uIENyZWF0b3IgcmV0dXJucyBhIG5vbi11bmRlZmluZWQgdmFsdWVcXG4gIC0gaWYgdGhlIFNhZ2Egd2FzIHN0YXJ0ZWQgdXNpbmcgcnVuU2FnYSwgY2hlY2sgdGhhdCB5b3VyIHN1YnNjcmliZSBzb3VyY2UgcHJvdmlkZXMgdGhlIGFjdGlvbiB0byBpdHMgbGlzdGVuZXJzXCI7XG5mdW5jdGlvbiBjaGFubmVsKGJ1ZmZlciQxKSB7XG4gIGlmIChidWZmZXIkMSA9PT0gdm9pZCAwKSB7XG4gICAgYnVmZmVyJDEgPSBleHBhbmRpbmcoKTtcbiAgfVxuXG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgdmFyIHRha2VycyA9IFtdO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2soYnVmZmVyJDEsIGJ1ZmZlciwgSU5WQUxJRF9CVUZGRVIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKSB7XG4gICAgaWYgKGNsb3NlZCAmJiB0YWtlcnMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBpbnRlcm5hbEVycihDTE9TRURfQ0hBTk5FTF9XSVRIX1RBS0VSUyk7XG4gICAgfVxuXG4gICAgaWYgKHRha2Vycy5sZW5ndGggJiYgIWJ1ZmZlciQxLmlzRW1wdHkoKSkge1xuICAgICAgdGhyb3cgaW50ZXJuYWxFcnIoJ0Nhbm5vdCBoYXZlIHBlbmRpbmcgdGFrZXJzIHdpdGggbm9uIGVtcHR5IGJ1ZmZlcicpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1dChpbnB1dCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgICAgY2hlY2soaW5wdXQsIG5vdFVuZGVmLCBVTkRFRklORURfSU5QVVRfRVJST1IpO1xuICAgIH1cblxuICAgIGlmIChjbG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGFrZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlciQxLnB1dChpbnB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGNiID0gdGFrZXJzLnNoaWZ0KCk7XG4gICAgY2IoaW5wdXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFrZShjYikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgICAgY2hlY2soY2IsIGZ1bmMsIFwiY2hhbm5lbC50YWtlJ3MgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyJDEuaXNFbXB0eSgpKSB7XG4gICAgICBjYihFTkQpO1xuICAgIH0gZWxzZSBpZiAoIWJ1ZmZlciQxLmlzRW1wdHkoKSkge1xuICAgICAgY2IoYnVmZmVyJDEudGFrZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFrZXJzLnB1c2goY2IpO1xuXG4gICAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZSh0YWtlcnMsIGNiKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goY2IpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICAgIGNoZWNrKGNiLCBmdW5jLCBcImNoYW5uZWwuZmx1c2gnIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAoY2xvc2VkICYmIGJ1ZmZlciQxLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYihidWZmZXIkMS5mbHVzaCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgIH1cblxuICAgIGlmIChjbG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjbG9zZWQgPSB0cnVlO1xuICAgIHZhciBhcnIgPSB0YWtlcnM7XG4gICAgdGFrZXJzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgdGFrZXIgPSBhcnJbaV07XG4gICAgICB0YWtlcihFTkQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGFrZTogdGFrZSxcbiAgICBwdXQ6IHB1dCxcbiAgICBmbHVzaDogZmx1c2gsXG4gICAgY2xvc2U6IGNsb3NlXG4gIH07XG59XG5mdW5jdGlvbiBldmVudENoYW5uZWwoc3Vic2NyaWJlLCBidWZmZXIpIHtcbiAgaWYgKGJ1ZmZlciA9PT0gdm9pZCAwKSB7XG4gICAgYnVmZmVyID0gbm9uZSgpO1xuICB9XG5cbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICB2YXIgdW5zdWJzY3JpYmU7XG4gIHZhciBjaGFuID0gY2hhbm5lbChidWZmZXIpO1xuXG4gIHZhciBjbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGlmIChjbG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjbG9zZWQgPSB0cnVlO1xuXG4gICAgaWYgKGZ1bmModW5zdWJzY3JpYmUpKSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIGNoYW4uY2xvc2UoKTtcbiAgfTtcblxuICB1bnN1YnNjcmliZSA9IHN1YnNjcmliZShmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoaXNFbmQoaW5wdXQpKSB7XG4gICAgICBjbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNoYW4ucHV0KGlucHV0KTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVjayh1bnN1YnNjcmliZSwgZnVuYywgJ2luIGV2ZW50Q2hhbm5lbDogc3Vic2NyaWJlIHNob3VsZCByZXR1cm4gYSBmdW5jdGlvbiB0byB1bnN1YnNjcmliZScpO1xuICB9XG5cbiAgdW5zdWJzY3JpYmUgPSBvbmNlKHVuc3Vic2NyaWJlKTtcblxuICBpZiAoY2xvc2VkKSB7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGFrZTogY2hhbi50YWtlLFxuICAgIGZsdXNoOiBjaGFuLmZsdXNoLFxuICAgIGNsb3NlOiBjbG9zZVxuICB9O1xufVxuZnVuY3Rpb24gbXVsdGljYXN0Q2hhbm5lbCgpIHtcbiAgdmFyIF9yZWY7XG5cbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICB2YXIgY3VycmVudFRha2VycyA9IFtdO1xuICB2YXIgbmV4dFRha2VycyA9IGN1cnJlbnRUYWtlcnM7XG5cbiAgZnVuY3Rpb24gY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKSB7XG4gICAgaWYgKGNsb3NlZCAmJiBuZXh0VGFrZXJzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgaW50ZXJuYWxFcnIoQ0xPU0VEX0NIQU5ORUxfV0lUSF9UQUtFUlMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBlbnN1cmVDYW5NdXRhdGVOZXh0VGFrZXJzID0gZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dFRha2VycygpIHtcbiAgICBpZiAobmV4dFRha2VycyAhPT0gY3VycmVudFRha2Vycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5leHRUYWtlcnMgPSBjdXJyZW50VGFrZXJzLnNsaWNlKCk7XG4gIH07XG5cbiAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgfVxuXG4gICAgY2xvc2VkID0gdHJ1ZTtcbiAgICB2YXIgdGFrZXJzID0gY3VycmVudFRha2VycyA9IG5leHRUYWtlcnM7XG4gICAgbmV4dFRha2VycyA9IFtdO1xuICAgIHRha2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0YWtlcikge1xuICAgICAgdGFrZXIoRU5EKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW01VTFRJQ0FTVF0gPSB0cnVlLCBfcmVmLnB1dCA9IGZ1bmN0aW9uIHB1dChpbnB1dCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgICAgY2hlY2soaW5wdXQsIG5vdFVuZGVmLCBVTkRFRklORURfSU5QVVRfRVJST1IpO1xuICAgIH1cblxuICAgIGlmIChjbG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNFbmQoaW5wdXQpKSB7XG4gICAgICBjbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0YWtlcnMgPSBjdXJyZW50VGFrZXJzID0gbmV4dFRha2VycztcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0YWtlcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciB0YWtlciA9IHRha2Vyc1tpXTtcblxuICAgICAgaWYgKHRha2VyW01BVENIXShpbnB1dCkpIHtcbiAgICAgICAgdGFrZXIuY2FuY2VsKCk7XG4gICAgICAgIHRha2VyKGlucHV0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIF9yZWYudGFrZSA9IGZ1bmN0aW9uIHRha2UoY2IsIG1hdGNoZXIpIHtcbiAgICBpZiAobWF0Y2hlciA9PT0gdm9pZCAwKSB7XG4gICAgICBtYXRjaGVyID0gd2lsZGNhcmQ7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlZCkge1xuICAgICAgY2IoRU5EKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYltNQVRDSF0gPSBtYXRjaGVyO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRUYWtlcnMoKTtcbiAgICBuZXh0VGFrZXJzLnB1c2goY2IpO1xuICAgIGNiLmNhbmNlbCA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dFRha2VycygpO1xuICAgICAgcmVtb3ZlKG5leHRUYWtlcnMsIGNiKTtcbiAgICB9KTtcbiAgfSwgX3JlZi5jbG9zZSA9IGNsb3NlLCBfcmVmO1xufVxuZnVuY3Rpb24gc3RkQ2hhbm5lbCgpIHtcbiAgdmFyIGNoYW4gPSBtdWx0aWNhc3RDaGFubmVsKCk7XG4gIHZhciBwdXQgPSBjaGFuLnB1dDtcblxuICBjaGFuLnB1dCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmIChpbnB1dFtTQUdBX0FDVElPTl0pIHtcbiAgICAgIHB1dChpbnB1dCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXNhcChmdW5jdGlvbiAoKSB7XG4gICAgICBwdXQoaW5wdXQpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBjaGFuO1xufVxuXG52YXIgUlVOTklORyA9IDA7XG52YXIgQ0FOQ0VMTEVEID0gMTtcbnZhciBBQk9SVEVEID0gMjtcbnZhciBET05FID0gMztcblxuZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgY2IpIHtcbiAgdmFyIGNhbmNlbFByb21pc2UgPSBwcm9taXNlW0NBTkNFTF07XG5cbiAgaWYgKGZ1bmMoY2FuY2VsUHJvbWlzZSkpIHtcbiAgICBjYi5jYW5jZWwgPSBjYW5jZWxQcm9taXNlO1xuICB9XG5cbiAgcHJvbWlzZS50aGVuKGNiLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBjYihlcnJvciwgdHJ1ZSk7XG4gIH0pO1xufVxuXG52YXIgY3VycmVudCA9IDA7XG52YXIgbmV4dEVmZmVjdElkID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICsrY3VycmVudDtcbn0pO1xuXG52YXIgX2VmZmVjdFJ1bm5lck1hcDtcblxuZnVuY3Rpb24gZ2V0SXRlcmF0b3JNZXRhSW5mbyhpdGVyYXRvciwgZm4pIHtcbiAgaWYgKGl0ZXJhdG9yLmlzU2FnYUl0ZXJhdG9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGl0ZXJhdG9yLm1ldGEubmFtZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZ2V0TWV0YUluZm8oZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrSXRlcmF0b3IoX3JlZikge1xuICB2YXIgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGZuID0gX3JlZi5mbixcbiAgICAgIGFyZ3MgPSBfcmVmLmFyZ3M7XG5cbiAgLy8gY2F0Y2ggc3luY2hyb25vdXMgZmFpbHVyZXM7IHNlZSAjMTUyIGFuZCAjNDQxXG4gIHRyeSB7XG4gICAgdmFyIHJlc3VsdCA9IGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpOyAvLyBpLmUuIGEgZ2VuZXJhdG9yIGZ1bmN0aW9uIHJldHVybnMgYW4gaXRlcmF0b3JcblxuICAgIGlmIChpdGVyYXRvcihyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuXG4gICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KGFyZykge1xuICAgICAgaWYgKCFyZXNvbHZlZCkge1xuICAgICAgICByZXNvbHZlZCA9IHRydWU7IC8vIE9ubHkgcHJvbWlzZXMgcmV0dXJuZWQgZnJvbSBmb3JrIHdpbGwgYmUgaW50ZXJwcmV0ZWQuIFNlZSAjMTU3M1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHJlc3VsdCxcbiAgICAgICAgICBkb25lOiAhcHJvbWlzZShyZXN1bHQpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiBhcmcsXG4gICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gbWFrZUl0ZXJhdG9yKG5leHQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBkbyBub3QgYnViYmxlIHVwIHN5bmNocm9ub3VzIGZhaWx1cmVzIGZvciBkZXRhY2hlZCBmb3Jrc1xuICAgIC8vIGluc3RlYWQgY3JlYXRlIGEgZmFpbGVkIHRhc2suIFNlZSAjMTUyIGFuZCAjNDQxXG4gICAgcmV0dXJuIG1ha2VJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcnVuUHV0RWZmZWN0KGVudiwgX3JlZjIsIGNiKSB7XG4gIHZhciBjaGFubmVsID0gX3JlZjIuY2hhbm5lbCxcbiAgICAgIGFjdGlvbiA9IF9yZWYyLmFjdGlvbixcbiAgICAgIHJlc29sdmUgPSBfcmVmMi5yZXNvbHZlO1xuXG4gIC8qKlxuICAgU2NoZWR1bGUgdGhlIHB1dCBpbiBjYXNlIGFub3RoZXIgc2FnYSBpcyBob2xkaW5nIGEgbG9jay5cbiAgIFRoZSBwdXQgd2lsbCBiZSBleGVjdXRlZCBhdG9taWNhbGx5LiBpZSBuZXN0ZWQgcHV0cyB3aWxsIGV4ZWN1dGUgYWZ0ZXJcbiAgIHRoaXMgcHV0IGhhcyB0ZXJtaW5hdGVkLlxuICAgKiovXG4gIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQ7XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gKGNoYW5uZWwgPyBjaGFubmVsLnB1dCA6IGVudi5kaXNwYXRjaCkoYWN0aW9uKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2IoZXJyb3IsIHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZXNvbHZlICYmIHByb21pc2UocmVzdWx0KSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UocmVzdWx0LCBjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKHJlc3VsdCk7XG4gICAgfVxuICB9KTsgLy8gUHV0IGVmZmVjdHMgYXJlIG5vbiBjYW5jZWxsYWJsZXNcbn1cblxuZnVuY3Rpb24gcnVuVGFrZUVmZmVjdChlbnYsIF9yZWYzLCBjYikge1xuICB2YXIgX3JlZjMkY2hhbm5lbCA9IF9yZWYzLmNoYW5uZWwsXG4gICAgICBjaGFubmVsID0gX3JlZjMkY2hhbm5lbCA9PT0gdm9pZCAwID8gZW52LmNoYW5uZWwgOiBfcmVmMyRjaGFubmVsLFxuICAgICAgcGF0dGVybiA9IF9yZWYzLnBhdHRlcm4sXG4gICAgICBtYXliZSA9IF9yZWYzLm1heWJlO1xuXG4gIHZhciB0YWtlQ2IgPSBmdW5jdGlvbiB0YWtlQ2IoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgY2IoaW5wdXQsIHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0VuZChpbnB1dCkgJiYgIW1heWJlKSB7XG4gICAgICBjYihURVJNSU5BVEUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNiKGlucHV0KTtcbiAgfTtcblxuICB0cnkge1xuICAgIGNoYW5uZWwudGFrZSh0YWtlQ2IsIG5vdFVuZGVmKHBhdHRlcm4pID8gbWF0Y2hlcihwYXR0ZXJuKSA6IG51bGwpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjYihlcnIsIHRydWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNiLmNhbmNlbCA9IHRha2VDYi5jYW5jZWw7XG59XG5cbmZ1bmN0aW9uIHJ1bkNhbGxFZmZlY3QoZW52LCBfcmVmNCwgY2IsIF9yZWY1KSB7XG4gIHZhciBjb250ZXh0ID0gX3JlZjQuY29udGV4dCxcbiAgICAgIGZuID0gX3JlZjQuZm4sXG4gICAgICBhcmdzID0gX3JlZjQuYXJncztcbiAgdmFyIHRhc2sgPSBfcmVmNS50YXNrO1xuXG4gIC8vIGNhdGNoIHN5bmNocm9ub3VzIGZhaWx1cmVzOyBzZWUgIzE1MlxuICB0cnkge1xuICAgIHZhciByZXN1bHQgPSBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcblxuICAgIGlmIChwcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgY2IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpdGVyYXRvcihyZXN1bHQpKSB7XG4gICAgICAvLyByZXNvbHZlIGl0ZXJhdG9yXG4gICAgICBwcm9jKGVudiwgcmVzdWx0LCB0YXNrLmNvbnRleHQsIGN1cnJlbnQsIGdldE1ldGFJbmZvKGZuKSxcbiAgICAgIC8qIGlzUm9vdCAqL1xuICAgICAgZmFsc2UsIGNiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYihyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNiKGVycm9yLCB0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBydW5DUFNFZmZlY3QoZW52LCBfcmVmNiwgY2IpIHtcbiAgdmFyIGNvbnRleHQgPSBfcmVmNi5jb250ZXh0LFxuICAgICAgZm4gPSBfcmVmNi5mbixcbiAgICAgIGFyZ3MgPSBfcmVmNi5hcmdzO1xuXG4gIC8vIENQUyAoaWUgbm9kZSBzdHlsZSBmdW5jdGlvbnMpIGNhbiBkZWZpbmUgdGhlaXIgb3duIGNhbmNlbGxhdGlvbiBsb2dpY1xuICAvLyBieSBzZXR0aW5nIGNhbmNlbCBmaWVsZCBvbiB0aGUgY2JcbiAgLy8gY2F0Y2ggc3luY2hyb25vdXMgZmFpbHVyZXM7IHNlZSAjMTUyXG4gIHRyeSB7XG4gICAgdmFyIGNwc0NiID0gZnVuY3Rpb24gY3BzQ2IoZXJyLCByZXMpIHtcbiAgICAgIGlmICh1bmRlZihlcnIpKSB7XG4gICAgICAgIGNiKHJlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYihlcnIsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChjcHNDYikpO1xuXG4gICAgaWYgKGNwc0NiLmNhbmNlbCkge1xuICAgICAgY2IuY2FuY2VsID0gY3BzQ2IuY2FuY2VsO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYihlcnJvciwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcnVuRm9ya0VmZmVjdChlbnYsIF9yZWY3LCBjYiwgX3JlZjgpIHtcbiAgdmFyIGNvbnRleHQgPSBfcmVmNy5jb250ZXh0LFxuICAgICAgZm4gPSBfcmVmNy5mbixcbiAgICAgIGFyZ3MgPSBfcmVmNy5hcmdzLFxuICAgICAgZGV0YWNoZWQgPSBfcmVmNy5kZXRhY2hlZDtcbiAgdmFyIHBhcmVudCA9IF9yZWY4LnRhc2s7XG4gIHZhciB0YXNrSXRlcmF0b3IgPSBjcmVhdGVUYXNrSXRlcmF0b3Ioe1xuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgZm46IGZuLFxuICAgIGFyZ3M6IGFyZ3NcbiAgfSk7XG4gIHZhciBtZXRhID0gZ2V0SXRlcmF0b3JNZXRhSW5mbyh0YXNrSXRlcmF0b3IsIGZuKTtcbiAgaW1tZWRpYXRlbHkoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGlsZCA9IHByb2MoZW52LCB0YXNrSXRlcmF0b3IsIHBhcmVudC5jb250ZXh0LCBjdXJyZW50LCBtZXRhLCBkZXRhY2hlZCwgbm9vcCk7XG5cbiAgICBpZiAoZGV0YWNoZWQpIHtcbiAgICAgIGNiKGNoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNoaWxkLmlzUnVubmluZygpKSB7XG4gICAgICAgIHBhcmVudC5xdWV1ZS5hZGRUYXNrKGNoaWxkKTtcbiAgICAgICAgY2IoY2hpbGQpO1xuICAgICAgfSBlbHNlIGlmIChjaGlsZC5pc0Fib3J0ZWQoKSkge1xuICAgICAgICBwYXJlbnQucXVldWUuYWJvcnQoY2hpbGQuZXJyb3IoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYihjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTsgLy8gRm9yayBlZmZlY3RzIGFyZSBub24gY2FuY2VsbGFibGVzXG59XG5cbmZ1bmN0aW9uIHJ1bkpvaW5FZmZlY3QoZW52LCB0YXNrT3JUYXNrcywgY2IsIF9yZWY5KSB7XG4gIHZhciB0YXNrID0gX3JlZjkudGFzaztcblxuICB2YXIgam9pblNpbmdsZVRhc2sgPSBmdW5jdGlvbiBqb2luU2luZ2xlVGFzayh0YXNrVG9Kb2luLCBjYikge1xuICAgIGlmICh0YXNrVG9Kb2luLmlzUnVubmluZygpKSB7XG4gICAgICB2YXIgam9pbmVyID0ge1xuICAgICAgICB0YXNrOiB0YXNrLFxuICAgICAgICBjYjogY2JcbiAgICAgIH07XG5cbiAgICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRhc2tUb0pvaW4uaXNSdW5uaW5nKCkpIHJlbW92ZSh0YXNrVG9Kb2luLmpvaW5lcnMsIGpvaW5lcik7XG4gICAgICB9O1xuXG4gICAgICB0YXNrVG9Kb2luLmpvaW5lcnMucHVzaChqb2luZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGFza1RvSm9pbi5pc0Fib3J0ZWQoKSkge1xuICAgICAgICBjYih0YXNrVG9Kb2luLmVycm9yKCksIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IodGFza1RvSm9pbi5yZXN1bHQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGlmIChhcnJheSQxKHRhc2tPclRhc2tzKSkge1xuICAgIGlmICh0YXNrT3JUYXNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNiKFtdKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRDYWxsYmFja3MgPSBjcmVhdGVBbGxTdHlsZUNoaWxkQ2FsbGJhY2tzKHRhc2tPclRhc2tzLCBjYik7XG4gICAgdGFza09yVGFza3MuZm9yRWFjaChmdW5jdGlvbiAodCwgaSkge1xuICAgICAgam9pblNpbmdsZVRhc2sodCwgY2hpbGRDYWxsYmFja3NbaV0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGpvaW5TaW5nbGVUYXNrKHRhc2tPclRhc2tzLCBjYik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FuY2VsU2luZ2xlVGFzayh0YXNrVG9DYW5jZWwpIHtcbiAgaWYgKHRhc2tUb0NhbmNlbC5pc1J1bm5pbmcoKSkge1xuICAgIHRhc2tUb0NhbmNlbC5jYW5jZWwoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBydW5DYW5jZWxFZmZlY3QoZW52LCB0YXNrT3JUYXNrcywgY2IsIF9yZWYxMCkge1xuICB2YXIgdGFzayA9IF9yZWYxMC50YXNrO1xuXG4gIGlmICh0YXNrT3JUYXNrcyA9PT0gU0VMRl9DQU5DRUxMQVRJT04pIHtcbiAgICBjYW5jZWxTaW5nbGVUYXNrKHRhc2spO1xuICB9IGVsc2UgaWYgKGFycmF5JDEodGFza09yVGFza3MpKSB7XG4gICAgdGFza09yVGFza3MuZm9yRWFjaChjYW5jZWxTaW5nbGVUYXNrKTtcbiAgfSBlbHNlIHtcbiAgICBjYW5jZWxTaW5nbGVUYXNrKHRhc2tPclRhc2tzKTtcbiAgfVxuXG4gIGNiKCk7IC8vIGNhbmNlbCBlZmZlY3RzIGFyZSBub24gY2FuY2VsbGFibGVzXG59XG5cbmZ1bmN0aW9uIHJ1bkFsbEVmZmVjdChlbnYsIGVmZmVjdHMsIGNiLCBfcmVmMTEpIHtcbiAgdmFyIGRpZ2VzdEVmZmVjdCA9IF9yZWYxMS5kaWdlc3RFZmZlY3Q7XG4gIHZhciBlZmZlY3RJZCA9IGN1cnJlbnQ7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZWZmZWN0cyk7XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgY2IoYXJyYXkkMShlZmZlY3RzKSA/IFtdIDoge30pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZENhbGxiYWNrcyA9IGNyZWF0ZUFsbFN0eWxlQ2hpbGRDYWxsYmFja3MoZWZmZWN0cywgY2IpO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGRpZ2VzdEVmZmVjdChlZmZlY3RzW2tleV0sIGVmZmVjdElkLCBjaGlsZENhbGxiYWNrc1trZXldLCBrZXkpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcnVuUmFjZUVmZmVjdChlbnYsIGVmZmVjdHMsIGNiLCBfcmVmMTIpIHtcbiAgdmFyIGRpZ2VzdEVmZmVjdCA9IF9yZWYxMi5kaWdlc3RFZmZlY3Q7XG4gIHZhciBlZmZlY3RJZCA9IGN1cnJlbnQ7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZWZmZWN0cyk7XG4gIHZhciByZXNwb25zZSA9IGFycmF5JDEoZWZmZWN0cykgPyBjcmVhdGVFbXB0eUFycmF5KGtleXMubGVuZ3RoKSA6IHt9O1xuICB2YXIgY2hpbGRDYnMgPSB7fTtcbiAgdmFyIGNvbXBsZXRlZCA9IGZhbHNlO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaENiQXRLZXkgPSBmdW5jdGlvbiBjaENiQXRLZXkocmVzLCBpc0Vycikge1xuICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0VyciB8fCBzaG91bGRDb21wbGV0ZShyZXMpKSB7XG4gICAgICAgIC8vIFJhY2UgQXV0byBjYW5jZWxsYXRpb25cbiAgICAgICAgY2IuY2FuY2VsKCk7XG4gICAgICAgIGNiKHJlcywgaXNFcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IuY2FuY2VsKCk7XG4gICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIHJlc3BvbnNlW2tleV0gPSByZXM7XG4gICAgICAgIGNiKHJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY2hDYkF0S2V5LmNhbmNlbCA9IG5vb3A7XG4gICAgY2hpbGRDYnNba2V5XSA9IGNoQ2JBdEtleTtcbiAgfSk7XG5cbiAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHByZXZlbnRzIHVubmVjZXNzYXJ5IGNhbmNlbGxhdGlvblxuICAgIGlmICghY29tcGxldGVkKSB7XG4gICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkQ2JzW2tleV0uY2FuY2VsKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGlnZXN0RWZmZWN0KGVmZmVjdHNba2V5XSwgZWZmZWN0SWQsIGNoaWxkQ2JzW2tleV0sIGtleSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBydW5TZWxlY3RFZmZlY3QoZW52LCBfcmVmMTMsIGNiKSB7XG4gIHZhciBzZWxlY3RvciA9IF9yZWYxMy5zZWxlY3RvcixcbiAgICAgIGFyZ3MgPSBfcmVmMTMuYXJncztcblxuICB0cnkge1xuICAgIHZhciBzdGF0ZSA9IHNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgW2Vudi5nZXRTdGF0ZSgpXS5jb25jYXQoYXJncykpO1xuICAgIGNiKHN0YXRlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYihlcnJvciwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcnVuQ2hhbm5lbEVmZmVjdChlbnYsIF9yZWYxNCwgY2IpIHtcbiAgdmFyIHBhdHRlcm4gPSBfcmVmMTQucGF0dGVybixcbiAgICAgIGJ1ZmZlciA9IF9yZWYxNC5idWZmZXI7XG4gIHZhciBjaGFuID0gY2hhbm5lbChidWZmZXIpO1xuICB2YXIgbWF0Y2ggPSBtYXRjaGVyKHBhdHRlcm4pO1xuXG4gIHZhciB0YWtlciA9IGZ1bmN0aW9uIHRha2VyKGFjdGlvbikge1xuICAgIGlmICghaXNFbmQoYWN0aW9uKSkge1xuICAgICAgZW52LmNoYW5uZWwudGFrZSh0YWtlciwgbWF0Y2gpO1xuICAgIH1cblxuICAgIGNoYW4ucHV0KGFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNsb3NlID0gY2hhbi5jbG9zZTtcblxuICBjaGFuLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHRha2VyLmNhbmNlbCgpO1xuICAgIGNsb3NlKCk7XG4gIH07XG5cbiAgZW52LmNoYW5uZWwudGFrZSh0YWtlciwgbWF0Y2gpO1xuICBjYihjaGFuKTtcbn1cblxuZnVuY3Rpb24gcnVuQ2FuY2VsbGVkRWZmZWN0KGVudiwgZGF0YSwgY2IsIF9yZWYxNSkge1xuICB2YXIgdGFzayA9IF9yZWYxNS50YXNrO1xuICBjYih0YXNrLmlzQ2FuY2VsbGVkKCkpO1xufVxuXG5mdW5jdGlvbiBydW5GbHVzaEVmZmVjdChlbnYsIGNoYW5uZWwsIGNiKSB7XG4gIGNoYW5uZWwuZmx1c2goY2IpO1xufVxuXG5mdW5jdGlvbiBydW5HZXRDb250ZXh0RWZmZWN0KGVudiwgcHJvcCwgY2IsIF9yZWYxNikge1xuICB2YXIgdGFzayA9IF9yZWYxNi50YXNrO1xuICBjYih0YXNrLmNvbnRleHRbcHJvcF0pO1xufVxuXG5mdW5jdGlvbiBydW5TZXRDb250ZXh0RWZmZWN0KGVudiwgcHJvcHMsIGNiLCBfcmVmMTcpIHtcbiAgdmFyIHRhc2sgPSBfcmVmMTcudGFzaztcbiAgYXNzaWduV2l0aFN5bWJvbHModGFzay5jb250ZXh0LCBwcm9wcyk7XG4gIGNiKCk7XG59XG5cbnZhciBlZmZlY3RSdW5uZXJNYXAgPSAoX2VmZmVjdFJ1bm5lck1hcCA9IHt9LCBfZWZmZWN0UnVubmVyTWFwW1RBS0VdID0gcnVuVGFrZUVmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtQVVRdID0gcnVuUHV0RWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwW0FMTF0gPSBydW5BbGxFZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXBbUkFDRV0gPSBydW5SYWNlRWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwW0NBTExdID0gcnVuQ2FsbEVmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtDUFNdID0gcnVuQ1BTRWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwW0ZPUktdID0gcnVuRm9ya0VmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtKT0lOXSA9IHJ1bkpvaW5FZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXBbQ0FOQ0VMJDFdID0gcnVuQ2FuY2VsRWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwW1NFTEVDVF0gPSBydW5TZWxlY3RFZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXBbQUNUSU9OX0NIQU5ORUxdID0gcnVuQ2hhbm5lbEVmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtDQU5DRUxMRUQkMV0gPSBydW5DYW5jZWxsZWRFZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXBbRkxVU0hdID0gcnVuRmx1c2hFZmZlY3QsIF9lZmZlY3RSdW5uZXJNYXBbR0VUX0NPTlRFWFRdID0gcnVuR2V0Q29udGV4dEVmZmVjdCwgX2VmZmVjdFJ1bm5lck1hcFtTRVRfQ09OVEVYVF0gPSBydW5TZXRDb250ZXh0RWZmZWN0LCBfZWZmZWN0UnVubmVyTWFwKTtcblxuLyoqXG4gVXNlZCB0byB0cmFjayBhIHBhcmVudCB0YXNrIGFuZCBpdHMgZm9ya3NcbiBJbiB0aGUgZm9yayBtb2RlbCwgZm9ya2VkIHRhc2tzIGFyZSBhdHRhY2hlZCBieSBkZWZhdWx0IHRvIHRoZWlyIHBhcmVudFxuIFdlIG1vZGVsIHRoaXMgdXNpbmcgdGhlIGNvbmNlcHQgb2YgUGFyZW50IHRhc2sgJiYgbWFpbiBUYXNrXG4gbWFpbiB0YXNrIGlzIHRoZSBtYWluIGZsb3cgb2YgdGhlIGN1cnJlbnQgR2VuZXJhdG9yLCB0aGUgcGFyZW50IHRhc2tzIGlzIHRoZVxuIGFnZ3JlZ2F0aW9uIG9mIHRoZSBtYWluIHRhc2tzICsgYWxsIGl0cyBmb3JrZWQgdGFza3MuXG4gVGh1cyB0aGUgd2hvbGUgbW9kZWwgcmVwcmVzZW50cyBhbiBleGVjdXRpb24gdHJlZSB3aXRoIG11bHRpcGxlIGJyYW5jaGVzICh2cyB0aGVcbiBsaW5lYXIgZXhlY3V0aW9uIHRyZWUgaW4gc2VxdWVudGlhbCAobm9uIHBhcmFsbGVsKSBwcm9ncmFtbWluZylcblxuIEEgcGFyZW50IHRhc2tzIGhhcyB0aGUgZm9sbG93aW5nIHNlbWFudGljc1xuIC0gSXQgY29tcGxldGVzIGlmIGFsbCBpdHMgZm9ya3MgZWl0aGVyIGNvbXBsZXRlIG9yIGFsbCBjYW5jZWxsZWRcbiAtIElmIGl0J3MgY2FuY2VsbGVkLCBhbGwgZm9ya3MgYXJlIGNhbmNlbGxlZCBhcyB3ZWxsXG4gLSBJdCBhYm9ydHMgaWYgYW55IHVuY2F1Z2h0IGVycm9yIGJ1YmJsZXMgdXAgZnJvbSBmb3Jrc1xuIC0gSWYgaXQgY29tcGxldGVzLCB0aGUgcmV0dXJuIHZhbHVlIGlzIHRoZSBvbmUgcmV0dXJuZWQgYnkgdGhlIG1haW4gdGFza1xuICoqL1xuXG5mdW5jdGlvbiBmb3JrUXVldWUobWFpblRhc2ssIG9uQWJvcnQsIGNvbnQpIHtcbiAgdmFyIHRhc2tzID0gW107XG4gIHZhciByZXN1bHQ7XG4gIHZhciBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgYWRkVGFzayhtYWluVGFzayk7XG5cbiAgdmFyIGdldFRhc2tzID0gZnVuY3Rpb24gZ2V0VGFza3MoKSB7XG4gICAgcmV0dXJuIHRhc2tzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGFib3J0KGVycikge1xuICAgIG9uQWJvcnQoKTtcbiAgICBjYW5jZWxBbGwoKTtcbiAgICBjb250KGVyciwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRUYXNrKHRhc2spIHtcbiAgICB0YXNrcy5wdXNoKHRhc2spO1xuXG4gICAgdGFzay5jb250ID0gZnVuY3Rpb24gKHJlcywgaXNFcnIpIHtcbiAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZW1vdmUodGFza3MsIHRhc2spO1xuICAgICAgdGFzay5jb250ID0gbm9vcDtcblxuICAgICAgaWYgKGlzRXJyKSB7XG4gICAgICAgIGFib3J0KHJlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFzayA9PT0gbWFpblRhc2spIHtcbiAgICAgICAgICByZXN1bHQgPSByZXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRhc2tzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgY29udChyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbEFsbCgpIHtcbiAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICB0YXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICB0LmNvbnQgPSBub29wO1xuICAgICAgdC5jYW5jZWwoKTtcbiAgICB9KTtcbiAgICB0YXNrcyA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGRUYXNrOiBhZGRUYXNrLFxuICAgIGNhbmNlbEFsbDogY2FuY2VsQWxsLFxuICAgIGFib3J0OiBhYm9ydCxcbiAgICBnZXRUYXNrczogZ2V0VGFza3NcbiAgfTtcbn1cblxuLy8gdGhlcmUgY2FuIGJlIG9ubHkgYSBzaW5nbGUgc2FnYSBlcnJvciBjcmVhdGVkIGF0IGFueSBnaXZlbiBtb21lbnRcblxuZnVuY3Rpb24gZm9ybWF0TG9jYXRpb24oZmlsZU5hbWUsIGxpbmVOdW1iZXIpIHtcbiAgcmV0dXJuIGZpbGVOYW1lICsgXCI/XCIgKyBsaW5lTnVtYmVyO1xufVxuXG5mdW5jdGlvbiBlZmZlY3RMb2NhdGlvbkFzU3RyaW5nKGVmZmVjdCkge1xuICB2YXIgbG9jYXRpb24gPSBnZXRMb2NhdGlvbihlZmZlY3QpO1xuXG4gIGlmIChsb2NhdGlvbikge1xuICAgIHZhciBjb2RlID0gbG9jYXRpb24uY29kZSxcbiAgICAgICAgZmlsZU5hbWUgPSBsb2NhdGlvbi5maWxlTmFtZSxcbiAgICAgICAgbGluZU51bWJlciA9IGxvY2F0aW9uLmxpbmVOdW1iZXI7XG4gICAgdmFyIHNvdXJjZSA9IGNvZGUgKyBcIiAgXCIgKyBmb3JtYXRMb2NhdGlvbihmaWxlTmFtZSwgbGluZU51bWJlcik7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gc2FnYUxvY2F0aW9uQXNTdHJpbmcoc2FnYU1ldGEpIHtcbiAgdmFyIG5hbWUgPSBzYWdhTWV0YS5uYW1lLFxuICAgICAgbG9jYXRpb24gPSBzYWdhTWV0YS5sb2NhdGlvbjtcblxuICBpZiAobG9jYXRpb24pIHtcbiAgICByZXR1cm4gbmFtZSArIFwiICBcIiArIGZvcm1hdExvY2F0aW9uKGxvY2F0aW9uLmZpbGVOYW1lLCBsb2NhdGlvbi5saW5lTnVtYmVyKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lO1xufVxuXG5mdW5jdGlvbiBjYW5jZWxsZWRUYXNrc0FzU3RyaW5nKHNhZ2FTdGFjaykge1xuICB2YXIgY2FuY2VsbGVkVGFza3MgPSBmbGF0TWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGkuY2FuY2VsbGVkVGFza3M7XG4gIH0sIHNhZ2FTdGFjayk7XG5cbiAgaWYgKCFjYW5jZWxsZWRUYXNrcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZXR1cm4gWydUYXNrcyBjYW5jZWxsZWQgZHVlIHRvIGVycm9yOiddLmNvbmNhdChjYW5jZWxsZWRUYXNrcykuam9pbignXFxuJyk7XG59XG5cbnZhciBjcmFzaGVkRWZmZWN0ID0gbnVsbDtcbnZhciBzYWdhU3RhY2sgPSBbXTtcbnZhciBhZGRTYWdhRnJhbWUgPSBmdW5jdGlvbiBhZGRTYWdhRnJhbWUoZnJhbWUpIHtcbiAgZnJhbWUuY3Jhc2hlZEVmZmVjdCA9IGNyYXNoZWRFZmZlY3Q7XG4gIHNhZ2FTdGFjay5wdXNoKGZyYW1lKTtcbn07XG52YXIgY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgY3Jhc2hlZEVmZmVjdCA9IG51bGw7XG4gIHNhZ2FTdGFjay5sZW5ndGggPSAwO1xufTsgLy8gdGhpcyBzZXRzIGNyYXNoZWQgZWZmZWN0IGZvciB0aGUgc29vbi10by1iZS1yZXBvcnRlZCBzYWdhIGZyYW1lXG4vLyB0aGlzIHNsaWdodGx5IHN0cmVhdGNoZXMgdGhlIHNpbmdsZXRvbiBuYXR1cmUgb2YgdGhpcyBtb2R1bGUgaW50byB3cm9uZyBkaXJlY3Rpb25cbi8vIGFzIGl0J3MgZXZlbiBsZXNzIG9idmlvdXMgd2hhdCdzIHRoZSBkYXRhIGZsb3cgaGVyZSwgYnV0IGl0IGlzIHdoYXQgaXQgaXMgZm9yIG5vd1xuXG52YXIgc2V0Q3Jhc2hlZEVmZmVjdCA9IGZ1bmN0aW9uIHNldENyYXNoZWRFZmZlY3QoZWZmZWN0KSB7XG4gIGNyYXNoZWRFZmZlY3QgPSBlZmZlY3Q7XG59O1xuLyoqXG4gIEByZXR1cm5zIHtzdHJpbmd9XG5cbiAgQGV4YW1wbGVcbiAgVGhlIGFib3ZlIGVycm9yIG9jY3VycmVkIGluIHRhc2sgZXJyb3JJblB1dFNhZ2Ege3BhdGhUb0ZpbGV9XG4gIHdoZW4gZXhlY3V0aW5nIGVmZmVjdCBwdXQoe3R5cGU6ICdSRURVQ0VSX0FDVElPTl9FUlJPUl9JTl9QVVQnfSkge3BhdGhUb0ZpbGV9XG4gICAgICBjcmVhdGVkIGJ5IGZldGNoU2FnYSB7cGF0aFRvRmlsZX1cbiAgICAgIGNyZWF0ZWQgYnkgcm9vdFNhZ2Ege3BhdGhUb0ZpbGV9XG4qL1xuXG52YXIgdG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgdmFyIGZpcnN0U2FnYSA9IHNhZ2FTdGFja1swXSxcbiAgICAgIG90aGVyU2FnYXMgPSBzYWdhU3RhY2suc2xpY2UoMSk7XG4gIHZhciBjcmFzaGVkRWZmZWN0TG9jYXRpb24gPSBmaXJzdFNhZ2EuY3Jhc2hlZEVmZmVjdCA/IGVmZmVjdExvY2F0aW9uQXNTdHJpbmcoZmlyc3RTYWdhLmNyYXNoZWRFZmZlY3QpIDogbnVsbDtcbiAgdmFyIGVycm9yTWVzc2FnZSA9IFwiVGhlIGFib3ZlIGVycm9yIG9jY3VycmVkIGluIHRhc2sgXCIgKyBzYWdhTG9jYXRpb25Bc1N0cmluZyhmaXJzdFNhZ2EubWV0YSkgKyAoY3Jhc2hlZEVmZmVjdExvY2F0aW9uID8gXCIgXFxuIHdoZW4gZXhlY3V0aW5nIGVmZmVjdCBcIiArIGNyYXNoZWRFZmZlY3RMb2NhdGlvbiA6ICcnKTtcbiAgcmV0dXJuIFtlcnJvck1lc3NhZ2VdLmNvbmNhdChvdGhlclNhZ2FzLm1hcChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBcIiAgICBjcmVhdGVkIGJ5IFwiICsgc2FnYUxvY2F0aW9uQXNTdHJpbmcocy5tZXRhKTtcbiAgfSksIFtjYW5jZWxsZWRUYXNrc0FzU3RyaW5nKHNhZ2FTdGFjayldKS5qb2luKCdcXG4nKTtcbn07XG5cbmZ1bmN0aW9uIG5ld1Rhc2soZW52LCBtYWluVGFzaywgcGFyZW50Q29udGV4dCwgcGFyZW50RWZmZWN0SWQsIG1ldGEsIGlzUm9vdCwgY29udCkge1xuICB2YXIgX3Rhc2s7XG5cbiAgdmFyIHN0YXR1cyA9IFJVTk5JTkc7XG4gIHZhciB0YXNrUmVzdWx0O1xuICB2YXIgdGFza0Vycm9yO1xuICB2YXIgZGVmZXJyZWRFbmQgPSBudWxsO1xuICB2YXIgY2FuY2VsbGVkRHVlVG9FcnJvclRhc2tzID0gW107XG4gIHZhciBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRDb250ZXh0KTtcbiAgdmFyIHF1ZXVlID0gZm9ya1F1ZXVlKG1haW5UYXNrLCBmdW5jdGlvbiBvbkFib3J0KCkge1xuICAgIGNhbmNlbGxlZER1ZVRvRXJyb3JUYXNrcy5wdXNoLmFwcGx5KGNhbmNlbGxlZER1ZVRvRXJyb3JUYXNrcywgcXVldWUuZ2V0VGFza3MoKS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0Lm1ldGEubmFtZTtcbiAgICB9KSk7XG4gIH0sIGVuZCk7XG4gIC8qKlxuICAgVGhpcyBtYXkgYmUgY2FsbGVkIGJ5IGEgcGFyZW50IGdlbmVyYXRvciB0byB0cmlnZ2VyL3Byb3BhZ2F0ZSBjYW5jZWxsYXRpb25cbiAgIGNhbmNlbCBhbGwgcGVuZGluZyB0YXNrcyAoaW5jbHVkaW5nIHRoZSBtYWluIHRhc2spLCB0aGVuIGVuZCB0aGUgY3VycmVudCB0YXNrLlxuICAgIENhbmNlbGxhdGlvbiBwcm9wYWdhdGVzIGRvd24gdG8gdGhlIHdob2xlIGV4ZWN1dGlvbiB0cmVlIGhlbGQgYnkgdGhpcyBQYXJlbnQgdGFza1xuICAgSXQncyBhbHNvIHByb3BhZ2F0ZWQgdG8gYWxsIGpvaW5lcnMgb2YgdGhpcyB0YXNrIGFuZCB0aGVpciBleGVjdXRpb24gdHJlZS9qb2luZXJzXG4gICAgQ2FuY2VsbGF0aW9uIGlzIG5vb3AgZm9yIHRlcm1pbmF0ZWQvQ2FuY2VsbGVkIHRhc2tzIHRhc2tzXG4gICAqKi9cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHN0YXR1cyA9PT0gUlVOTklORykge1xuICAgICAgLy8gU2V0dGluZyBzdGF0dXMgdG8gQ0FOQ0VMTEVEIGRvZXMgbm90IG5lY2Vzc2FyaWx5IG1lYW4gdGhhdCB0aGUgdGFzay9pdGVyYXRvcnMgYXJlIHN0b3BwZWRcbiAgICAgIC8vIGVmZmVjdHMgaW4gdGhlIGl0ZXJhdG9yJ3MgZmluYWxseSBibG9jayB3aWxsIHN0aWxsIGJlIGV4ZWN1dGVkXG4gICAgICBzdGF0dXMgPSBDQU5DRUxMRUQ7XG4gICAgICBxdWV1ZS5jYW5jZWxBbGwoKTsgLy8gRW5kaW5nIHdpdGggYSBUQVNLX0NBTkNFTCB3aWxsIHByb3BhZ2F0ZSB0aGUgQ2FuY2VsbGF0aW9uIHRvIGFsbCBqb2luZXJzXG5cbiAgICAgIGVuZChUQVNLX0NBTkNFTCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZChyZXN1bHQsIGlzRXJyKSB7XG4gICAgaWYgKCFpc0Vycikge1xuICAgICAgLy8gVGhlIHN0YXR1cyBoZXJlIG1heSBiZSBSVU5OSU5HIG9yIENBTkNFTExFRFxuICAgICAgLy8gSWYgdGhlIHN0YXR1cyBpcyBDQU5DRUxMRUQsIHRoZW4gd2UgZG8gbm90IG5lZWQgdG8gY2hhbmdlIGl0IGhlcmVcbiAgICAgIGlmIChyZXN1bHQgPT09IFRBU0tfQ0FOQ0VMKSB7XG4gICAgICAgIHN0YXR1cyA9IENBTkNFTExFRDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzICE9PSBDQU5DRUxMRUQpIHtcbiAgICAgICAgc3RhdHVzID0gRE9ORTtcbiAgICAgIH1cblxuICAgICAgdGFza1Jlc3VsdCA9IHJlc3VsdDtcbiAgICAgIGRlZmVycmVkRW5kICYmIGRlZmVycmVkRW5kLnJlc29sdmUocmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdHVzID0gQUJPUlRFRDtcbiAgICAgIGFkZFNhZ2FGcmFtZSh7XG4gICAgICAgIG1ldGE6IG1ldGEsXG4gICAgICAgIGNhbmNlbGxlZFRhc2tzOiBjYW5jZWxsZWREdWVUb0Vycm9yVGFza3NcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGFzay5pc1Jvb3QpIHtcbiAgICAgICAgdmFyIHNhZ2FTdGFjayA9IHRvU3RyaW5nKCk7IC8vIHdlJ3ZlIGR1bXBlZCB0aGUgc2FnYSBzdGFjayB0byBzdHJpbmcgYW5kIGFyZSBwYXNzaW5nIGl0IHRvIHVzZXIncyBjb2RlXG4gICAgICAgIC8vIHdlIGtub3cgdGhhdCBpdCB3b24ndCBiZSBuZWVkZWQgYW55bW9yZSBhbmQgd2UgbmVlZCB0byBjbGVhciBpdFxuXG4gICAgICAgIGNsZWFyKCk7XG4gICAgICAgIGVudi5vbkVycm9yKHJlc3VsdCwge1xuICAgICAgICAgIHNhZ2FTdGFjazogc2FnYVN0YWNrXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0YXNrRXJyb3IgPSByZXN1bHQ7XG4gICAgICBkZWZlcnJlZEVuZCAmJiBkZWZlcnJlZEVuZC5yZWplY3QocmVzdWx0KTtcbiAgICB9XG5cbiAgICB0YXNrLmNvbnQocmVzdWx0LCBpc0Vycik7XG4gICAgdGFzay5qb2luZXJzLmZvckVhY2goZnVuY3Rpb24gKGpvaW5lcikge1xuICAgICAgam9pbmVyLmNiKHJlc3VsdCwgaXNFcnIpO1xuICAgIH0pO1xuICAgIHRhc2suam9pbmVycyA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRDb250ZXh0KHByb3BzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrKHByb3BzLCBvYmplY3QsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nKCd0YXNrJywgcHJvcHMpKTtcbiAgICB9XG5cbiAgICBhc3NpZ25XaXRoU3ltYm9scyhjb250ZXh0LCBwcm9wcyk7XG4gIH1cblxuICBmdW5jdGlvbiB0b1Byb21pc2UoKSB7XG4gICAgaWYgKGRlZmVycmVkRW5kKSB7XG4gICAgICByZXR1cm4gZGVmZXJyZWRFbmQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBkZWZlcnJlZEVuZCA9IGRlZmVycmVkKCk7XG5cbiAgICBpZiAoc3RhdHVzID09PSBBQk9SVEVEKSB7XG4gICAgICBkZWZlcnJlZEVuZC5yZWplY3QodGFza0Vycm9yKTtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyAhPT0gUlVOTklORykge1xuICAgICAgZGVmZXJyZWRFbmQucmVzb2x2ZSh0YXNrUmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWRFbmQucHJvbWlzZTtcbiAgfVxuXG4gIHZhciB0YXNrID0gKF90YXNrID0ge30sIF90YXNrW1RBU0tdID0gdHJ1ZSwgX3Rhc2suaWQgPSBwYXJlbnRFZmZlY3RJZCwgX3Rhc2subWV0YSA9IG1ldGEsIF90YXNrLmlzUm9vdCA9IGlzUm9vdCwgX3Rhc2suY29udGV4dCA9IGNvbnRleHQsIF90YXNrLmpvaW5lcnMgPSBbXSwgX3Rhc2sucXVldWUgPSBxdWV1ZSwgX3Rhc2suY2FuY2VsID0gY2FuY2VsLCBfdGFzay5jb250ID0gY29udCwgX3Rhc2suZW5kID0gZW5kLCBfdGFzay5zZXRDb250ZXh0ID0gc2V0Q29udGV4dCwgX3Rhc2sudG9Qcm9taXNlID0gdG9Qcm9taXNlLCBfdGFzay5pc1J1bm5pbmcgPSBmdW5jdGlvbiBpc1J1bm5pbmcoKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA9PT0gUlVOTklORztcbiAgfSwgX3Rhc2suaXNDYW5jZWxsZWQgPSBmdW5jdGlvbiBpc0NhbmNlbGxlZCgpIHtcbiAgICByZXR1cm4gc3RhdHVzID09PSBDQU5DRUxMRUQgfHwgc3RhdHVzID09PSBSVU5OSU5HICYmIG1haW5UYXNrLnN0YXR1cyA9PT0gQ0FOQ0VMTEVEO1xuICB9LCBfdGFzay5pc0Fib3J0ZWQgPSBmdW5jdGlvbiBpc0Fib3J0ZWQoKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA9PT0gQUJPUlRFRDtcbiAgfSwgX3Rhc2sucmVzdWx0ID0gZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgIHJldHVybiB0YXNrUmVzdWx0O1xuICB9LCBfdGFzay5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgIHJldHVybiB0YXNrRXJyb3I7XG4gIH0sIF90YXNrKTtcbiAgcmV0dXJuIHRhc2s7XG59XG5cbmZ1bmN0aW9uIHByb2MoZW52LCBpdGVyYXRvciQxLCBwYXJlbnRDb250ZXh0LCBwYXJlbnRFZmZlY3RJZCwgbWV0YSwgaXNSb290LCBjb250KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGl0ZXJhdG9yJDFbYXN5bmNJdGVyYXRvclN5bWJvbF0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWR1eC1zYWdhIGRvZXNuJ3Qgc3VwcG9ydCBhc3luYyBnZW5lcmF0b3JzLCBwbGVhc2UgdXNlIG9ubHkgcmVndWxhciBvbmVzXCIpO1xuICB9XG5cbiAgdmFyIGZpbmFsUnVuRWZmZWN0ID0gZW52LmZpbmFsaXplUnVuRWZmZWN0KHJ1bkVmZmVjdCk7XG4gIC8qKlxuICAgIFRyYWNrcyB0aGUgY3VycmVudCBlZmZlY3QgY2FuY2VsbGF0aW9uXG4gICAgRWFjaCB0aW1lIHRoZSBnZW5lcmF0b3IgcHJvZ3Jlc3Nlcy4gY2FsbGluZyBydW5FZmZlY3Qgd2lsbCBzZXQgYSBuZXcgdmFsdWVcbiAgICBvbiBpdC4gSXQgYWxsb3dzIHByb3BhZ2F0aW5nIGNhbmNlbGxhdGlvbiB0byBjaGlsZCBlZmZlY3RzXG4gICoqL1xuXG4gIG5leHQuY2FuY2VsID0gbm9vcDtcbiAgLyoqIENyZWF0ZXMgYSBtYWluIHRhc2sgdG8gdHJhY2sgdGhlIG1haW4gZmxvdyAqL1xuXG4gIHZhciBtYWluVGFzayA9IHtcbiAgICBtZXRhOiBtZXRhLFxuICAgIGNhbmNlbDogY2FuY2VsTWFpbixcbiAgICBzdGF0dXM6IFJVTk5JTkdcbiAgICAvKipcbiAgICAgQ3JlYXRlcyBhIG5ldyB0YXNrIGRlc2NyaXB0b3IgZm9yIHRoaXMgZ2VuZXJhdG9yLlxuICAgICBBIHRhc2sgaXMgdGhlIGFnZ3JlZ2F0aW9uIG9mIGl0J3MgbWFpblRhc2sgYW5kIGFsbCBpdCdzIGZvcmtlZCB0YXNrcy5cbiAgICAgKiovXG5cbiAgfTtcbiAgdmFyIHRhc2sgPSBuZXdUYXNrKGVudiwgbWFpblRhc2ssIHBhcmVudENvbnRleHQsIHBhcmVudEVmZmVjdElkLCBtZXRhLCBpc1Jvb3QsIGNvbnQpO1xuICB2YXIgZXhlY3V0aW5nQ29udGV4dCA9IHtcbiAgICB0YXNrOiB0YXNrLFxuICAgIGRpZ2VzdEVmZmVjdDogZGlnZXN0RWZmZWN0XG4gICAgLyoqXG4gICAgICBjYW5jZWxsYXRpb24gb2YgdGhlIG1haW4gdGFzay4gV2UnbGwgc2ltcGx5IHJlc3VtZSB0aGUgR2VuZXJhdG9yIHdpdGggYSBUQVNLX0NBTkNFTFxuICAgICoqL1xuXG4gIH07XG5cbiAgZnVuY3Rpb24gY2FuY2VsTWFpbigpIHtcbiAgICBpZiAobWFpblRhc2suc3RhdHVzID09PSBSVU5OSU5HKSB7XG4gICAgICBtYWluVGFzay5zdGF0dXMgPSBDQU5DRUxMRUQ7XG4gICAgICBuZXh0KFRBU0tfQ0FOQ0VMKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAgYXR0YWNoZXMgY2FuY2VsbGF0aW9uIGxvZ2ljIHRvIHRoaXMgdGFzaydzIGNvbnRpbnVhdGlvblxuICAgIHRoaXMgd2lsbCBwZXJtaXQgY2FuY2VsbGF0aW9uIHRvIHByb3BhZ2F0ZSBkb3duIHRoZSBjYWxsIGNoYWluXG4gICoqL1xuXG5cbiAgY29udC5jYW5jZWwgPSB0YXNrLmNhbmNlbDsgLy8ga2lja3MgdXAgdGhlIGdlbmVyYXRvclxuXG4gIG5leHQoKTsgLy8gdGhlbiByZXR1cm4gdGhlIHRhc2sgZGVzY3JpcHRvciB0byB0aGUgY2FsbGVyXG5cbiAgcmV0dXJuIHRhc2s7XG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBnZW5lcmF0b3IgZHJpdmVyXG4gICAqIEl0J3MgYSByZWN1cnNpdmUgYXN5bmMvY29udGludWF0aW9uIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGl0c2VsZlxuICAgKiB1bnRpbCB0aGUgZ2VuZXJhdG9yIHRlcm1pbmF0ZXMgb3IgdGhyb3dzXG4gICAqIEBwYXJhbSB7aW50ZXJuYWwgY29tbWFuZHMoVEFTS19DQU5DRUwgfCBURVJNSU5BVEUpIHwgYW55fSBhcmcgLSB2YWx1ZSwgZ2VuZXJhdG9yIHdpbGwgYmUgcmVzdW1lZCB3aXRoLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRXJyIC0gdGhlIGZsYWcgc2hvd3MgaWYgZWZmZWN0IGZpbmlzaGVkIHdpdGggYW4gZXJyb3JcbiAgICpcbiAgICogcmVjZWl2ZXMgZWl0aGVyIChjb21tYW5kIHwgZWZmZWN0IHJlc3VsdCwgZmFsc2UpIG9yIChhbnkgdGhyb3duIHRoaW5nLCB0cnVlKVxuICAgKi9cblxuICBmdW5jdGlvbiBuZXh0KGFyZywgaXNFcnIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgaWYgKGlzRXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yJDEudGhyb3coYXJnKTsgLy8gdXNlciBoYW5kbGVkIHRoZSBlcnJvciwgd2UgY2FuIGNsZWFyIGJvb2trZXB0IHZhbHVlc1xuXG4gICAgICAgIGNsZWFyKCk7XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZENhbmNlbChhcmcpKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgIGdldHRpbmcgVEFTS19DQU5DRUwgYXV0b21hdGljYWxseSBjYW5jZWxzIHRoZSBtYWluIHRhc2tcbiAgICAgICAgICBXZSBjYW4gZ2V0IHRoaXMgdmFsdWUgaGVyZVxuICAgICAgICAgICAtIEJ5IGNhbmNlbGxpbmcgdGhlIHBhcmVudCB0YXNrIG1hbnVhbGx5XG4gICAgICAgICAgLSBCeSBqb2luaW5nIGEgQ2FuY2VsbGVkIHRhc2tcbiAgICAgICAgKiovXG4gICAgICAgIG1haW5UYXNrLnN0YXR1cyA9IENBTkNFTExFRDtcbiAgICAgICAgLyoqXG4gICAgICAgICAgQ2FuY2VscyB0aGUgY3VycmVudCBlZmZlY3Q7IHRoaXMgd2lsbCBwcm9wYWdhdGUgdGhlIGNhbmNlbGxhdGlvbiBkb3duIHRvIGFueSBjYWxsZWQgdGFza3NcbiAgICAgICAgKiovXG5cbiAgICAgICAgbmV4dC5jYW5jZWwoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAgSWYgdGhpcyBHZW5lcmF0b3IgaGFzIGEgYHJldHVybmAgbWV0aG9kIHRoZW4gaW52b2tlcyBpdFxuICAgICAgICAgIFRoaXMgd2lsbCBqdW1wIHRvIHRoZSBmaW5hbGx5IGJsb2NrXG4gICAgICAgICoqL1xuXG4gICAgICAgIHJlc3VsdCA9IGZ1bmMoaXRlcmF0b3IkMS5yZXR1cm4pID8gaXRlcmF0b3IkMS5yZXR1cm4oVEFTS19DQU5DRUwpIDoge1xuICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IFRBU0tfQ0FOQ0VMXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZFRlcm1pbmF0ZShhcmcpKSB7XG4gICAgICAgIC8vIFdlIGdldCBURVJNSU5BVEUgZmxhZywgaS5lLiBieSB0YWtpbmcgZnJvbSBhIGNoYW5uZWwgdGhhdCBlbmRlZCB1c2luZyBgdGFrZWAgKGFuZCBub3QgYHRha2VtYCB1c2VkIHRvIHRyYXAgRW5kIG9mIGNoYW5uZWxzKVxuICAgICAgICByZXN1bHQgPSBmdW5jKGl0ZXJhdG9yJDEucmV0dXJuKSA/IGl0ZXJhdG9yJDEucmV0dXJuKCkgOiB7XG4gICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IkMS5uZXh0KGFyZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgZGlnZXN0RWZmZWN0KHJlc3VsdC52YWx1ZSwgcGFyZW50RWZmZWN0SWQsIG5leHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAgVGhpcyBHZW5lcmF0b3IgaGFzIGVuZGVkLCB0ZXJtaW5hdGUgdGhlIG1haW4gdGFzayBhbmQgbm90aWZ5IHRoZSBmb3JrIHF1ZXVlXG4gICAgICAgICoqL1xuICAgICAgICBpZiAobWFpblRhc2suc3RhdHVzICE9PSBDQU5DRUxMRUQpIHtcbiAgICAgICAgICBtYWluVGFzay5zdGF0dXMgPSBET05FO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFpblRhc2suY29udChyZXN1bHQudmFsdWUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAobWFpblRhc2suc3RhdHVzID09PSBDQU5DRUxMRUQpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIG1haW5UYXNrLnN0YXR1cyA9IEFCT1JURUQ7XG4gICAgICBtYWluVGFzay5jb250KGVycm9yLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW5FZmZlY3QoZWZmZWN0LCBlZmZlY3RJZCwgY3VyckNiKSB7XG4gICAgLyoqXG4gICAgICBlYWNoIGVmZmVjdCBydW5uZXIgbXVzdCBhdHRhY2ggaXRzIG93biBsb2dpYyBvZiBjYW5jZWxsYXRpb24gdG8gdGhlIHByb3ZpZGVkIGNhbGxiYWNrXG4gICAgICBpdCBhbGxvd3MgdGhpcyBnZW5lcmF0b3IgdG8gcHJvcGFnYXRlIGNhbmNlbGxhdGlvbiBkb3dud2FyZC5cbiAgICAgICBBVFRFTlRJT04hIGVmZmVjdCBydW5uZXJzIG11c3Qgc2V0dXAgdGhlIGNhbmNlbCBsb2dpYyBieSBzZXR0aW5nIGNiLmNhbmNlbCA9IFtjYW5jZWxNZXRob2RdXG4gICAgICBBbmQgdGhlIHNldHVwIG11c3Qgb2NjdXIgYmVmb3JlIGNhbGxpbmcgdGhlIGNhbGxiYWNrXG4gICAgICAgVGhpcyBpcyBhIHNvcnQgb2YgaW52ZXJzaW9uIG9mIGNvbnRyb2w6IGNhbGxlZCBhc3luYyBmdW5jdGlvbnMgYXJlIHJlc3BvbnNpYmxlXG4gICAgICBvZiBjb21wbGV0aW5nIHRoZSBmbG93IGJ5IGNhbGxpbmcgdGhlIHByb3ZpZGVkIGNvbnRpbnVhdGlvbjsgd2hpbGUgY2FsbGVyIGZ1bmN0aW9uc1xuICAgICAgYXJlIHJlc3BvbnNpYmxlIGZvciBhYm9ydGluZyB0aGUgY3VycmVudCBmbG93IGJ5IGNhbGxpbmcgdGhlIGF0dGFjaGVkIGNhbmNlbCBmdW5jdGlvblxuICAgICAgIExpYnJhcnkgdXNlcnMgY2FuIGF0dGFjaCB0aGVpciBvd24gY2FuY2VsbGF0aW9uIGxvZ2ljIHRvIHByb21pc2VzIGJ5IGRlZmluaW5nIGFcbiAgICAgIHByb21pc2VbQ0FOQ0VMXSBtZXRob2QgaW4gdGhlaXIgcmV0dXJuZWQgcHJvbWlzZXNcbiAgICAgIEFUVEVOVElPTiEgY2FsbGluZyBjYW5jZWwgbXVzdCBoYXZlIG5vIGVmZmVjdCBvbiBhbiBhbHJlYWR5IGNvbXBsZXRlZCBvciBjYW5jZWxsZWQgZWZmZWN0XG4gICAgKiovXG4gICAgaWYgKHByb21pc2UoZWZmZWN0KSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UoZWZmZWN0LCBjdXJyQ2IpO1xuICAgIH0gZWxzZSBpZiAoaXRlcmF0b3IoZWZmZWN0KSkge1xuICAgICAgLy8gcmVzb2x2ZSBpdGVyYXRvclxuICAgICAgcHJvYyhlbnYsIGVmZmVjdCwgdGFzay5jb250ZXh0LCBlZmZlY3RJZCwgbWV0YSxcbiAgICAgIC8qIGlzUm9vdCAqL1xuICAgICAgZmFsc2UsIGN1cnJDYik7XG4gICAgfSBlbHNlIGlmIChlZmZlY3QgJiYgZWZmZWN0W0lPXSkge1xuICAgICAgdmFyIGVmZmVjdFJ1bm5lciA9IGVmZmVjdFJ1bm5lck1hcFtlZmZlY3QudHlwZV07XG4gICAgICBlZmZlY3RSdW5uZXIoZW52LCBlZmZlY3QucGF5bG9hZCwgY3VyckNiLCBleGVjdXRpbmdDb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSByZXR1cm5lZCBhcyBpc1xuICAgICAgY3VyckNiKGVmZmVjdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGlnZXN0RWZmZWN0KGVmZmVjdCwgcGFyZW50RWZmZWN0SWQsIGNiLCBsYWJlbCkge1xuICAgIGlmIChsYWJlbCA9PT0gdm9pZCAwKSB7XG4gICAgICBsYWJlbCA9ICcnO1xuICAgIH1cblxuICAgIHZhciBlZmZlY3RJZCA9IG5leHRFZmZlY3RJZCgpO1xuICAgIGVudi5zYWdhTW9uaXRvciAmJiBlbnYuc2FnYU1vbml0b3IuZWZmZWN0VHJpZ2dlcmVkKHtcbiAgICAgIGVmZmVjdElkOiBlZmZlY3RJZCxcbiAgICAgIHBhcmVudEVmZmVjdElkOiBwYXJlbnRFZmZlY3RJZCxcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIGVmZmVjdDogZWZmZWN0XG4gICAgfSk7XG4gICAgLyoqXG4gICAgICBjb21wbGV0aW9uIGNhbGxiYWNrIGFuZCBjYW5jZWwgY2FsbGJhY2sgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZVxuICAgICAgV2UgY2FuJ3QgY2FuY2VsIGFuIGFscmVhZHkgY29tcGxldGVkIGVmZmVjdFxuICAgICAgQW5kIFdlIGNhbid0IGNvbXBsZXRlIGFuIGFscmVhZHkgY2FuY2VsbGVkIGVmZmVjdElkXG4gICAgKiovXG5cbiAgICB2YXIgZWZmZWN0U2V0dGxlZDsgLy8gQ29tcGxldGlvbiBjYWxsYmFjayBwYXNzZWQgdG8gdGhlIGFwcHJvcHJpYXRlIGVmZmVjdCBydW5uZXJcblxuICAgIGZ1bmN0aW9uIGN1cnJDYihyZXMsIGlzRXJyKSB7XG4gICAgICBpZiAoZWZmZWN0U2V0dGxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGVmZmVjdFNldHRsZWQgPSB0cnVlO1xuICAgICAgY2IuY2FuY2VsID0gbm9vcDsgLy8gZGVmZW5zaXZlIG1lYXN1cmVcblxuICAgICAgaWYgKGVudi5zYWdhTW9uaXRvcikge1xuICAgICAgICBpZiAoaXNFcnIpIHtcbiAgICAgICAgICBlbnYuc2FnYU1vbml0b3IuZWZmZWN0UmVqZWN0ZWQoZWZmZWN0SWQsIHJlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW52LnNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkKGVmZmVjdElkLCByZXMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Vycikge1xuICAgICAgICBzZXRDcmFzaGVkRWZmZWN0KGVmZmVjdCk7XG4gICAgICB9XG5cbiAgICAgIGNiKHJlcywgaXNFcnIpO1xuICAgIH0gLy8gdHJhY2tzIGRvd24gdGhlIGN1cnJlbnQgY2FuY2VsXG5cblxuICAgIGN1cnJDYi5jYW5jZWwgPSBub29wOyAvLyBzZXR1cCBjYW5jZWxsYXRpb24gbG9naWMgb24gdGhlIHBhcmVudCBjYlxuXG4gICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gcHJldmVudHMgY2FuY2VsbGluZyBhbiBhbHJlYWR5IGNvbXBsZXRlZCBlZmZlY3RcbiAgICAgIGlmIChlZmZlY3RTZXR0bGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWZmZWN0U2V0dGxlZCA9IHRydWU7XG4gICAgICBjdXJyQ2IuY2FuY2VsKCk7IC8vIHByb3BhZ2F0ZXMgY2FuY2VsIGRvd253YXJkXG5cbiAgICAgIGN1cnJDYi5jYW5jZWwgPSBub29wOyAvLyBkZWZlbnNpdmUgbWVhc3VyZVxuXG4gICAgICBlbnYuc2FnYU1vbml0b3IgJiYgZW52LnNhZ2FNb25pdG9yLmVmZmVjdENhbmNlbGxlZChlZmZlY3RJZCk7XG4gICAgfTtcblxuICAgIGZpbmFsUnVuRWZmZWN0KGVmZmVjdCwgZWZmZWN0SWQsIGN1cnJDYik7XG4gIH1cbn1cblxudmFyIFJVTl9TQUdBX1NJR05BVFVSRSA9ICdydW5TYWdhKG9wdGlvbnMsIHNhZ2EsIC4uLmFyZ3MpJztcbnZhciBOT05fR0VORVJBVE9SX0VSUiA9IFJVTl9TQUdBX1NJR05BVFVSRSArIFwiOiBzYWdhIGFyZ3VtZW50IG11c3QgYmUgYSBHZW5lcmF0b3IgZnVuY3Rpb24hXCI7XG5mdW5jdGlvbiBydW5TYWdhKF9yZWYsIHNhZ2EpIHtcbiAgdmFyIF9yZWYkY2hhbm5lbCA9IF9yZWYuY2hhbm5lbCxcbiAgICAgIGNoYW5uZWwgPSBfcmVmJGNoYW5uZWwgPT09IHZvaWQgMCA/IHN0ZENoYW5uZWwoKSA6IF9yZWYkY2hhbm5lbCxcbiAgICAgIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZSxcbiAgICAgIF9yZWYkY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3JlZiRjb250ZXh0LFxuICAgICAgc2FnYU1vbml0b3IgPSBfcmVmLnNhZ2FNb25pdG9yLFxuICAgICAgZWZmZWN0TWlkZGxld2FyZXMgPSBfcmVmLmVmZmVjdE1pZGRsZXdhcmVzLFxuICAgICAgX3JlZiRvbkVycm9yID0gX3JlZi5vbkVycm9yLFxuICAgICAgb25FcnJvciA9IF9yZWYkb25FcnJvciA9PT0gdm9pZCAwID8gbG9nRXJyb3IgOiBfcmVmJG9uRXJyb3I7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVjayhzYWdhLCBmdW5jLCBOT05fR0VORVJBVE9SX0VSUik7XG4gIH1cblxuICB2YXIgaXRlcmF0b3IkMSA9IHNhZ2EuYXBwbHkodm9pZCAwLCBhcmdzKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrKGl0ZXJhdG9yJDEsIGl0ZXJhdG9yLCBOT05fR0VORVJBVE9SX0VSUik7XG4gIH1cblxuICB2YXIgZWZmZWN0SWQgPSBuZXh0RWZmZWN0SWQoKTtcblxuICBpZiAoc2FnYU1vbml0b3IpIHtcbiAgICAvLyBtb25pdG9ycyBhcmUgZXhwZWN0ZWQgdG8gaGF2ZSBhIGNlcnRhaW4gaW50ZXJmYWNlLCBsZXQncyBmaWxsLWluIGFueSBtaXNzaW5nIG9uZXNcbiAgICBzYWdhTW9uaXRvci5yb290U2FnYVN0YXJ0ZWQgPSBzYWdhTW9uaXRvci5yb290U2FnYVN0YXJ0ZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RSZXNvbHZlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3IuZWZmZWN0UmVqZWN0ZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RSZWplY3RlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdENhbmNlbGxlZCA9IHNhZ2FNb25pdG9yLmVmZmVjdENhbmNlbGxlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmFjdGlvbkRpc3BhdGNoZWQgPSBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3Iucm9vdFNhZ2FTdGFydGVkKHtcbiAgICAgIGVmZmVjdElkOiBlZmZlY3RJZCxcbiAgICAgIHNhZ2E6IHNhZ2EsXG4gICAgICBhcmdzOiBhcmdzXG4gICAgfSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChub3RVbmRlZihkaXNwYXRjaCkpIHtcbiAgICAgIGNoZWNrKGRpc3BhdGNoLCBmdW5jLCAnZGlzcGF0Y2ggbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKG5vdFVuZGVmKGdldFN0YXRlKSkge1xuICAgICAgY2hlY2soZ2V0U3RhdGUsIGZ1bmMsICdnZXRTdGF0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBpZiAobm90VW5kZWYoZWZmZWN0TWlkZGxld2FyZXMpKSB7XG4gICAgICB2YXIgTUlERExFV0FSRV9UWVBFX0VSUk9SID0gJ2VmZmVjdE1pZGRsZXdhcmVzIG11c3QgYmUgYW4gYXJyYXkgb2YgZnVuY3Rpb25zJztcbiAgICAgIGNoZWNrKGVmZmVjdE1pZGRsZXdhcmVzLCBhcnJheSQxLCBNSURETEVXQVJFX1RZUEVfRVJST1IpO1xuICAgICAgZWZmZWN0TWlkZGxld2FyZXMuZm9yRWFjaChmdW5jdGlvbiAoZWZmZWN0TWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gY2hlY2soZWZmZWN0TWlkZGxld2FyZSwgZnVuYywgTUlERExFV0FSRV9UWVBFX0VSUk9SKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNoZWNrKG9uRXJyb3IsIGZ1bmMsICdvbkVycm9yIHBhc3NlZCB0byB0aGUgcmVkdXgtc2FnYSBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgfVxuXG4gIHZhciBmaW5hbGl6ZVJ1bkVmZmVjdDtcblxuICBpZiAoZWZmZWN0TWlkZGxld2FyZXMpIHtcbiAgICB2YXIgbWlkZGxld2FyZSA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBlZmZlY3RNaWRkbGV3YXJlcyk7XG5cbiAgICBmaW5hbGl6ZVJ1bkVmZmVjdCA9IGZ1bmN0aW9uIGZpbmFsaXplUnVuRWZmZWN0KHJ1bkVmZmVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlZmZlY3QsIGVmZmVjdElkLCBjdXJyQ2IpIHtcbiAgICAgICAgdmFyIHBsYWluUnVuRWZmZWN0ID0gZnVuY3Rpb24gcGxhaW5SdW5FZmZlY3QoZWZmKSB7XG4gICAgICAgICAgcmV0dXJuIHJ1bkVmZmVjdChlZmYsIGVmZmVjdElkLCBjdXJyQ2IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKHBsYWluUnVuRWZmZWN0KShlZmZlY3QpO1xuICAgICAgfTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZpbmFsaXplUnVuRWZmZWN0ID0gaWRlbnRpdHk7XG4gIH1cblxuICB2YXIgZW52ID0ge1xuICAgIGNoYW5uZWw6IGNoYW5uZWwsXG4gICAgZGlzcGF0Y2g6IHdyYXBTYWdhRGlzcGF0Y2goZGlzcGF0Y2gpLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICBzYWdhTW9uaXRvcjogc2FnYU1vbml0b3IsXG4gICAgb25FcnJvcjogb25FcnJvcixcbiAgICBmaW5hbGl6ZVJ1bkVmZmVjdDogZmluYWxpemVSdW5FZmZlY3RcbiAgfTtcbiAgcmV0dXJuIGltbWVkaWF0ZWx5KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGFzayA9IHByb2MoZW52LCBpdGVyYXRvciQxLCBjb250ZXh0LCBlZmZlY3RJZCwgZ2V0TWV0YUluZm8oc2FnYSksXG4gICAgLyogaXNSb290ICovXG4gICAgdHJ1ZSwgbm9vcCk7XG5cbiAgICBpZiAoc2FnYU1vbml0b3IpIHtcbiAgICAgIHNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkKGVmZmVjdElkLCB0YXNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFzaztcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNhZ2FNaWRkbGV3YXJlRmFjdG9yeShfcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfcmVmMiRjb250ZXh0LFxuICAgICAgX3JlZjIkY2hhbm5lbCA9IF9yZWYyLmNoYW5uZWwsXG4gICAgICBjaGFubmVsID0gX3JlZjIkY2hhbm5lbCA9PT0gdm9pZCAwID8gc3RkQ2hhbm5lbCgpIDogX3JlZjIkY2hhbm5lbCxcbiAgICAgIHNhZ2FNb25pdG9yID0gX3JlZjIuc2FnYU1vbml0b3IsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbnRleHRcIiwgXCJjaGFubmVsXCIsIFwic2FnYU1vbml0b3JcIl0pO1xuXG4gIHZhciBib3VuZFJ1blNhZ2E7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVjayhjaGFubmVsLCBjaGFubmVsJDEsICdvcHRpb25zLmNoYW5uZWwgcGFzc2VkIHRvIHRoZSBTYWdhIG1pZGRsZXdhcmUgaXMgbm90IGEgY2hhbm5lbCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2FnYU1pZGRsZXdhcmUoX3JlZjMpIHtcbiAgICB2YXIgZ2V0U3RhdGUgPSBfcmVmMy5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2ggPSBfcmVmMy5kaXNwYXRjaDtcbiAgICBib3VuZFJ1blNhZ2EgPSBydW5TYWdhLmJpbmQobnVsbCwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBjaGFubmVsOiBjaGFubmVsLFxuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgICAgc2FnYU1vbml0b3I6IHNhZ2FNb25pdG9yXG4gICAgfSkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHNhZ2FNb25pdG9yICYmIHNhZ2FNb25pdG9yLmFjdGlvbkRpc3BhdGNoZWQpIHtcbiAgICAgICAgICBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkKGFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dChhY3Rpb24pOyAvLyBoaXQgcmVkdWNlcnNcblxuICAgICAgICBjaGFubmVsLnB1dChhY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgc2FnYU1pZGRsZXdhcmUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFib3VuZFJ1blNhZ2EpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmVmb3JlIHJ1bm5pbmcgYSBTYWdhLCB5b3UgbXVzdCBtb3VudCB0aGUgU2FnYSBtaWRkbGV3YXJlIG9uIHRoZSBTdG9yZSB1c2luZyBhcHBseU1pZGRsZXdhcmUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmRSdW5TYWdhLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBzYWdhTWlkZGxld2FyZS5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrKHByb3BzLCBvYmplY3QsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nKCdzYWdhTWlkZGxld2FyZScsIHByb3BzKSk7XG4gICAgfVxuXG4gICAgYXNzaWduV2l0aFN5bWJvbHMoY29udGV4dCwgcHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBzYWdhTWlkZGxld2FyZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2FnYU1pZGRsZXdhcmVGYWN0b3J5O1xuZXhwb3J0IHsgcnVuU2FnYSwgRU5ELCBpc0VuZCwgZXZlbnRDaGFubmVsLCBjaGFubmVsLCBtdWx0aWNhc3RDaGFubmVsLCBzdGRDaGFubmVsIH07XG4iLCJpbXBvcnQgY3JlYXRlU2FnYU1pZGRsZXdhcmVfX2RlZmF1bHQgZnJvbSAnQHJlZHV4LXNhZ2EvY29yZSc7XG5leHBvcnQgKiBmcm9tICdAcmVkdXgtc2FnYS9jb3JlJztcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlX19kZWZhdWx0O1xuIiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgeyBBcHBBY3Rpb25zLCBTQVZFX0NVQ1VNQkVSX0JVSUxEUywgU0FWRV9DVUNVTUJFUl9KT0JTLCBTQVZFX0NVQ1VNQkVSX1JFUE9SVCB9IGZyb20gXCIuLi9hY3Rpb24vYXBwLmFjdGlvblwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcHBTdGF0ZSB7XHJcbiAgICBtYW51YWxKb2JzOiBBcnJheTxzdHJpbmc+LFxyXG4gICAgYXV0b1RyaWdnZXJKb2JzOiBBcnJheTxzdHJpbmc+XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IEFwcFN0YXRlID0ge1xyXG4gICAgbWFudWFsSm9iczogW10sXHJcbiAgICBhdXRvVHJpZ2dlckpvYnM6IFtdXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uOiBBcHBBY3Rpb25zKTogQXBwU3RhdGUge1xyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgICAgIGNhc2UgU0FWRV9DVUNVTUJFUl9KT0JTOiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXBwUmVkdWNlcjogYWN0aW9uOiAlcywgZGF0YTogJW9cIiwgU0FWRV9DVUNVTUJFUl9KT0JTLCBhY3Rpb24uam9icyk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FzZSBTQVZFX0NVQ1VNQkVSX0JVSUxEUzoge1xyXG4gICAgICAgICAgICBhY3Rpb24uYnVpbGRzXHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FzZSBTQVZFX0NVQ1VNQkVSX1JFUE9SVDoge1xyXG4gICAgICAgICAgICBhY3Rpb24ucmVwb3J0XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbn0iLCJpbXBvcnQgJ0ByZWR1eC1zYWdhL3N5bWJvbHMnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IGNoYW5uZWwsIHN0cmluZ2FibGVGdW5jLCBmdW5jLCBub3RVbmRlZiB9IGZyb20gJ0ByZWR1eC1zYWdhL2lzJztcbmltcG9ydCB7IEIgYXMgbWFrZUl0ZXJhdG9yLCBNIGFzIHRha2UsIE4gYXMgZm9yaywgTyBhcyBjYW5jZWwsIFAgYXMgY2FsbCwgUSBhcyBhY3Rpb25DaGFubmVsLCBSIGFzIHNsaWRpbmcsIFMgYXMgZGVsYXksIFQgYXMgcmFjZSwgYyBhcyBjaGVjayB9IGZyb20gJy4vY2h1bmstZTkyMmM5NTAuanMnO1xuZXhwb3J0IHsgVyBhcyBlZmZlY3RUeXBlcywgTSBhcyB0YWtlLCBYIGFzIHRha2VNYXliZSwgWSBhcyBwdXQsIFogYXMgcHV0UmVzb2x2ZSwgXyBhcyBhbGwsIFQgYXMgcmFjZSwgUCBhcyBjYWxsLCAkIGFzIGFwcGx5LCBhMCBhcyBjcHMsIE4gYXMgZm9yaywgYTEgYXMgc3Bhd24sIGEyIGFzIGpvaW4sIE8gYXMgY2FuY2VsLCBhMyBhcyBzZWxlY3QsIFEgYXMgYWN0aW9uQ2hhbm5lbCwgYTQgYXMgY2FuY2VsbGVkLCBhNSBhcyBmbHVzaCwgYTYgYXMgZ2V0Q29udGV4dCwgYTcgYXMgc2V0Q29udGV4dCwgUyBhcyBkZWxheSB9IGZyb20gJy4vY2h1bmstZTkyMmM5NTAuanMnO1xuaW1wb3J0ICdAcmVkdXgtc2FnYS9kZWxheS1wJztcblxudmFyIGRvbmUgPSBmdW5jdGlvbiBkb25lKHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZG9uZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG5cbnZhciBxRW5kID0ge307XG5mdW5jdGlvbiBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSB7XG4gIGlmIChjaGFubmVsKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuICdjaGFubmVsJztcbiAgfVxuXG4gIGlmIChzdHJpbmdhYmxlRnVuYyhwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCk7XG4gIH1cblxuICBpZiAoZnVuYyhwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiBwYXR0ZXJuT3JDaGFubmVsLm5hbWU7XG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwpO1xufVxuZnVuY3Rpb24gZnNtSXRlcmF0b3IoZnNtLCBzdGFydFN0YXRlLCBuYW1lKSB7XG4gIHZhciBzdGF0ZVVwZGF0ZXIsXG4gICAgICBlcnJvclN0YXRlLFxuICAgICAgZWZmZWN0LFxuICAgICAgbmV4dFN0YXRlID0gc3RhcnRTdGF0ZTtcblxuICBmdW5jdGlvbiBuZXh0KGFyZywgZXJyb3IpIHtcbiAgICBpZiAobmV4dFN0YXRlID09PSBxRW5kKSB7XG4gICAgICByZXR1cm4gZG9uZShhcmcpO1xuICAgIH1cblxuICAgIGlmIChlcnJvciAmJiAhZXJyb3JTdGF0ZSkge1xuICAgICAgbmV4dFN0YXRlID0gcUVuZDtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZVVwZGF0ZXIgJiYgc3RhdGVVcGRhdGVyKGFyZyk7XG4gICAgICB2YXIgY3VycmVudFN0YXRlID0gZXJyb3IgPyBmc21bZXJyb3JTdGF0ZV0oZXJyb3IpIDogZnNtW25leHRTdGF0ZV0oKTtcbiAgICAgIG5leHRTdGF0ZSA9IGN1cnJlbnRTdGF0ZS5uZXh0U3RhdGU7XG4gICAgICBlZmZlY3QgPSBjdXJyZW50U3RhdGUuZWZmZWN0O1xuICAgICAgc3RhdGVVcGRhdGVyID0gY3VycmVudFN0YXRlLnN0YXRlVXBkYXRlcjtcbiAgICAgIGVycm9yU3RhdGUgPSBjdXJyZW50U3RhdGUuZXJyb3JTdGF0ZTtcbiAgICAgIHJldHVybiBuZXh0U3RhdGUgPT09IHFFbmQgPyBkb25lKGFyZykgOiBlZmZlY3Q7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VJdGVyYXRvcihuZXh0LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXR1cm4gbmV4dChudWxsLCBlcnJvcik7XG4gIH0sIG5hbWUpO1xufVxuXG5mdW5jdGlvbiB0YWtlRXZlcnkocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciB5VGFrZSA9IHtcbiAgICBkb25lOiBmYWxzZSxcbiAgICB2YWx1ZTogdGFrZShwYXR0ZXJuT3JDaGFubmVsKVxuICB9O1xuXG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgdmFsdWU6IGZvcmsuYXBwbHkodm9pZCAwLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpXG4gICAgfTtcbiAgfTtcblxuICB2YXIgYWN0aW9uLFxuICAgICAgc2V0QWN0aW9uID0gZnVuY3Rpb24gc2V0QWN0aW9uKGFjKSB7XG4gICAgcmV0dXJuIGFjdGlvbiA9IGFjO1xuICB9O1xuXG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTInLFxuICAgICAgICBlZmZlY3Q6IHlUYWtlLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldEFjdGlvblxuICAgICAgfTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3ExJyxcbiAgICAgICAgZWZmZWN0OiB5Rm9yayhhY3Rpb24pXG4gICAgICB9O1xuICAgIH1cbiAgfSwgJ3ExJywgXCJ0YWtlRXZlcnkoXCIgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArIFwiLCBcIiArIHdvcmtlci5uYW1lICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiB0YWtlTGF0ZXN0KHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgeVRha2UgPSB7XG4gICAgZG9uZTogZmFsc2UsXG4gICAgdmFsdWU6IHRha2UocGF0dGVybk9yQ2hhbm5lbClcbiAgfTtcblxuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7XG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBmb3JrLmFwcGx5KHZvaWQgMCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKVxuICAgIH07XG4gIH07XG5cbiAgdmFyIHlDYW5jZWwgPSBmdW5jdGlvbiB5Q2FuY2VsKHRhc2spIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogY2FuY2VsKHRhc2spXG4gICAgfTtcbiAgfTtcblxuICB2YXIgdGFzaywgYWN0aW9uO1xuXG4gIHZhciBzZXRUYXNrID0gZnVuY3Rpb24gc2V0VGFzayh0KSB7XG4gICAgcmV0dXJuIHRhc2sgPSB0O1xuICB9O1xuXG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMicsXG4gICAgICAgIGVmZmVjdDogeVRha2UsXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0QWN0aW9uXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIHRhc2sgPyB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EzJyxcbiAgICAgICAgZWZmZWN0OiB5Q2FuY2VsKHRhc2spXG4gICAgICB9IDoge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMScsXG4gICAgICAgIGVmZmVjdDogeUZvcmsoYWN0aW9uKSxcbiAgICAgICAgc3RhdGVVcGRhdGVyOiBzZXRUYXNrXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTM6IGZ1bmN0aW9uIHEzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTEnLFxuICAgICAgICBlZmZlY3Q6IHlGb3JrKGFjdGlvbiksXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0VGFza1xuICAgICAgfTtcbiAgICB9XG4gIH0sICdxMScsIFwidGFrZUxhdGVzdChcIiArIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpICsgXCIsIFwiICsgd29ya2VyLm5hbWUgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIHRha2VMZWFkaW5nKHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgeVRha2UgPSB7XG4gICAgZG9uZTogZmFsc2UsXG4gICAgdmFsdWU6IHRha2UocGF0dGVybk9yQ2hhbm5lbClcbiAgfTtcblxuICB2YXIgeUNhbGwgPSBmdW5jdGlvbiB5Q2FsbChhYykge1xuICAgIHJldHVybiB7XG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBjYWxsLmFwcGx5KHZvaWQgMCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGFjdGlvbjtcblxuICB2YXIgc2V0QWN0aW9uID0gZnVuY3Rpb24gc2V0QWN0aW9uKGFjKSB7XG4gICAgcmV0dXJuIGFjdGlvbiA9IGFjO1xuICB9O1xuXG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTInLFxuICAgICAgICBlZmZlY3Q6IHlUYWtlLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldEFjdGlvblxuICAgICAgfTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3ExJyxcbiAgICAgICAgZWZmZWN0OiB5Q2FsbChhY3Rpb24pXG4gICAgICB9O1xuICAgIH1cbiAgfSwgJ3ExJywgXCJ0YWtlTGVhZGluZyhcIiArIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpICsgXCIsIFwiICsgd29ya2VyLm5hbWUgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIHRocm90dGxlKGRlbGF5TGVuZ3RoLCBwYXR0ZXJuLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDMgPyBfbGVuIC0gMyA6IDApLCBfa2V5ID0gMzsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDNdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGFjdGlvbiwgY2hhbm5lbDtcbiAgdmFyIHlBY3Rpb25DaGFubmVsID0ge1xuICAgIGRvbmU6IGZhbHNlLFxuICAgIHZhbHVlOiBhY3Rpb25DaGFubmVsKHBhdHRlcm4sIHNsaWRpbmcoMSkpXG4gIH07XG5cbiAgdmFyIHlUYWtlID0gZnVuY3Rpb24geVRha2UoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHRha2UoY2hhbm5lbClcbiAgICB9O1xuICB9O1xuXG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgdmFsdWU6IGZvcmsuYXBwbHkodm9pZCAwLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpXG4gICAgfTtcbiAgfTtcblxuICB2YXIgeURlbGF5ID0ge1xuICAgIGRvbmU6IGZhbHNlLFxuICAgIHZhbHVlOiBkZWxheShkZWxheUxlbmd0aClcbiAgfTtcblxuICB2YXIgc2V0QWN0aW9uID0gZnVuY3Rpb24gc2V0QWN0aW9uKGFjKSB7XG4gICAgcmV0dXJuIGFjdGlvbiA9IGFjO1xuICB9O1xuXG4gIHZhciBzZXRDaGFubmVsID0gZnVuY3Rpb24gc2V0Q2hhbm5lbChjaCkge1xuICAgIHJldHVybiBjaGFubmVsID0gY2g7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMicsXG4gICAgICAgIGVmZmVjdDogeUFjdGlvbkNoYW5uZWwsXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0Q2hhbm5lbFxuICAgICAgfTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EzJyxcbiAgICAgICAgZWZmZWN0OiB5VGFrZSgpLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldEFjdGlvblxuICAgICAgfTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3E0JyxcbiAgICAgICAgZWZmZWN0OiB5Rm9yayhhY3Rpb24pXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTQ6IGZ1bmN0aW9uIHE0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTInLFxuICAgICAgICBlZmZlY3Q6IHlEZWxheVxuICAgICAgfTtcbiAgICB9XG4gIH0sICdxMScsIFwidGhyb3R0bGUoXCIgKyBzYWZlTmFtZShwYXR0ZXJuKSArIFwiLCBcIiArIHdvcmtlci5uYW1lICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiByZXRyeShtYXhUcmllcywgZGVsYXlMZW5ndGgsIGZuKSB7XG4gIHZhciBjb3VudGVyID0gbWF4VHJpZXM7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDMgPyBfbGVuIC0gMyA6IDApLCBfa2V5ID0gMzsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDNdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlDYWxsID0ge1xuICAgIGRvbmU6IGZhbHNlLFxuICAgIHZhbHVlOiBjYWxsLmFwcGx5KHZvaWQgMCwgW2ZuXS5jb25jYXQoYXJncykpXG4gIH07XG4gIHZhciB5RGVsYXkgPSB7XG4gICAgZG9uZTogZmFsc2UsXG4gICAgdmFsdWU6IGRlbGF5KGRlbGF5TGVuZ3RoKVxuICB9O1xuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EyJyxcbiAgICAgICAgZWZmZWN0OiB5Q2FsbCxcbiAgICAgICAgZXJyb3JTdGF0ZTogJ3ExMCdcbiAgICAgIH07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6IHFFbmRcbiAgICAgIH07XG4gICAgfSxcbiAgICBxMTA6IGZ1bmN0aW9uIHExMChlcnJvcikge1xuICAgICAgY291bnRlciAtPSAxO1xuXG4gICAgICBpZiAoY291bnRlciA8PSAwKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMScsXG4gICAgICAgIGVmZmVjdDogeURlbGF5XG4gICAgICB9O1xuICAgIH1cbiAgfSwgJ3ExJywgXCJyZXRyeShcIiArIGZuLm5hbWUgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIGRlYm91bmNlSGVscGVyKGRlbGF5TGVuZ3RoLCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDMgPyBfbGVuIC0gMyA6IDApLCBfa2V5ID0gMzsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDNdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGFjdGlvbiwgcmFjZU91dHB1dDtcbiAgdmFyIHlUYWtlID0ge1xuICAgIGRvbmU6IGZhbHNlLFxuICAgIHZhbHVlOiB0YWtlKHBhdHRlcm5PckNoYW5uZWwpXG4gIH07XG4gIHZhciB5UmFjZSA9IHtcbiAgICBkb25lOiBmYWxzZSxcbiAgICB2YWx1ZTogcmFjZSh7XG4gICAgICBhY3Rpb246IHRha2UocGF0dGVybk9yQ2hhbm5lbCksXG4gICAgICBkZWJvdW5jZTogZGVsYXkoZGVsYXlMZW5ndGgpXG4gICAgfSlcbiAgfTtcblxuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7XG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBmb3JrLmFwcGx5KHZvaWQgMCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKVxuICAgIH07XG4gIH07XG5cbiAgdmFyIHlOb29wID0gZnVuY3Rpb24geU5vb3AodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9O1xuICB9O1xuXG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgdmFyIHNldFJhY2VPdXRwdXQgPSBmdW5jdGlvbiBzZXRSYWNlT3V0cHV0KHJvKSB7XG4gICAgcmV0dXJuIHJhY2VPdXRwdXQgPSBybztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EyJyxcbiAgICAgICAgZWZmZWN0OiB5VGFrZSxcbiAgICAgICAgc3RhdGVVcGRhdGVyOiBzZXRBY3Rpb25cbiAgICAgIH07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMycsXG4gICAgICAgIGVmZmVjdDogeVJhY2UsXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0UmFjZU91dHB1dFxuICAgICAgfTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiByYWNlT3V0cHV0LmRlYm91bmNlID8ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMScsXG4gICAgICAgIGVmZmVjdDogeUZvcmsoYWN0aW9uKVxuICAgICAgfSA6IHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTInLFxuICAgICAgICBlZmZlY3Q6IHlOb29wKHJhY2VPdXRwdXQuYWN0aW9uKSxcbiAgICAgICAgc3RhdGVVcGRhdGVyOiBzZXRBY3Rpb25cbiAgICAgIH07XG4gICAgfVxuICB9LCAncTEnLCBcImRlYm91bmNlKFwiICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyBcIiwgXCIgKyB3b3JrZXIubmFtZSArIFwiKVwiKTtcbn1cblxudmFyIHZhbGlkYXRlVGFrZUVmZmVjdCA9IGZ1bmN0aW9uIHZhbGlkYXRlVGFrZUVmZmVjdChmbiwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGNoZWNrKHBhdHRlcm5PckNoYW5uZWwsIG5vdFVuZGVmLCBmbi5uYW1lICsgXCIgcmVxdWlyZXMgYSBwYXR0ZXJuIG9yIGNoYW5uZWxcIik7XG4gIGNoZWNrKHdvcmtlciwgbm90VW5kZWYsIGZuLm5hbWUgKyBcIiByZXF1aXJlcyBhIHNhZ2EgcGFyYW1ldGVyXCIpO1xufTtcblxuZnVuY3Rpb24gdGFrZUV2ZXJ5JDEocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVUYWtlRWZmZWN0KHRha2VFdmVyeSQxLCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpO1xuICB9XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodm9pZCAwLCBbdGFrZUV2ZXJ5LCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5mdW5jdGlvbiB0YWtlTGF0ZXN0JDEocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVUYWtlRWZmZWN0KHRha2VMYXRlc3QkMSwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHZvaWQgMCwgW3Rha2VMYXRlc3QsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cbmZ1bmN0aW9uIHRha2VMZWFkaW5nJDEocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVUYWtlRWZmZWN0KHRha2VMZWFkaW5nJDEsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcik7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMgPiAyID8gX2xlbjMgLSAyIDogMCksIF9rZXkzID0gMjsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGFyZ3NbX2tleTMgLSAyXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh2b2lkIDAsIFt0YWtlTGVhZGluZywgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuZnVuY3Rpb24gdGhyb3R0bGUkMShtcywgcGF0dGVybiwgd29ya2VyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2socGF0dGVybiwgbm90VW5kZWYsICd0aHJvdHRsZSByZXF1aXJlcyBhIHBhdHRlcm4nKTtcbiAgICBjaGVjayh3b3JrZXIsIG5vdFVuZGVmLCAndGhyb3R0bGUgcmVxdWlyZXMgYSBzYWdhIHBhcmFtZXRlcicpO1xuICB9XG5cbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40ID4gMyA/IF9sZW40IC0gMyA6IDApLCBfa2V5NCA9IDM7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBhcmdzW19rZXk0IC0gM10gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodm9pZCAwLCBbdGhyb3R0bGUsIG1zLCBwYXR0ZXJuLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5mdW5jdGlvbiByZXRyeSQxKG1heFRyaWVzLCBkZWxheUxlbmd0aCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSA+IDMgPyBfbGVuNSAtIDMgOiAwKSwgX2tleTUgPSAzOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgYXJnc1tfa2V5NSAtIDNdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgfVxuXG4gIHJldHVybiBjYWxsLmFwcGx5KHZvaWQgMCwgW3JldHJ5LCBtYXhUcmllcywgZGVsYXlMZW5ndGgsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cbmZ1bmN0aW9uIGRlYm91bmNlKGRlbGF5TGVuZ3RoLCBwYXR0ZXJuLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42ID4gMyA/IF9sZW42IC0gMyA6IDApLCBfa2V5NiA9IDM7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICBhcmdzW19rZXk2IC0gM10gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodm9pZCAwLCBbZGVib3VuY2VIZWxwZXIsIGRlbGF5TGVuZ3RoLCBwYXR0ZXJuLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5cbmV4cG9ydCB7IGRlYm91bmNlLCByZXRyeSQxIGFzIHJldHJ5LCB0YWtlRXZlcnkkMSBhcyB0YWtlRXZlcnksIHRha2VMYXRlc3QkMSBhcyB0YWtlTGF0ZXN0LCB0YWtlTGVhZGluZyQxIGFzIHRha2VMZWFkaW5nLCB0aHJvdHRsZSQxIGFzIHRocm90dGxlIH07XG4iLCJpbXBvcnQge1xyXG4gICAgTE9BRF9DVUNVTUJFUl9CVUlMRFMsXHJcbiAgICBMT0FEX0NVQ1VNQkVSX0pPQlMsXHJcbiAgICBMT0FEX0NVQ1VNQkVSX1JFUE9SVCwgU0FWRV9DVUNVTUJFUl9KT0JTLFxyXG59IGZyb20gXCIuLi9hY3Rpb24vYXBwLmFjdGlvblwiO1xyXG5pbXBvcnQgeyB0YWtlTGF0ZXN0LCBwdXQsIGNhbGwgfSBmcm9tICdAcmVkdXgtc2FnYS9jb3JlL2VmZmVjdHMnO1xyXG5pbXBvcnQgeyBDdWN1bWJlclJlcG9ydFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlL2N1Y3VtYmVyUmVwb3J0U2VydmljZSdcclxuXHJcblxyXG5jb25zdCBjdWN1bWJlclJlcG9ydFNlcnZpY2U9IG5ldyBDdWN1bWJlclJlcG9ydFNlcnZpY2UoKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiogYXBwU2FnYSgpIHtcclxuICAgIHlpZWxkIHRha2VMYXRlc3QoTE9BRF9DVUNVTUJFUl9KT0JTLCBsb2FkQ3VjdW1iZXJKb2JzKTtcclxuICAgIHlpZWxkIHRha2VMYXRlc3QoTE9BRF9DVUNVTUJFUl9CVUlMRFMsIGxvYWRDdWN1bWJlckJ1aWxkcyk7XHJcbiAgICB5aWVsZCB0YWtlTGF0ZXN0KExPQURfQ1VDVU1CRVJfUkVQT1JULCBsb2FkQ3VjdW1iZXJSZXBvcnQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiogbG9hZEN1Y3VtYmVySm9icygpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiU2FnYTogbG9hZEN1Y3VtYmVySm9ic1wiKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgY3VjdW1iZXJSZXBvcnRTZXJ2aWNlLmdldEN1Y3VtYmVySm9icygpO1xyXG4gICAgeWllbGQgcHV0KHtcclxuICAgICAgICB0eXBlOiBTQVZFX0NVQ1VNQkVSX0pPQlMsXHJcbiAgICAgICAgam9iczogcmVzcG9uc2UuZGF0YVxyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBsb2FkQ3VjdW1iZXJCdWlsZHMoKSB7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkQ3VjdW1iZXJSZXBvcnQoKSB7XHJcblxyXG59XHJcbiIsImltcG9ydCBheGlvcywgeyBBeGlvc1Jlc3BvbnNlIH0gZnJvbSBcImF4aW9zXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ3VjdW1iZXJSZXBvcnRTZXJ2aWNlIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0Q3VjdW1iZXJKb2JzKCk6IFByb21pc2U8QXhpb3NSZXNwb25zZT4ge1xyXG4gICAgICAgIHJldHVybiBheGlvcy5nZXQoXCJodHRwOi8vbG9jYWxob3N0OjkwMDEvYXBpL2N1Y3VtYmVySm9ic1wiKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDdWN1bWJlckJ1aWxkcyhqb2I6IHN0cmluZyk6IFByb21pc2U8QXhpb3NSZXNwb25zZT4ge1xyXG4gICAgICAgIHJldHVybiBheGlvcy5nZXQoYGh0dHA6Ly9sb2NhbGhvc3Q6OTAwMS9hcGkvam9iLyR7am9ifS9jdWN1bWJlckJ1aWxkc2ApXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEN1Y3VtYmVyUmVwb3J0KGpvYjogc3RyaW5nLCBidWlsZElkOiBudW1iZXIpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U+IHtcclxuICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KGBodHRwOi8vbG9jYWxob3N0OjkwMDEvYXBpL2N1Y3VtYmVyUmVwb3J0L2pvYi8ke2pvYn0vYnVpbGRJZC8ke2J1aWxkSWR9YClcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCBjcmVhdGVTYWdhTWlkZGxld2FyZSBmcm9tICdyZWR1eC1zYWdhJztcclxuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcclxuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSBcInJlZHV4LWxvZ2dlclwiO1xyXG5pbXBvcnQgeyByZWR1Y2VyIH0gZnJvbSAnLi9yZWR1Y2VyL2FwcC5yZWR1Y2VyJztcclxuaW1wb3J0IHsgYXBwU2FnYSB9IGZyb20gJy4vc2FnYS9hcHAuc2FnYSc7XHJcblxyXG5jb25zdCBsb2dnZXJNaWRkbGV3YXJlID0gY3JlYXRlTG9nZ2VyKCk7XHJcbmNvbnN0IHNhZ2FNaWRkbGV3YXJlID0gY3JlYXRlU2FnYU1pZGRsZXdhcmUoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKCkge1xyXG5cclxuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXHJcbiAgICAgICAgcmVkdWNlcixcclxuICAgICAgICBhcHBseU1pZGRsZXdhcmUoc2FnYU1pZGRsZXdhcmUsIGxvZ2dlck1pZGRsZXdhcmUsIHRodW5rKVxyXG4gICAgKTtcclxuXHJcbiAgICBzYWdhTWlkZGxld2FyZS5ydW4oYXBwU2FnYSk7XHJcblxyXG4gICAgcmV0dXJuIHN0b3JlO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEpvYlNlYXJjaEZvcm0gZnJvbSBcIi4vSm9iU2VhcmNoRm9ybVwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tIFwiLi4vc3RvcmUvc3RvcmVcIjtcblxuY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG5leHBvcnQgY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICAgICAgICAgIDxKb2JTZWFyY2hGb3JtLz5cbiAgICAgICAgICAgIDwvUHJvdmlkZXI+XG4gICAgICAgIClcbiAgICB9XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9jb21wb25lbnQvQXBwJztcblxuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSk7XG4iXSwic291cmNlUm9vdCI6IiJ9